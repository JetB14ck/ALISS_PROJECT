// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace ALISS.Pages.P2_Mapping___Copy
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using System.Text.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using System.Security.Claims;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.HttpOverrides;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Blazored;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Blazored.Menu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using BlazorDownloadFile;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.Account;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.DropDownList.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.LoginManagement.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Master.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Process.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.AUTH.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 32 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.MasterManagement.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 33 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.UserManagement.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 34 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.HISUpload.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 35 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.ANTIBIOGRAM.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 36 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.ANTIBIOTREND.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 37 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.GLASS.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 39 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D0_Master;

#line default
#line hidden
#nullable disable
#nullable restore
#line 41 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D3_Process;

#line default
#line hidden
#nullable disable
#nullable restore
#line 42 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D4_UserManagement.AUTH;

#line default
#line hidden
#nullable disable
#nullable restore
#line 43 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D4_UserManagement.MasterManagement;

#line default
#line hidden
#nullable disable
#nullable restore
#line 44 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D4_UserManagement.UserManagement;

#line default
#line hidden
#nullable disable
#nullable restore
#line 46 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D5_HISData;

#line default
#line hidden
#nullable disable
#nullable restore
#line 47 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D6_Report.Antibiogram;

#line default
#line hidden
#nullable disable
#nullable restore
#line 48 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D6_Report.Antibiotrend;

#line default
#line hidden
#nullable disable
#nullable restore
#line 49 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D6_Report.Glass;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\Pages\P2_Mapping - Copy\MappingTemplate.razor"
using ALISS.Data.D2_Mapping;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\Pages\P2_Mapping - Copy\MappingTemplate.razor"
using ALISS.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\Pages\P2_Mapping - Copy\MappingTemplate.razor"
using ALISS.Mapping.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\Pages\P2_Mapping - Copy\MappingTemplate.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\Pages\P2_Mapping - Copy\MappingTemplate.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\Pages\P2_Mapping - Copy\MappingTemplate.razor"
using Microsoft.AspNetCore.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\Pages\P2_Mapping - Copy\MappingTemplate.razor"
using System.IO;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/MappingTemplate")]
    [Microsoft.AspNetCore.Components.RouteAttribute("/MappingTemplate/{id}")]
    public partial class MappingTemplate : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 1093 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\Pages\P2_Mapping - Copy\MappingTemplate.razor"
       
    [CascadingParameter] MainLayout mainLayout { get; set; }

    [Parameter]
    public string id { get; set; }

    private string classLabel = "col-4";
    private string classInput = "col-8";

    RadzenGridCustom<WHONetMappingListsDTO> whonetGrid = new RadzenGridCustom<WHONetMappingListsDTO>();
    RadzenGridCustom<SpecimenMappingListsDTO> specimenGrid = new RadzenGridCustom<SpecimenMappingListsDTO>();
    RadzenGridCustom<OrganismMappingListsDTO> organismGrid = new RadzenGridCustom<OrganismMappingListsDTO>();
    RadzenGridCustom<WardTypeMappingListsDTO> wardTypeGrid = new RadzenGridCustom<WardTypeMappingListsDTO>();
    RadzenGridCustom<TemplateFileListsDTO> TemplateFileGrid = new RadzenGridCustom<TemplateFileListsDTO>();
    RadzenGridCustom<WHONETColumnDTO> WHONETColumnGrid = new RadzenGridCustom<WHONETColumnDTO>();

    private ConfigData configData = new ConfigData();
    private List<ParameterDTO> parameterDTO = new List<ParameterDTO>();
    private List<HospitalLabDataDTO> lab_ddl_List;
    private List<WardTypeDTO> wardTypeDatas;
    private List<SpecimenDTO> specimenDatas;
    private List<AntibioticDTO> antibioticDatas;
    private List<OrganismDTO> organismDatas;

    private List<WHONetMappingListsDTO> gridWHONetDatas;
    WHONetMappingSearch searchWHONet = new WHONetMappingSearch();
    WHONetMappingDataDTO objWHONetMapping = new WHONetMappingDataDTO();

    private List<SpecimenMappingListsDTO> gridSpecimenDatas;
    SpecimenMappingSearch searchSpecimen = new SpecimenMappingSearch();
    SpecimenMappingDataDTO objSpecimenMapping = new SpecimenMappingDataDTO();

    private List<OrganismMappingListsDTO> gridOrganismDatas;
    OrganismMappingSearch searchOrganism = new OrganismMappingSearch();
    OrganismMappingDataDTO objOrganismMapping = new OrganismMappingDataDTO();

    private List<WardTypeMappingListsDTO> gridWardTypeDatas;
    WardTypeMappingSearch searchWardType = new WardTypeMappingSearch();
    WardTypeMappingDataDTO objWardTypeMapping = new WardTypeMappingDataDTO();

    private List<TemplateFileListsDTO> gridTemplateFileDatas;

    private List<WHONETColumnDTO> WHONetMasterList;
    private List<AntibioticDTO> AntibioticMasterList;
    private MasterTemplateDTO ActiveMasterTemplate;

    private string _Username;
    private string _Group;
    private string _ModifiedDate;
    private string _Version;
    private string _StrControl = "";
    private string _Program;
    private string _WHOnetFieldSelected = "";
    private string _TemplateFieldSelected = "";
    private string _isAntibioticFieldTest = "";
    private string _Labname = "";
    private bool _isAntibioticField = false;
    private int value = 1;
    private bool showModal = false;
    private string _CurrentTab = "WHONET";

    private bool ShowWHONETMappingPopup = false;
    private bool ShowSpecimenMappingPopup = false;
    private bool ShowOrganismMappingPopup = false;
    private bool ShowWardTypeMappingPopup = false;

    private bool Expired = false;
    private bool pageLoading = true;
    private string tempid = "";
    private IBrowserFile selectedFiles;

    MappingSearchDTO searchLabModel = new MappingSearchDTO();
    private enum eMLABFileType
    {
        DISK = 1,
        MIC = 2,
        ETEST = 3,
        DISK_MIC = 4
    }
    private class clsFileType
    {
        public eMLABFileType mFileType { get; set; }
        public string FileTypeLabel { get; set; }
        public string FileTypeValue { get; set; }
    }

    clsFileType[] mlabFileType = new clsFileType[]
    {
        new clsFileType
        {
            mFileType = eMLABFileType.DISK,
            FileTypeLabel = "DISK",
            FileTypeValue = clsLabFileType.MLAB_FileType.DISK
        },
        new clsFileType
        {
            mFileType = eMLABFileType.MIC,
            FileTypeLabel = "MIC",
            FileTypeValue = clsLabFileType.MLAB_FileType.MIC
        },
        new clsFileType
        {
            mFileType = eMLABFileType.ETEST,
            FileTypeLabel = "ETEST(OM)",
            FileTypeValue = clsLabFileType.MLAB_FileType.ETEST
        },
        new clsFileType
        {
            mFileType = eMLABFileType.DISK_MIC,
            FileTypeLabel = "DISK(ตัวเลข) + MIC(SIR)",
            FileTypeValue = clsLabFileType.MLAB_FileType.MIC_SIR
        },
        new clsFileType
        {
            mFileType = eMLABFileType.DISK_MIC,
            FileTypeLabel = "DISK(SIR) + MIC(ตัวเลข)",
            FileTypeValue = clsLabFileType.MLAB_FileType.MIC_NUM
        }
                        };

    string[] programs = new[]
{
                "MLAB",
                "WHONET",
                "OTHER"
     };


    //string[] filetype = new[]
    //       {
    //            "DISK"
    //           ,"MIC"
    //           ,"ETEST"
    //           ,"ALL(DISK+MIC)"
    //        };

    string[] dateformat = new[]
          {
                "dd/mm/yyyy",
                "mm/dd/yyyy",
                "dd-mm-yyyy",
                "mm-dd-yyyy"
            };


    MappingDataDTO mappingData = new MappingDataDTO();


    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    async Task HandleSelection(InputFileChangeEventArgs e)
    {
        showModal = true;
        selectedFiles = e.File;

        var type = Path.GetExtension(selectedFiles.Name);
        //if (type != ".xlsx" && type != ".xls" && type != ".csv" && type != ".txt")
        //{
        //    showModal = false;
        //    await jsRuntime.InvokeAsync<object>("ShowAlert", "ไม่สามารถ Upload ไฟล์ " + selectedFiles.Name);
        //    return;
        //}

        if (selectedFiles != null)
        {
            gridTemplateFileDatas = await fileUpload.UploadAsync(selectedFiles, mappingData.mp_firstlineisheader);
            if (gridTemplateFileDatas.Count == 0)
            {
                showModal = false;
                await jsRuntime.InvokeAsync<object>("ShowAlert", "ไม่สามารถอ่านข้อมูลได้");
                return;
            }

            StateHasChanged();
            showModal = false;
        }
        else
        {
            showModal = false;
            await jsRuntime.InvokeAsync<object>("ShowAlert", "ไม่สามารถอ่านข้อมูลได้");
            return;
        }
    }



    void OnWHONetFieldSeleted(string whonetfield)
    {
        _WHOnetFieldSelected = whonetfield;

    }

    void OnTemplateFieldSeleted(string TemplateField)
    {
        _TemplateFieldSelected = TemplateField;
    }

    void onTabChange()
    {
        _WHOnetFieldSelected = "";
        _TemplateFieldSelected = "";

    }

    void DropdownChange(object value, string name)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

        events.Add(DateTime.Now, $"{name} value changed to {str}");
        StateHasChanged();
    }



    private void DDL_Change(string ddl_name, object value)
    {
        if (ddl_name == "Arh" && value == null)
        {
            searchLabModel.mps_Province = null;
            searchLabModel.mps_Hos = null;
            searchLabModel.mps_lab = null;
            mappingData.mp_hos_code = null;
            mappingData.mp_lab = null;
            _Labname = "";
        }
        else if (ddl_name == "Prv" && value == null)
        {
            searchLabModel.mps_Hos = null;
            searchLabModel.mps_lab = null;
            mappingData.mp_hos_code = null;
            mappingData.mp_lab = null;
            _Labname = "";
        }
        else if (ddl_name == "Prv" && value != null)
        {
            var prv_select = lab_ddl_List.FirstOrDefault(x => x.prv_code == value.ToString());

            searchLabModel.mps_Area = prv_select.arh_code;
        }
        else if (ddl_name == "Hos" && value == null)
        {
            searchLabModel.mps_lab = null;
            mappingData.mp_hos_code = null;
            mappingData.mp_lab = null;
            _Labname = "";
        }
        else if (ddl_name == "Hos" && value != null)
        {
            var hos_select = lab_ddl_List.FirstOrDefault(x => x.hos_code == value.ToString());

            searchLabModel.mps_Province = hos_select.prv_code;
            searchLabModel.mps_Area = hos_select.arh_code;
            searchLabModel.mps_lab = null;
            mappingData.mp_hos_code = hos_select.hos_code;
            mappingData.mp_lab = null;
            _Labname = "";
        }
        else if (ddl_name == "Lab" && value == null)
        {

            mappingData.mp_lab = null;
            _Labname = "";
        }
        else if (ddl_name == "Lab" && value != null)
        {
            var lab_select = lab_ddl_List.FirstOrDefault(x => x.lab_code == value.ToString() && x.hos_code == mappingData.mp_hos_code); //Change 20/07/2020

            mappingData.mp_lab = lab_select.lab_code;
            _Labname = lab_select.lab_name;
        }



        StateHasChanged();
    }
    void Change(DateTime? value, string name, string format)
    {
        events.Add(DateTime.Now, $"{name} value changed to {value?.ToString(format)}");
        StateHasChanged();
    }



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await mainLayout.GetLoginUser();
            if (mainLayout.loginUser.CheckPagePermission("MNU_0203") == false) navManager.NavigateTo("/NoPermissionPage");

            configData.ConfigDTOList = await configDataService.Get_TBConfig_DataList_Async(new TBConfigDTO() { tbc_mnu_code = "MNU_0203" });
            parameterDTO = await dropDownListDataService.GetParameterListByModelAsync(new ParameterDTO() { prm_code_major = "MLAB_MAPPING_TEMPLATE" });

            var searchData = new HospitalLabDataDTO()
            {
                arh_code = searchLabModel.mps_Area = mainLayout.loginUser.arh_code,
                prv_code = searchLabModel.mps_Province = mainLayout.loginUser.prv_code,
                hos_code = searchLabModel.mps_Hos = mainLayout.loginUser.hos_code,
                lab_code = searchLabModel.mps_lab = mainLayout.loginUser.lab_code
            };

            lab_ddl_List = await ddlDataService.GetAllLabListByModelAsync(searchData);



            //_Username = mainLayout.loginUser.Username;
            _Group = mainLayout.loginUser.hos_name;

            var searchMasterTemplate = new MasterTemplateSearchDTO();
            ActiveMasterTemplate = await masterTemplateService.GetListByModelActiveAsync(searchMasterTemplate);
            tempid = parameterDTO.FirstOrDefault(x => x.prm_code_minor == "mp_id").prm_value;
            if (tempid != "")
                id = tempid;

            if (string.IsNullOrEmpty(id))
            {
                _StrControl = "N";

                if (ActiveMasterTemplate == null)
                {
                    await jsRuntime.InvokeAsync<object>("ShowAlert", "ไม่พบ Master Template ที่มีสถานะเป็น Active (กรุณาติดต่อผู้ดูแลระบบ)");
                    return;
                    OpenMappingIndex();
                }
                else
                {
                    mappingData.mp_mst_code = ActiveMasterTemplate.mst_code;
                    mappingData.mp_firstlineisheader = true;
                    _Version = mappingData.mp_mst_code;
                }

            }
            else
            {

                _StrControl = "E";
                mappingData = await mappingservice.GetMappingDataAsync(id);

                if (mappingData.mp_enddate != null)
                {
                    if (mappingData.mp_enddate < DateTime.Now) Expired = true;

                }
                //if (ActiveMasterTemplate != null)
                //{
                //    if (mappingData.mp_mst_code != ActiveMasterTemplate.mst_code)
                //    {
                //        await jsRuntime.InvokeAsync<object>("ShowAlert", "กรุณาสร้าง Template Mapping ใหม่เนื่องจาก Master Template (" + mappingData.mp_mst_code + ") ไม่ตรงกับ Version ปัจจุบัน (" + ActiveMasterTemplate.mst_code + ")");
                //        return;
                //        OpenMappingIndex();
                //    }
                //}
                if (mappingData.mp_status != 'A')
                {
                    mappingData.mp_status = 'E';
                }

                _Username = mappingData.mp_updateuser;
                _ModifiedDate = mappingData.mp_updatedate.ToString();
                _Version = mappingData.mp_version.ToString() + " (" + mappingData.mp_mst_code + ")";
                _Program = mappingData.mp_program;
                searchWHONet.wnm_mappingid = mappingData.mp_id;
                searchWHONet.wnm_mst_code = mappingData.mp_mst_code;
                searchSpecimen.spm_mappingid = mappingData.mp_id;
                searchSpecimen.spm_mst_code = mappingData.mp_mst_code;
                searchOrganism.ogm_mappingid = mappingData.mp_id;
                searchOrganism.ogm_mst_code = mappingData.mp_mst_code;
                searchWardType.wdm_mappingid = mappingData.mp_id;
                searchWardType.wdm_mst_code = mappingData.mp_mst_code;


                gridWHONetDatas = await mappingservice.GetWHONetMappingListByModelAsync(searchWHONet);
                gridSpecimenDatas = await mappingservice.GetSpecimenMappingListByModelAsync(searchSpecimen);
                gridOrganismDatas = await mappingservice.GetOrganismMappingListByModelAsync(searchOrganism);
                gridWardTypeDatas = await mappingservice.GetWardTypeMappingListByModelAsync(searchWardType);

                WHONETColumnDTO searchWHONETColumn = new WHONETColumnDTO();
                searchWHONETColumn.wnc_code = mappingData.mp_mst_code;
                WHONetMasterList = await whonetcolumnservice.GetListByModelActiveAsync(searchWHONETColumn);

                // Antibiotic Name from Master

                var AntibioticData = await whonetService.GetDataList_TCWHONET_Antibiotics_Async();
                foreach (var item in AntibioticData)
                {
                    WHONetMasterList.Add(new WHONETColumnDTO()
                    {
                        wnc_name = item.who_ant_code
                    });
                }

                // End

                foreach (WHONetMappingListsDTO item in gridWHONetDatas)
                {
                    var itemToRemove = WHONetMasterList.FirstOrDefault(r => r.wnc_name == item.wnm_whonetfield);
                    //var itemToRemove = WHONetMasterList.SingleOrDefault(r => r.wnc_name == item.wnm_whonetfield);
                    if (itemToRemove != null)
                        WHONetMasterList.Remove(itemToRemove);
                }


                var labInfo = lab_ddl_List.FirstOrDefault(x => x.lab_code == mappingData.mp_lab && x.hos_code == mappingData.mp_hos_code);
                if (labInfo != null)
                {
                    _Labname = labInfo.lab_name;

                    searchLabModel.mps_Hos = labInfo.hos_code;
                    searchLabModel.mps_Province = labInfo.prv_code;
                    searchLabModel.mps_Area = labInfo.arh_code;
                    searchLabModel.mps_lab = labInfo.lab_code;

                }
                _StrControl = "E";
            }

            pageLoading = false;
            StateHasChanged();
        }
    }
    private async Task GetData()
    {
        showModal = true;

        //_Username = mainLayout.loginUser.Username;
        _Group = mainLayout.loginUser.hos_name;

        var searchMasterTemplate = new MasterTemplateSearchDTO();
        ActiveMasterTemplate = await masterTemplateService.GetListByModelActiveAsync(searchMasterTemplate);

        if (tempid != "")
            id = tempid;

        if (string.IsNullOrEmpty(id))
        {
            _StrControl = "N";

            if (ActiveMasterTemplate == null)
            {
                await jsRuntime.InvokeAsync<object>("ShowAlert", "ไม่พบ Master Template ที่มีสถานะเป็น Active (กรุณาติดต่อผู้ดูแลระบบ)");
                return;
                OpenMappingIndex();
            }
            else
            {
                mappingData.mp_mst_code = ActiveMasterTemplate.mst_code;
                _Version = mappingData.mp_mst_code;
            }

        }
        else
        {

            _StrControl = "E";
            mappingData = await mappingservice.GetMappingDataAsync(id);

            if (mappingData.mp_enddate != null)
            {
                if (mappingData.mp_enddate < DateTime.Now) Expired = true;

            }
            if (ActiveMasterTemplate != null)
            {
                if (mappingData.mp_mst_code != ActiveMasterTemplate.mst_code)
                {
                    //await jsRuntime.InvokeAsync<object>("ShowAlert", "กรุณาสร้าง Template Mapping ใหม่เนื่องจาก Master Template (" + mappingData.mp_mst_code + ") ไม่ตรงกับ Version ปัจจุบัน (" + ActiveMasterTemplate.mst_code + ")");
                    //return;
                    //OpenMappingIndex();

                }
            }
            if (mappingData.mp_status != 'A')
            {
                mappingData.mp_status = 'E';
            }

            _Username = mappingData.mp_updateuser;
            _ModifiedDate = mappingData.mp_updatedate.ToString();
            _Version = mappingData.mp_version.ToString() + " (" + mappingData.mp_mst_code + ")";
            _Program = mappingData.mp_program;
            searchWHONet.wnm_mappingid = mappingData.mp_id;
            searchWHONet.wnm_mst_code = mappingData.mp_mst_code;
            searchSpecimen.spm_mappingid = mappingData.mp_id;
            searchSpecimen.spm_mst_code = mappingData.mp_mst_code;
            searchOrganism.ogm_mappingid = mappingData.mp_id;
            searchOrganism.ogm_mst_code = mappingData.mp_mst_code;
            searchWardType.wdm_mappingid = mappingData.mp_id;
            searchWardType.wdm_mst_code = mappingData.mp_mst_code;


            gridWHONetDatas = await mappingservice.GetWHONetMappingListByModelAsync(searchWHONet);
            gridSpecimenDatas = await mappingservice.GetSpecimenMappingListByModelAsync(searchSpecimen);
            gridOrganismDatas = await mappingservice.GetOrganismMappingListByModelAsync(searchOrganism);
            gridWardTypeDatas = await mappingservice.GetWardTypeMappingListByModelAsync(searchWardType);

            WHONETColumnDTO searchWHONETColumn = new WHONETColumnDTO();
            searchWHONETColumn.wnc_code = mappingData.mp_mst_code;
            WHONetMasterList = await whonetcolumnservice.GetListByModelActiveAsync(searchWHONETColumn);

            //AntibioticDTO searchAntibiotic = new AntibioticDTO();
            //searchAntibiotic.ant_mst_code = mappingData.mp_mst_code;
            //AntibioticMasterList = await antibioticservice.GetListByModelActiveAsync(searchAntibiotic);

            var AntibioticData = await whonetService.GetDataList_TCWHONET_Antibiotics_Async();
            foreach (var item in AntibioticData)
            {
                WHONetMasterList.Add(new WHONETColumnDTO()
                {
                    wnc_name = item.who_ant_code
                });
            }

            foreach (WHONetMappingListsDTO item in gridWHONetDatas)
            {
                var itemToRemove = WHONetMasterList.SingleOrDefault(r => r.wnc_name == item.wnm_whonetfield);
                if (itemToRemove != null)
                    WHONetMasterList.Remove(itemToRemove);
            }


            var labInfo = lab_ddl_List.FirstOrDefault(x => x.lab_code == mappingData.mp_lab && x.hos_code == mappingData.mp_hos_code);
            if (labInfo is not null)
            {
                _Labname = labInfo.lab_name;
                searchLabModel.mps_Hos = labInfo.hos_code;
                searchLabModel.mps_Province = labInfo.prv_code;
                searchLabModel.mps_Area = labInfo.arh_code;
                searchLabModel.mps_lab = labInfo.lab_code;
            }

            _StrControl = "E";
        }



        showModal = false;
        StateHasChanged();
    }


    void OpenMappingIndex()
    {
        navManager.NavigateTo("MappingIndex");
    }

    private async Task SaveMapping()
    {
        showModal = true;

        mappingData = await mappingservice.SaveMappingDataAsync(mappingData);
        _StrControl = "E";
        tempid = mappingData.mp_id.ToString();

        showModal = false;
        //navManager.NavigateTo("MappingDetail/" + id);
        await GetData();
        StateHasChanged();
    }

    public string dialogmessage;

    async Task ShowConfirmDialog(string type)
    {


        if (type.Equals("SaveMapping"))
        {
            var chkOldMappingData = await mappingservice.GetMappingDataByModelAsync(mappingData);
            var result = await jsRuntime.InvokeAsync<bool>("ShowConfirm", "Confirm save data.");
            if (result)
            {
                if (_StrControl == "N")
                {
                    var now = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
                    if (mappingData.mp_startdate < now)
                    {
                        showModal = false;
                        await jsRuntime.InvokeAsync<object>("ShowAlert", "วันที่เริ่มใช้งานไม่สามารถมีค่าก่อนวันที่ปัจจุบัน");
                        return;
                    }

                    if (chkOldMappingData.mp_id != Guid.Empty)
                    {
                        //Dialog Confirm
                        var result2 = await jsRuntime.InvokeAsync<bool>("ShowConfirm", "Found old version(" + @chkOldMappingData.mp_version.ToString() + ").Do you want to create new version?");

                        if (result2)
                        {
                            if (mappingData.mp_startdate <= chkOldMappingData.mp_startdate && mappingData.mp_id != chkOldMappingData.mp_id)
                            {
                                showModal = false;
                                await jsRuntime.InvokeAsync<object>("ShowAlert", "วันที่เริ่มใช้งานไม่สามารถมีค่าก่อนหรือวันเดียวกันกับวันที่เริ่มใช้งานของ Version ก่อนหน้า (" + @chkOldMappingData.mp_version.ToString() + ")(" + @chkOldMappingData.mp_startdate_str + ")");
                                return;
                            }
                            mappingData.mp_version = Math.Floor(chkOldMappingData.mp_version + 1);
                        }
                        else
                        {
                            showModal = false;
                            return;
                        }
                    }


                    mappingData.mp_createuser = mainLayout.loginUser.Username;
                }
                else if (_StrControl == "E")
                {
                    if (mappingData.mp_startdate <= chkOldMappingData.mp_startdate && mappingData.mp_id != chkOldMappingData.mp_id)
                    {
                        showModal = false;
                        await jsRuntime.InvokeAsync<object>("ShowAlert", "วันที่เริ่มใช้งานไม่สามารถมีค่าก่อนหรือวันเดียวกันกับวันที่เริ่มใช้งานของ Version ก่อนหน้า (" + @chkOldMappingData.mp_version.ToString() + ")(" + @chkOldMappingData.mp_startdate_str + ")");
                        return;
                    }
                    mappingData.mp_status = 'E';
                }
                mappingData.mp_updateuser = mainLayout.loginUser.Username;
                if (mappingData.mp_mst_code != ActiveMasterTemplate.mst_code)
                {
                    mappingData.mp_mst_code = ActiveMasterTemplate.mst_code;
                }
                await SaveMapping();
            }
            else
            {
                return;
            }
        }
        else if (type.Equals("ApproveMapping"))
        {
            string confirmMessage = "";
            if (!gridWHONetDatas.Where(x => x.wnm_whonetfield.Contains("_NM")).Any()
                || !gridWHONetDatas.Where(x => x.wnm_whonetfield.Contains("_NE")).Any()
                || !gridWHONetDatas.Where(x => x.wnm_whonetfield.Contains("_ND")).Any())
                confirmMessage = "มีข้อมูล Mapping ค่ายาไม่ครบ (Disk,MIC,Etest) ต้องการที่จะ Approve ใช่หรือไม่";
            else
                confirmMessage = "Confirm approve data.";

            var result = await jsRuntime.InvokeAsync<bool>("ShowConfirm", confirmMessage);
            if (result)
            {
                string Param_labno = "";
                string Param_organism = "";
                string Param_date = "";
                string ErrorMessage = "";

                var ParameterList = await ddlDataService.GetParameterListByModelAsync("UPLOAD_KEY");


                if (ParameterList.Count != 0)
                {
                    Param_labno = ParameterList.FirstOrDefault(x => x.prm_code_minor == "LAB_NO").prm_value;
                    Param_organism = ParameterList.FirstOrDefault(x => x.prm_code_minor == "ORGANISM").prm_value;
                    Param_date = ParameterList.FirstOrDefault(x => x.prm_code_minor == "DATE").prm_value;
                }

                if (gridWHONetDatas.FirstOrDefault(x => x.wnm_whonetfield == Param_labno) == null)
                    ErrorMessage += "- ไม่มีการ Mapping " + Param_labno + "\n";

                if (gridWHONetDatas.FirstOrDefault(x => x.wnm_whonetfield == Param_organism) == null)
                    ErrorMessage += "- ไม่มีการ Mapping " + Param_organism + "\n";

                if (gridWHONetDatas.FirstOrDefault(x => x.wnm_whonetfield == Param_date) == null)
                    ErrorMessage += "- ไม่มีการ Mapping " + Param_date + "\n";

                if (ErrorMessage != "")
                {
                    ErrorMessage = "ไม่สามารถ Approve ได้ \n" + ErrorMessage;

                    showModal = false;
                    await jsRuntime.InvokeAsync<object>("ShowAlert", ErrorMessage);
                    return;

                }

                //var chkDuplicateMappingApproved = await mappingservice.GetchkDuplicateMappingApprovedAsync(mappingData);

                //if (chkDuplicateMappingApproved.mp_id != Guid.Empty)
                //{
                //    showModal = false;
                //    await jsRuntime.InvokeAsync<object>("ShowAlert", "ไม่สามารถ Approved ซ้ำกับ Template ที่มีการ Approved ก่อนหน้าแล้ว");
                //    return;
                //}


                mappingData.mp_status = 'A';
                mappingData.mp_approveduser = mainLayout.loginUser.Username;
                mappingData.mp_updateuser = mainLayout.loginUser.Username;
                SaveMapping();
            }
            else
            {
                return;
            }


        }


    }


    async Task ControlPopup(string type, bool control)
    {
        if (type == "WHONET")
        {
            ShowWHONETMappingPopup = control;
            _isAntibioticField = false;
            _CurrentTab = "WHONET";
        }
        else if (type == "Specimen")
        {
            ShowSpecimenMappingPopup = control;
            _CurrentTab = "Specimen";

        }
        else if (type == "Organism")
        {
            ShowOrganismMappingPopup = control;
            _CurrentTab = "Organism";
        }
        else if (type == "WardType")
        {
            ShowWardTypeMappingPopup = control;
            _CurrentTab = "WardType";
        }
    }




    #region Whonet

    async Task DoubleClickWHONETMapping()
    {
        if (_WHOnetFieldSelected != "" && _TemplateFieldSelected != "")
        {
            ShowWHONetMappingDialog("N", "");
        }
    }
    private void SearchInboxDataTemplateFileGrid()
    {
        if (TemplateFileGrid.radzenGrid != null) TemplateFileGrid.radzenGrid.GoToPage(0);
        StateHasChanged();
    }

    private void SearchInboxDataWHONETColumnGrid()
    {
        if (WHONETColumnGrid.radzenGrid != null) WHONETColumnGrid.radzenGrid.GoToPage(0);
        StateHasChanged();
    }

    private void SearchInboxDataWHONetMapping()
    {
        if (whonetGrid.radzenGrid != null) whonetGrid.radzenGrid.GoToPage(0);
        StateHasChanged();
    }

    async Task ShowWHONetMappingDialog(string action, string wnm_Id)
    {
        showModal = true;
        if (action.Equals("E") || action.Equals("N"))
        {
            if (string.IsNullOrEmpty(wnm_Id))
            {

                objWHONetMapping = new WHONetMappingDataDTO()
                {
                    wnm_mappingid = searchWHONet.wnm_mappingid,
                    wnm_status = 'N',
                    wnm_whonetfield = _WHOnetFieldSelected,
                    wnm_originalfield = _TemplateFieldSelected,
                    wnm_type = WHONetMasterList.FirstOrDefault(w => w.wnc_name == _WHOnetFieldSelected).wnc_data_type,
                    wnm_fieldformat = WHONetMasterList.FirstOrDefault(w => w.wnc_name == _WHOnetFieldSelected).wnc_date_format,
                    wnm_encrypt = WHONetMasterList.FirstOrDefault(w => w.wnc_name == _WHOnetFieldSelected).wnc_encrypt,
                    wnm_mandatory = WHONetMasterList.FirstOrDefault(w => w.wnc_name == _WHOnetFieldSelected).wnc_mendatory,
                    wnm_createuser = mainLayout.loginUser.Username,
                    wnm_updateuser = mainLayout.loginUser.Username
                };
            }
            else
            {
                objWHONetMapping = await mappingservice.GetWHONetMappingDataAsync(wnm_Id);
                objWHONetMapping.wnm_status = 'E';
                objWHONetMapping.wnm_updateuser = mainLayout.loginUser.Username;
            }
            ControlPopup("WHONET", true);

            showModal = false;
        }
        else
        {
            objWHONetMapping = await mappingservice.GetWHONetMappingDataAsync(wnm_Id);
            objWHONetMapping.wnm_status = 'E';
            objWHONetMapping.wnm_flagdelete = true;
            objWHONetMapping.wnm_updateuser = mainLayout.loginUser.Username;

            showModal = false;
            var result = await jsRuntime.InvokeAsync<bool>("ShowConfirm", "Confirm delete data.");
            if (result)
            {
                SaveWHONetMappingData();
            }
            else
            {
                return;
            }
        }
    }
    async void SaveWHONetMappingData()
    {
        showModal = true;
        var chkWHONetMappingDup = await mappingservice.GetWHONetMappingDataByModelAsync(objWHONetMapping);
        //wnm_mappingid, wnm_whonetfield or wnm_originalfield

        if (chkWHONetMappingDup.wnm_id == Guid.Empty || objWHONetMapping.wnm_flagdelete == true || _isAntibioticField == true)
        {
            //if(objWHONetMapping.wnm_status == 'N'  && _isAntibioticField == true && objWHONetMapping.wnm_antibioticcolumn == null)
            //{
            //    showModal = false;
            //    await jsRuntime.InvokeAsync<object>("ShowAlert", "Please select antibiotic column.");
            //    return;
            //}

            //if (objWHONetMapping.wnm_status == 'N' && _isAntibioticField == true && objWHONetMapping.wnm_antibiotic == null)
            //{
            //    showModal = false;
            //    await jsRuntime.InvokeAsync<object>("ShowAlert", "Please input antibiotic name.");
            //    return;
            //}
            if (!checkAntibioticColumn || !checkAntibioticName || !checkFormat)
            {
                showModal = false;
                await jsRuntime.InvokeAsync<object>("ShowAlert", "Data not valid to save.");

                return;
            }
            var result = await mappingservice.SaveWHONetMappingDataAsync(objWHONetMapping);
            if (result.wnm_status == 'N')
            {
                WHONetMasterList.Remove(WHONetMasterList.Single(s => s.wnc_name == _WHOnetFieldSelected));
                _WHOnetFieldSelected = "";

                if (_isAntibioticField == false)
                {
                    //gridTemplateFileDatas.Remove(gridTemplateFileDatas.Single(s => s.tmp_header == _TemplateFieldSelected));
                    _TemplateFieldSelected = "";
                }
                _isAntibioticField = false;

            }
            else if (result.wnm_status == 'E' && result.wnm_flagdelete == true)
            {
                WHONetMasterList.Add(new WHONETColumnDTO() { wnc_name = result.wnm_whonetfield });
            }

            ControlPopup("WHONET", false);
            showModal = false;
            await GetData();
            StateHasChanged();
        }
        else
        {
            var result = await mappingservice.SaveWHONetMappingDataAsync(objWHONetMapping);
            ControlPopup("WHONET", false);
            showModal = false;
            await GetData();
            StateHasChanged();

            //showModal = false;
            //await jsRuntime.InvokeAsync<object>("ShowAlert", "Duplicate data.");
            //return;
        }

    }


    private bool checkAntibioticColumn { get { return ((_isAntibioticField != true) || (objWHONetMapping.wnm_antibioticcolumn != null)); } }
    private bool checkAntibioticName { get { return ((_isAntibioticField != true) || (objWHONetMapping.wnm_antibiotic != null)); } }
    private bool checkFormat { get { return ((objWHONetMapping.wnm_type != "Date") || (objWHONetMapping.wnm_fieldformat != null)); } }

    private void ClearAntibiotic()
    {
        if (_isAntibioticField == false)
        {
            objWHONetMapping.wnm_antibioticcolumn = null;
            objWHONetMapping.wnm_antibiotic = null;

        }



    }

    #endregion

    #region Specimen
    private void SearchInboxDataSpecimen()
    {
        if (specimenGrid.radzenGrid != null) specimenGrid.radzenGrid.GoToPage(0);
        StateHasChanged();
    }

    async Task ShowSpecimenMappingDialog(string action, string spm_Id)
    {
        showModal = true;
        if (action.Equals("E") || action.Equals("N"))
        {
            if (string.IsNullOrEmpty(spm_Id))
            {
                objSpecimenMapping = new SpecimenMappingDataDTO()
                {
                    spm_mappingid = searchSpecimen.spm_mappingid,
                    spm_status = 'N',
                    spm_createuser = mainLayout.loginUser.Username,
                    spm_updateuser = mainLayout.loginUser.Username
                };
            }
            else
            {
                objSpecimenMapping = await mappingservice.GetSpecimenMappingDataAsync(spm_Id);
                objSpecimenMapping.spm_status = 'E';
                objSpecimenMapping.spm_updateuser = mainLayout.loginUser.Username;
            }

            //Get Specimen Master

            specimenDatas = await specimenService.GetListByModelMappingActiveAsync(new SpecimenDTO() { spc_mst_code = mappingData.mp_mst_code });
            //specimenDatas = await specimenService.GetListByModelActiveAsync(new SpecimenDTO() { spc_mst_code = mappingData.mp_mst_code });
            ControlPopup("Specimen", true);


            showModal = false;
        }
        else
        {
            objSpecimenMapping = await mappingservice.GetSpecimenMappingDataAsync(spm_Id);
            objSpecimenMapping.spm_status = 'E';
            objSpecimenMapping.spm_flagdelete = true;
            objSpecimenMapping.spm_updateuser = mainLayout.loginUser.Username;

            showModal = false;
            var result = await jsRuntime.InvokeAsync<bool>("ShowConfirm", "Confirm delete data.");
            if (result)
            {
                SaveSpecimenMappingData();
            }
            else
            {
                return;
            }

        }
    }
    async void SaveSpecimenMappingData()
    {
        showModal = true;
        var chkSpecimenMappingDup = await mappingservice.GetSpecimenMappingDataByModelAsync(objSpecimenMapping);
        //spm_mappingid,spm_localspecimencode
        if (chkSpecimenMappingDup.spm_id == Guid.Empty || objSpecimenMapping.spm_flagdelete == true || objSpecimenMapping.spm_status == 'E')
        {
            var result = await mappingservice.SaveSpecimenMappingDataAsync(objSpecimenMapping);

            ControlPopup("Specimen", false);

            await GetData();

            showModal = false;
            StateHasChanged();
        }
        else
        {
            showModal = false;
            StateHasChanged();
            await jsRuntime.InvokeAsync<object>("ShowAlert", "Duplicate data.");
            return;
        }

    }

    #endregion

    #region Organism
    private void SearchInboxDataOrganism()
    {
        if (organismGrid.radzenGrid != null) organismGrid.radzenGrid.GoToPage(0);
        StateHasChanged();
    }

    async Task ShowOrganismMappingDialog(string action, string ogm_Id)
    {
        showModal = true;
        if (action.Equals("E") || action.Equals("N"))
        {
            if (string.IsNullOrEmpty(ogm_Id))
            {
                objOrganismMapping = new OrganismMappingDataDTO()
                {
                    ogm_mappingid = searchOrganism.ogm_mappingid,
                    ogm_status = 'N',
                    ogm_createuser = mainLayout.loginUser.Username,
                    ogm_updateuser = mainLayout.loginUser.Username
                };
            }
            else
            {
                objOrganismMapping = await mappingservice.GetOrganismMappingDataAsync(ogm_Id);
                objOrganismMapping.ogm_status = 'E';
                objOrganismMapping.ogm_updateuser = mainLayout.loginUser.Username;
            }

            //Get Organism Master

            organismDatas = await organismService.GetListByModelActiveAsync(new OrganismDTO() { org_mst_code = mappingData.mp_mst_code });

            ControlPopup("Organism", true);
            showModal = false;
        }
        else
        {
            objOrganismMapping = await mappingservice.GetOrganismMappingDataAsync(ogm_Id);
            objOrganismMapping.ogm_status = 'E';
            objOrganismMapping.ogm_flagdelete = true;
            objOrganismMapping.ogm_updateuser = mainLayout.loginUser.Username;
            showModal = false;

            var result = await jsRuntime.InvokeAsync<bool>("ShowConfirm", "Confirm delete data.");
            if (result)
            {
                SaveOrganismMappingData();
            }
            else
            {
                return;
            }

        }
    }
    async void SaveOrganismMappingData()
    {
        showModal = true;
        var chkOrganismMappingDup = await mappingservice.GetOrganismMappingDataByModelAsync(objOrganismMapping);

        if (chkOrganismMappingDup.ogm_id == Guid.Empty || objOrganismMapping.ogm_flagdelete == true || objOrganismMapping.ogm_status == 'E')
        {

            var result = await mappingservice.SaveOrganismMappingDataAsync(objOrganismMapping);
            //ogm_mappingid,ogm_localorganismcode
            ControlPopup("Organism", false);

            await GetData();
            showModal = false;
            StateHasChanged();
        }
        else
        {
            showModal = false;
            StateHasChanged();
            await jsRuntime.InvokeAsync<object>("ShowAlert", "Duplicate data.");
            return;
        }
    }

    private void OrganismCode_DDL_Change()
    {
        //var value = objOrganismMapping.ogm_whonetcode;
        //if (value != null)
        //{
        //    objOrganismMapping.ogm_whonetdesc = organismDatas.FirstOrDefault(x => x.org_mst_ORG.ToUpper() == value.ToUpper()).org_mst_ORGANISM;
        //}
        //else
        //{
        //    objOrganismMapping.ogm_whonetdesc = "";
        //}

        var value = objOrganismMapping.ogm_whonetdesc;
        if (value != null)
        {
            objOrganismMapping.ogm_whonetcode = organismDatas.FirstOrDefault(x => x.org_mst_ORGANISM.ToUpper() == value.ToUpper()).org_mst_ORG;
        }
        else
        {
            objOrganismMapping.ogm_whonetcode = "";
        }

        StateHasChanged();
    }
    #endregion

    #region WardType
    bool ShowWardTypePopup = false;

    private void SearchInboxDataWardType()
    {
        if (wardTypeGrid.radzenGrid != null) wardTypeGrid.radzenGrid.GoToPage(0);
        StateHasChanged();
    }


    async Task ShowWardTypeMappingDialog(string action, string wdm_Id)
    {
        showModal = true;
        if (action.Equals("E") || action.Equals("N"))
        {
            if (string.IsNullOrEmpty(wdm_Id))
            {
                objWardTypeMapping = new WardTypeMappingDataDTO()
                {
                    wdm_mappingid = searchWardType.wdm_mappingid,
                    wdm_status = 'N',
                    wdm_createuser = mainLayout.loginUser.Username,
                    wdm_updateuser = mainLayout.loginUser.Username
                };
            }
            else
            {
                objWardTypeMapping = await mappingservice.GetWardTypeMappingDataAsync(wdm_Id);
                objWardTypeMapping.wdm_status = 'E';
                objWardTypeMapping.wdm_updateuser = mainLayout.loginUser.Username;
            }

            //Get WardType Master

            wardTypeDatas = await wardTypeService.GetListByModelActiveAsync(new WardTypeDTO() { wrd_mst_code = mappingData.mp_mst_code });


            await ControlPopup("WardType", true);
            showModal = false;
        }
        else
        {
            objWardTypeMapping = await mappingservice.GetWardTypeMappingDataAsync(wdm_Id);
            objWardTypeMapping.wdm_status = 'E';
            objWardTypeMapping.wdm_flagdelete = true;
            objWardTypeMapping.wdm_updateuser = mainLayout.loginUser.Username;
            showModal = false;
            var result = await jsRuntime.InvokeAsync<bool>("ShowConfirm", "Confirm delete data.");
            if (result)
            {
                SaveWardTypeMappingData();
            }
            else
            {
                return;
            }


        }
    }
    async void SaveWardTypeMappingData()
    {
        showModal = true;
        var chkWardTypeMappingDup = await mappingservice.GetWardTypeMappingDataByModelAsync(objWardTypeMapping);
        //wdm_mappingid,wdm_wardtype,wdm_localwardname
        if (chkWardTypeMappingDup.wdm_id == Guid.Empty || objWardTypeMapping.wdm_flagdelete == true || objWardTypeMapping.wdm_status == 'E')
        {
            var result = await mappingservice.SaveWardTypeMappingDataAsync(objWardTypeMapping);

            ControlPopup("WardType", false);

            await GetData();
            showModal = false;
            StateHasChanged();
        }
        else
        {
            showModal = false;
            StateHasChanged();
            await jsRuntime.InvokeAsync<object>("ShowAlert", "Duplicate data.");
            return;
        }
    }
    private void WardType_DDL_Change()
    {
        var value = objWardTypeMapping.wdm_wardtype;
        if (value != null)
        {

            objWardTypeMapping.wdm_warddesc = wardTypeDatas.FirstOrDefault(x => x.wrd_code == value).wrd_name;

        }


        StateHasChanged();
    }

    #endregion












#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private DropDownListDataService dropDownListDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ConfigDataService configDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private DropDownListDataService ddlDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private TemplateUploadService fileUpload { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private WHONETService whonetService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private DialogService dialogService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private MasterTemplateService masterTemplateService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private OrganismService organismService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private SpecimenService specimenService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private WardTypeService wardTypeService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AntibioticService antibioticservice { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private WHONETColumnService whonetcolumnservice { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private MappingService mappingservice { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime jsRuntime { get; set; }
    }
}
#pragma warning restore 1591
