// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace ALISS.Pages.P4_UserManagement.UserManagement
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using System.Text.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using System.Security.Claims;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.HttpOverrides;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using Blazored;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using Blazored.Menu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using BlazorDownloadFile;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.Account;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.DropDownList.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.LoginManagement.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Master.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Process.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.AUTH.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 32 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.MasterManagement.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 33 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.UserManagement.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 34 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.HISUpload.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 35 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.ANTIBIOGRAM.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 36 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.ANTIBIOTREND.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 37 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.GLASS.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 39 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D0_Master;

#line default
#line hidden
#nullable disable
#nullable restore
#line 41 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D3_Process;

#line default
#line hidden
#nullable disable
#nullable restore
#line 42 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D4_UserManagement.AUTH;

#line default
#line hidden
#nullable disable
#nullable restore
#line 43 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D4_UserManagement.MasterManagement;

#line default
#line hidden
#nullable disable
#nullable restore
#line 44 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D4_UserManagement.UserManagement;

#line default
#line hidden
#nullable disable
#nullable restore
#line 46 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D5_HISData;

#line default
#line hidden
#nullable disable
#nullable restore
#line 47 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D6_Report.Antibiogram;

#line default
#line hidden
#nullable disable
#nullable restore
#line 48 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D6_Report.Antibiotrend;

#line default
#line hidden
#nullable disable
#nullable restore
#line 49 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D6_Report.Glass;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/UserManagement/UserLogin/DataDetail")]
    [Microsoft.AspNetCore.Components.RouteAttribute("/UserManagement/UserLogin/DataDetail/{usr_username}")]
    public partial class UserLoginDetail : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 253 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\Pages\P4_UserManagement\UserManagement\UserLoginDetail.razor"
       
    [CascadingParameter] MainLayout mainLayout { get; set; }
    [Parameter] public string usr_username { get; set; }

    private ConfigData configData = new ConfigData();
    private string classLabel = "col-4";
    private string classInput = "col-8";
    private bool showPopupDialog;
    private bool showLoading;

    private List<HospitalLabDataDTO> lab_ddl_List;
    private List<DropDownListDTO> rol_List;

    private UserLoginDTO dataModel;

    private RadzenGridCustom<UserLoginPermissionDTO> dataDetailGrid = new RadzenGridCustom<UserLoginPermissionDTO>();
    private List<UserLoginPermissionDTO> dataDetailList;
    UserLoginPermissionDTO dataDetailModel = new UserLoginPermissionDTO();

    private List<LogProcessDTO> historyResultList;

    private string txtPassword;
    private string txtPasswordConfirm;

    bool txtReadOnly = true;
    bool changePassword;
    bool resetPassword;
    bool checkEmail;
    bool checkPasswordConfirm;

    private HospitalDataDTO searchData;
    private UserLoginSearchDTO searchModel = new UserLoginSearchDTO();
    bool ShowPopup = false;

    PasswordConfigDTO pwdCfg;

    List<string> errMessage = new List<string>();

    private bool pageLoading { get { return (dataModel == null || dataDetailList == null || historyResultList == null); } }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await mainLayout.GetLoginUser();

            if (mainLayout.loginUser.CheckPagePermission("MNU_0302") == false && mainLayout.loginUser.Username != usr_username) navigationManager.NavigateTo("/NoPermissionPage");

            configData.ConfigDTOList = await configDataService.Get_TBConfig_DataList_Async(new TBConfigDTO() { tbc_mnu_code = "MNU_0302" });
            if (mainLayout.loginUser.rol_code == "ROL_00")
            {
                configData.ConfigDTOList.ForEach(x =>
                {
                    x.tbc_edit = true;
                });
            }

            var searchData = new HospitalLabDataDTO()
            {
                arh_code = searchModel.usp_arh_code = mainLayout.loginUser.arh_code,
                prv_code = searchModel.usp_prv_code = mainLayout.loginUser.prv_code,
                hos_code = searchModel.usp_hos_code = mainLayout.loginUser.hos_code,
                lab_code = searchModel.usp_lab_code = mainLayout.loginUser.lab_code
            };
            lab_ddl_List = await ddlDataService.GetAllLabListByModelAsync(searchData);
            rol_List = await ddlDataService.GetRoleListByModelAsync();

            pwdCfg = await passwordConfigService.GetDataAsync();

            if (string.IsNullOrEmpty(usr_username))
            {
                dataModel = new UserLoginDTO()
                {
                    usr_status = "N",
                    usr_active = true,
                    usr_createuser = mainLayout.loginUser.Username
                };

                ResetPassword();

                dataDetailList = new List<UserLoginPermissionDTO>();

                historyResultList = new List<LogProcessDTO>();
            }
            else
            {
                dataModel = await userLoginService.GetDataAsync(usr_username);
                dataModel.usr_status = "E";
                dataModel.usr_updateuser = mainLayout.loginUser.Username;

                dataDetailList = await userLoginService.GetPermissionListByModelAsync(new UserLoginPermissionDTO() { usp_usr_userName = usr_username });

                historyResultList = await userLoginService.GetHistoryAsync(usr_username);
            }

            StateHasChanged();
        }
    }

    private void DDL_Change(string ddl_name, object value)
    {
        showLoading = true;
        StateHasChanged();

        if (ddl_name == "Arh" && value == null)
        {
            dataDetailModel.usp_hos_code = null;
            dataDetailModel.usp_lab_code = null;
        }
        else if (ddl_name == "Hos" && value != null)
        {
            var hos_select = lab_ddl_List.FirstOrDefault(x => x.hos_code == value.ToString());

            dataDetailModel.usp_arh_code = hos_select.arh_code;
        }
        else if (ddl_name == "Hos" && value == null)
        {
            dataDetailModel.usp_lab_code = null;
        }
        else if (ddl_name == "Lab" && value != null)
        {
            dataDetailModel.usp_lab_code = value.ToString();
        }

        showLoading = false;
        StateHasChanged();
    }

    private void RedirectToInbox()
    {
        if (mainLayout.loginUser.CheckPagePermission("MNU_0302") == false && mainLayout.loginUser.Username == usr_username)
        {
            navigationManager.NavigateTo("/Home");
        }
        else
        {
            navigationManager.NavigateTo("/usermanagement/userlogin/");
        }
    }

    private void ShowPopupDialog(UserLoginPermissionDTO selectModel)
    {

        //if (CreateMode == true)
        //{
        //    await jsRuntime.InvokeAsync<object>("ShowAlert", "Please save before add lab.");
        //}
        //else
        //{
        if (selectModel == null)
        {
            dataDetailModel = new UserLoginPermissionDTO()
            {
                usp_status = "N",
                usp_active = true,
                usp_createuser = mainLayout.loginUser.Username
            };
        }
        else
        {
            dataDetailModel = selectModel;
            dataDetailModel.usp_status = "E";
            dataDetailModel.usp_updateuser = mainLayout.loginUser.Username;

            if (string.IsNullOrEmpty(dataDetailModel.usp_lab_code) == false)
            {
                DDL_Change("Lab", dataDetailModel.usp_lab_code);
            }
        }

        showPopupDialog = true;
        //}

        StateHasChanged();
    }

    private async Task ClosePopup()
    {
        // Close the Popup
        dataDetailModel = new UserLoginPermissionDTO();

        dataDetailList = await userLoginService.GetPermissionListByModelAsync(new UserLoginPermissionDTO() { usp_usr_userName = usr_username });

        showPopupDialog = false;
        StateHasChanged();
    }


    private void HandleInvalidSubmitPopup()
    {

    }

    private async void HandleValidSubmitPopup()
    {
        if (dataDetailModel.usp_status == "N")
        {
            dataDetailModel.usp_arh_name = lab_ddl_List.FirstOrDefault(x => x.arh_code == dataDetailModel.usp_arh_code)?.arh_name;
            dataDetailModel.usp_hos_name = lab_ddl_List.FirstOrDefault(x => x.hos_code == dataDetailModel.usp_hos_code)?.hos_name;
            dataDetailModel.usp_lab_name = lab_ddl_List.FirstOrDefault(x => x.hos_code == dataDetailModel.usp_hos_code && x.lab_code == dataDetailModel.usp_lab_code)?.lab_name;
            dataDetailModel.usp_rol_name = rol_List.FirstOrDefault(x => x.data_Value == dataDetailModel.usp_rol_code)?.data_Text;
            dataDetailList.Add(dataDetailModel);
        }
        else
        {
            var objHospitalLabData = dataDetailList.FirstOrDefault(x => x.usp_id == dataDetailModel.usp_id);
            objHospitalLabData.usp_arh_code = dataDetailModel.usp_arh_code;
            objHospitalLabData.usp_arh_name = lab_ddl_List.FirstOrDefault(x => x.arh_code == dataDetailModel.usp_arh_code)?.arh_name;
            objHospitalLabData.usp_hos_code = dataDetailModel.usp_hos_code;
            objHospitalLabData.usp_hos_name = lab_ddl_List.FirstOrDefault(x => x.hos_code == dataDetailModel.usp_hos_code)?.hos_name;
            objHospitalLabData.usp_lab_code = dataDetailModel.usp_lab_code;
            objHospitalLabData.usp_lab_name = lab_ddl_List.FirstOrDefault(x => x.hos_code == dataDetailModel.usp_hos_code && x.lab_code == dataDetailModel.usp_lab_code)?.lab_name;
            objHospitalLabData.usp_rol_code = dataDetailModel.usp_rol_code;
            objHospitalLabData.usp_rol_name = rol_List.FirstOrDefault(x => x.data_Value == dataDetailModel.usp_rol_code)?.data_Text;
            objHospitalLabData.usp_active = dataDetailModel.usp_active;
        }

        showPopupDialog = false;
        StateHasChanged();
    }

    private void CheckPassword()
    {
        errMessage = new List<string>();

        if (txtPassword != txtPasswordConfirm)
        {
            errMessage.Add("Password not match.");
        }
        else
        {
            if ((pwdCfg.pwc_min_char != 0) && (txtPassword.Length < pwdCfg.pwc_min_char))
            {
                errMessage.Add($"Password must >= {pwdCfg.pwc_min_char} chars.");
            }

            if ((pwdCfg.pwc_max_char != 0) && (txtPassword.Length > pwdCfg.pwc_max_char))
            {
                errMessage.Add($"Password must <= {pwdCfg.pwc_max_char} chars.");
            }

            if ((pwdCfg.pwc_lowwer_letter) && (!txtPassword.Any(c => char.IsLower(c))))
            {
                errMessage.Add($"Password must have lowwer case letter.");
            }

            if ((pwdCfg.pwc_upper_letter) && (!txtPassword.Any(c => char.IsUpper(c))))
            {
                errMessage.Add($"Password must have upper case letter.");
            }

            if ((pwdCfg.pwc_number) && (!txtPassword.Any(c => char.IsDigit(c))))
            {
                errMessage.Add($"Password must have number.");
            }

            if ((pwdCfg.pwc_special_char) && (!txtPassword.Any(c => !char.IsLetterOrDigit(c))))
            {
                errMessage.Add($"Password must have special character.");
            }
        }
    }

    private void ChangePassword()
    {
        changePassword = true;
        txtReadOnly = false;
    }

    private void ResetPassword()
    {
        resetPassword = true;
        txtPassword = pwdCfg.pwc_default_password;
        txtPasswordConfirm = pwdCfg.pwc_default_password;
    }

    private void HandleInvalidSubmit()
    {

    }

    private async void HandleValidSubmit()
    {
        if (changePassword)
        {
            if (string.IsNullOrEmpty(txtPassword) == true && string.IsNullOrEmpty(txtPasswordConfirm) == true)
            {
                var resultPassword = await jsRuntime.InvokeAsync<bool>("ShowConfirm", "Password empty do you want to continue save data?");
                if (!resultPassword)
                {
                    return;
                }
            }
            else
            {
                CheckPassword();
                if (errMessage.Count > 0)
                {
                    //var errMessageJoin = string.Join("\n", errMessage);
                    //await jsRuntime.InvokeAsync<object>("ShowAlert", errMessageJoin);

                    return;
                }
                else
                {
                    var encryptPassword = CryptoHelper.EncryptMD5(txtPassword);
                    dataModel.usr_password = encryptPassword;
                }
            }
        }
        else if (resetPassword)
        {
            var encryptPassword = CryptoHelper.EncryptMD5(txtPassword);
            dataModel.usr_password = encryptPassword;
        }

        var result = await jsRuntime.InvokeAsync<bool>("ShowConfirm", "Do you want to save data?");
        if (result)
        {
            showLoading = true;
            StateHasChanged();

            if (dataModel.usr_status == "N")
            {
                //Check duplicate
                var duplicate = await userLoginService.GetDataAsync(dataModel.usr_username);

                if (string.IsNullOrEmpty(duplicate.usr_username) == false)
                {
                    await jsRuntime.InvokeAsync<object>("ShowAlert", "Duplicate username.");

                    showLoading = false;

                    StateHasChanged();
                    return;
                }
            }

            //Save data
            var saveResult = await userLoginService.SaveDataAsync(dataModel);

            dataDetailList.ForEach(x =>
            {
                x.usp_usr_userName = dataModel.usr_username;
            });

            if (dataDetailList.Count > 0)
            {
                var saveResultList = await userLoginService.SavePermissionDataAsync(dataDetailList);
            }

            await jsRuntime.InvokeAsync<object>("ShowAlert", "Save data complete.");

            historyResultList = await userLoginService.GetHistoryAsync(dataModel.usr_username);

            dataModel.usr_status = "E";
            changePassword = false;
            txtReadOnly = true;
            txtPassword = "";
            txtPasswordConfirm = "";

            showLoading = false;

            StateHasChanged();
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private PasswordConfigService passwordConfigService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private UserLoginService userLoginService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private DropDownListDataService ddlDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ConfigDataService configDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private DialogService dialogService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime jsRuntime { get; set; }
    }
}
#pragma warning restore 1591
