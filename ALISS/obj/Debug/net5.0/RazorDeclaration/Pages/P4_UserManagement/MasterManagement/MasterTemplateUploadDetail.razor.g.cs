// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace ALISS.Pages.P4_UserManagement.MasterManagement
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using System.Text.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using System.Security.Claims;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.HttpOverrides;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Blazored;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Blazored.Menu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using BlazorDownloadFile;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.Account;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.DropDownList.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.LoginManagement.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Master.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Process.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.AUTH.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 32 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.MasterManagement.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 33 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.UserManagement.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 34 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.HISUpload.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 35 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.ANTIBIOGRAM.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 36 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.ANTIBIOTREND.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 37 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.GLASS.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 39 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D0_Master;

#line default
#line hidden
#nullable disable
#nullable restore
#line 41 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D3_Process;

#line default
#line hidden
#nullable disable
#nullable restore
#line 42 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D4_UserManagement.AUTH;

#line default
#line hidden
#nullable disable
#nullable restore
#line 43 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D4_UserManagement.MasterManagement;

#line default
#line hidden
#nullable disable
#nullable restore
#line 44 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D4_UserManagement.UserManagement;

#line default
#line hidden
#nullable disable
#nullable restore
#line 46 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D5_HISData;

#line default
#line hidden
#nullable disable
#nullable restore
#line 47 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D6_Report.Antibiogram;

#line default
#line hidden
#nullable disable
#nullable restore
#line 48 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D6_Report.Antibiotrend;

#line default
#line hidden
#nullable disable
#nullable restore
#line 49 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D6_Report.Glass;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\Pages\P4_UserManagement\MasterManagement\MasterTemplateUploadDetail.razor"
using System.IO;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/MasterManagement/MasterTemplate/DataUpload")]
    [Microsoft.AspNetCore.Components.RouteAttribute("/MasterManagement/MasterTemplate/DataUpload/{mst_code}")]
    public partial class MasterTemplateUploadDetail : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 451 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\Pages\P4_UserManagement\MasterManagement\MasterTemplateUploadDetail.razor"
       
    [CascadingParameter] MainLayout mainLayout { get; set; }
    [Parameter] public string mst_code { get; set; }

    private ConfigData configData = new ConfigData();
    private string classLabel = "col-4";
    private string classInput = "col-8";
    private bool showLoading;
    private bool showPopupDialogUpload = false;
    private bool ShowPopupDialogMacroUpload = false;
    private bool showModal = false;
    private string uploadType = string.Empty;

    private IBrowserFile selectedFiles;

    string LargeUploadMessage = "";
    long UploadedBytes;
    long TotalBytes;
    bool Uploading = false;
    string G20FileName = "";

    RadzenGridCustom<TCWHONET_AntibioticsDTO> whonetAntibiotcsGrid = new RadzenGridCustom<TCWHONET_AntibioticsDTO>();
    RadzenGridCustom<TCWHONET_AntibioticSpeciesDTO> antibioticSpeciesGrid = new RadzenGridCustom<TCWHONET_AntibioticSpeciesDTO>();
    RadzenGridCustom<TCWHONET_DepartmentsDTO> departmentsGrid = new RadzenGridCustom<TCWHONET_DepartmentsDTO>();
    RadzenGridCustom<TCWHONET_SpecimenDTO> specimenGrid = new RadzenGridCustom<TCWHONET_SpecimenDTO>();
    RadzenGridCustom<TCWHONETColumnDTO> whonetColumnGrid = new RadzenGridCustom<TCWHONETColumnDTO>();
    RadzenGridCustom<TCWHONET_OrganismDTO> organismGrid = new RadzenGridCustom<TCWHONET_OrganismDTO>();
    RadzenGridCustom<TCWHONET_MacroDTO> macroGrid = new RadzenGridCustom<TCWHONET_MacroDTO>();
    RadzenGridCustom<AntibioticDTO> antibiotcsGrid = new RadzenGridCustom<AntibioticDTO>();

    private MasterTemplateDTO masterTemplateData = new MasterTemplateDTO();
    private List<TCWHONET_AntibioticsDTO> whonetAntibioticsDatas;
    private List<TCWHONET_AntibioticSpeciesDTO> antibioticSpeciesDatas;
    private List<TCWHONET_DepartmentsDTO> departmentsDatas;
    private List<TCWHONET_SpecimenDTO> specimenDatas;
    private List<TCWHONETColumnDTO> whonetColumnDatas;
    private List<TCWHONET_OrganismDTO> organismDatas;
    private List<TCWHONET_MacroDTO> macroDatas;
    private List<AntibioticDTO> antibioticsDatas;

    private List<LogProcessDTO> historyResultList;

    private bool pageLoading { get { return (whonetAntibioticsDatas == null || specimenDatas == null || antibioticSpeciesDatas == null || departmentsDatas == null || specimenDatas == null || whonetColumnDatas == null || historyResultList == null); } }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await mainLayout.GetLoginUser();

            if (mainLayout.loginUser.CheckPagePermission("MNU_0202") == false) navigationManager.NavigateTo("/NoPermissionPage");

            configData.ConfigDTOList = await configDataService.Get_TBConfig_DataList_Async(new TBConfigDTO() { tbc_mnu_code = "MNU_0202" });
            if (mainLayout.loginUser.rol_code == "ROL_00")
            {
                configData.ConfigDTOList.ForEach(x =>
                {
                    x.tbc_edit = true;
                });
            }

            if (string.IsNullOrEmpty(mst_code))
            {
                masterTemplateData = new MasterTemplateDTO()
                {
                    mst_code = "New",
                    mst_status = "N",
                    mst_active = false,
                    mst_createuser = mainLayout.loginUser.Username
                };

                whonetAntibioticsDatas = new List<TCWHONET_AntibioticsDTO>();
                antibioticSpeciesDatas = new List<TCWHONET_AntibioticSpeciesDTO>();
                departmentsDatas = new List<TCWHONET_DepartmentsDTO>();
                specimenDatas = new List<TCWHONET_SpecimenDTO>();
                whonetColumnDatas = new List<TCWHONETColumnDTO>();
                organismDatas = new List<TCWHONET_OrganismDTO>();
                macroDatas = new List<TCWHONET_MacroDTO>();
                antibioticsDatas = new List<AntibioticDTO>();

                historyResultList = new List<LogProcessDTO>();
            }
            else
            {
                masterTemplateData = await masterTemplateService.GetDataAsync(mst_code);

                masterTemplateData.mst_status = "E";
                masterTemplateData.mst_updateuser = mainLayout.loginUser.Username;

                whonetAntibioticsDatas = await masterTemplateService.Get_TCWHONET_Antibiotics_List(new TCWHONET_AntibioticsDTO() { who_ant_mst_code = masterTemplateData.mst_code });
                antibioticSpeciesDatas = await masterTemplateService.Get_TCWHONET_AntibioticSpecies_List(new TCWHONET_AntibioticSpeciesDTO() { who_mst_code = masterTemplateData.mst_code });
                departmentsDatas = await masterTemplateService.Get_TCWHONET_Departments_List(new TCWHONET_DepartmentsDTO() { who_mst_code = masterTemplateData.mst_code });
                specimenDatas = await masterTemplateService.Get_TCWHONET_Specimen_List(new TCWHONET_SpecimenDTO() { who_spc_mst_code = masterTemplateData.mst_code });
                whonetColumnDatas = await masterTemplateService.Get_TCWHONET_Column_List(new TCWHONETColumnDTO() { wnc_mst_code = masterTemplateData.mst_code });
                organismDatas = await masterTemplateService.Get_TCWHONET_Organism_List(new TCWHONET_OrganismDTO() { who_org_mst_code = masterTemplateData.mst_code });
                macroDatas = await masterTemplateService.Get_TCWHONET_Macro_List(new TCWHONET_MacroDTO() { who_mac_mst_code = masterTemplateData.mst_code });
                antibioticsDatas = await antibioticService.GetListByModelAsync(new AntibioticDTO() { ant_mst_code = masterTemplateData.mst_code });

                historyResultList = await masterTemplateService.GetHistoryAsync(masterTemplateData.mst_code);
            }

            StateHasChanged();
        }
    }

    private void RedirectToInbox()
    {
        navigationManager.NavigateTo("MasterManagement/MasterTemplate/");
    }

    private void HandleInvalidSubmit()
    {

    }

    private async void HandleValidSubmit()
    {

    }

    private async Task ClosePopupDialogUpload()
    {
        showPopupDialogUpload = false;

        if (!string.IsNullOrEmpty(masterTemplateData.mst_code))
        {
            if (string.IsNullOrEmpty(uploadType) || uploadType == "main")
            {
                whonetAntibioticsDatas = await masterTemplateService.Get_TCWHONET_Antibiotics_List(new TCWHONET_AntibioticsDTO() { who_ant_mst_code = masterTemplateData.mst_code });
                antibioticSpeciesDatas = await masterTemplateService.Get_TCWHONET_AntibioticSpecies_List(new TCWHONET_AntibioticSpeciesDTO() { who_mst_code = masterTemplateData.mst_code });
                departmentsDatas = await masterTemplateService.Get_TCWHONET_Departments_List(new TCWHONET_DepartmentsDTO() { who_mst_code = masterTemplateData.mst_code });
                whonetColumnDatas = await masterTemplateService.Get_TCWHONET_Column_List(new TCWHONETColumnDTO() { wnc_mst_code = masterTemplateData.mst_code });
            }
            if (string.IsNullOrEmpty(uploadType) || uploadType == "antibiotic")
                antibioticsDatas = await antibioticService.GetListByModelAsync(new AntibioticDTO() { ant_mst_code = masterTemplateData.mst_code });
            if (string.IsNullOrEmpty(uploadType) || uploadType == "specimen")
                specimenDatas = await masterTemplateService.Get_TCWHONET_Specimen_List(new TCWHONET_SpecimenDTO() { who_spc_mst_code = masterTemplateData.mst_code });
            if (string.IsNullOrEmpty(uploadType) || uploadType == "organism")
                organismDatas = await masterTemplateService.Get_TCWHONET_Organism_List(new TCWHONET_OrganismDTO() { who_org_mst_code = masterTemplateData.mst_code });
            if (string.IsNullOrEmpty(uploadType) || uploadType == "macro")
                macroDatas = await masterTemplateService.Get_TCWHONET_Macro_List(new TCWHONET_MacroDTO() { who_mac_mst_code = masterTemplateData.mst_code });
        }
        uploadType = string.Empty;
        selectedFiles = null;
        LargeUploadMessage = string.Empty;

        historyResultList = await masterTemplateService.GetHistoryAsync(masterTemplateData.mst_code);

        showLoading = false;
        StateHasChanged();
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.File;

        var type = Path.GetExtension(selectedFiles.Name);

        long maxFileSize = 1024L; // 1KB
        maxFileSize *= 1024L; // 1MB
        maxFileSize *= 512L; // 0.5GB

        if (selectedFiles.Size > maxFileSize)
        {
            await jsRuntime.InvokeAsync<object>("ShowAlert", "ไม่สามารถ Upload ไฟล์ ขนาดมากกว่า 500MB ได้");
            selectedFiles = null;
            return;
        }
    }

    private async void UploadData()
    {
        string confirmMessage = "";
        string ErrMessage = "";
        bool bReplace = false;
        Uploading = true;

        if (uploadType == "main")
        {

            if ((whonetAntibioticsDatas.Count() > 0) || (antibioticSpeciesDatas.Count() > 0) || (whonetColumnDatas.Count() > 0) || (departmentsDatas.Count() > 0))
            {
                confirmMessage = "ไฟล์ที่อัพโหลดใหม่ จะแทนที่ข้อมูลไฟล์เดิม ต้องการยืนยันอัพโหลดไฟล์ใหม่ ใช่หรือไม่? " + "\n";
                bReplace = true;
            }
            else
            {
                confirmMessage = "Confirm upload data." + "\n" + " File Name: " + selectedFiles.Name + "\n";
            }
        }
        else if (uploadType == "antibiotic")
        {
            if (Path.GetExtension(selectedFiles.Name).ToLower() != ".txt")
            {
                ErrMessage = "ไฟล์อัพโหดลต้องนามสกุล .txt";
                return;
            }

            if (antibioticsDatas.Count() > 0)
            {
                confirmMessage = "ไฟล์ที่อัพโหลดใหม่ จะแทนที่ข้อมูลไฟล์เดิม ต้องการยืนยันอัพโหลดไฟล์ใหม่ ใช่หรือไม่? " + "\n";
                bReplace = true;
            }

            else
            {
                confirmMessage = "Confirm upload data." + "\n" + " File Name: " + selectedFiles.Name + "\n";
            }
        }
        else if (uploadType == "specimen")
        {
            if (Path.GetExtension(selectedFiles.Name).ToLower() != ".txt")
            {
                ErrMessage = "ไฟล์อัพโหดลต้องนามสกุล .txt";
                return;
            }

            if (specimenDatas.Count() > 0)
            {
                confirmMessage = "ไฟล์ที่อัพโหลดใหม่ จะแทนที่ข้อมูลไฟล์เดิม ต้องการยืนยันอัพโหลดไฟล์ใหม่ ใช่หรือไม่? " + "\n";
                bReplace = true;
            }

            else
            {
                confirmMessage = "Confirm upload data." + "\n" + " File Name: " + selectedFiles.Name + "\n";
            }
        }
        else if (uploadType == "organism")
        {
            if (Path.GetExtension(selectedFiles.Name).ToLower() != ".txt")
            {
                ErrMessage = "ไฟล์อัพโหดลต้องนามสกุล .txt";
            }

            if (organismDatas.Count() > 0)
            {
                confirmMessage = "ไฟล์ที่อัพโหลดใหม่ จะแทนที่ข้อมูลไฟล์เดิม ต้องการยืนยันอัพโหลดไฟล์ใหม่ ใช่หรือไม่? " + "\n";
                bReplace = true;
            }

            else
            {
                confirmMessage = "Confirm upload data." + "\n" + " File Name: " + selectedFiles.Name + "\n";
            }
        }
        else if (uploadType == "macro")
        {
            if (Path.GetExtension(selectedFiles.Name).ToLower() != ".zip")
            {
                ErrMessage = "ไฟล์อัพโหดลต้องนามสกุล .zip";
            }

            if (macroDatas.Count() > 0)
            {
                confirmMessage = "ไฟล์ที่อัพโหลดใหม่ จะแทนที่ข้อมูลไฟล์เดิม ต้องการยืนยันอัพโหลดไฟล์ใหม่ ใช่หรือไม่? " + "\n";
                bReplace = true;
            }
            else
            {
                confirmMessage = "Confirm upload data." + "\n" + " File Name: " + selectedFiles.Name + "\n";
            }
        }
        else if (uploadType == "glass")
        {
            G20FileName = selectedFiles.Name;
            confirmMessage = "Confirm upload data." + "\n" + " File Name: " + selectedFiles.Name + "\n";
        }

        if (ErrMessage != "")
        {
            await jsRuntime.InvokeAsync<object>("ShowAlert", ErrMessage);
            return;
        }

        var result = await jsRuntime.InvokeAsync<bool>("ShowConfirm", confirmMessage);
        if (result == false)
        {
            return;
        }

        showModal = true;

        LargeUploadMessage = "กำลังอัปโหลดไฟล์ ...";
        string strMasterTemplatePath = "MasterTemplate";

        string filepath = await masterTemplateService.GetPath();

        filepath = Path.Combine(filepath, strMasterTemplatePath, masterTemplateData.mst_code);

        switch (uploadType)
        {
            case "main":
                filepath = Path.Combine(filepath, "WhonetMain");
                break;
            case "antibiotic":
                filepath = Path.Combine(filepath, "Antibiotic");
                break;
            case "specimen":
                filepath = Path.Combine(filepath, "Specimen");
                break;
            case "organism":
                filepath = Path.Combine(filepath, "Organism");
                break;
            case "macro":
                filepath = Path.Combine(filepath, "Macro");
                break;
            case "glass":
                filepath = Path.Combine(filepath, "Glass");
                break;
        }

        bool exists = System.IO.Directory.Exists(filepath);
        if (!exists)
            System.IO.Directory.CreateDirectory(filepath);


        var filename = Path.Combine(filepath, selectedFiles.Name);

        UploadedBytes = 0;

        TotalBytes = selectedFiles.Size;

        long percent = 0;
        long chunckSize = 400000;
        long numChunks = TotalBytes / chunckSize;
        long remainder = TotalBytes % chunckSize;

        if (File.Exists(filename)) File.Delete(filename);


        using (var inStream = selectedFiles.OpenReadStream(long.MaxValue))
        {
            using (var outStream = File.OpenWrite(filename))
            {
                for (int i = 0; i < numChunks; i++)
                {
                    var buffer = new byte[chunckSize];
                    await inStream.ReadAsync(buffer, 0, buffer.Length);

                    await outStream.WriteAsync(buffer, 0, buffer.Length);

                    UploadedBytes += chunckSize;

                    percent = UploadedBytes * 100 / TotalBytes;

                    LargeUploadMessage = $"กำลังอัปโหลดไฟล์ {percent}%";

                    await InvokeAsync(StateHasChanged);
                }

                if (remainder > 0)
                {
                    var buffer = new byte[remainder];
                    await inStream.ReadAsync(buffer, 0, buffer.Length);

                    await outStream.WriteAsync(buffer, 0, buffer.Length);

                    UploadedBytes += remainder;

                    percent = UploadedBytes * 100 / TotalBytes;

                    LargeUploadMessage = $"กำลังอัปโหลดไฟล์ {percent}%";

                    await InvokeAsync(StateHasChanged);
                }
            }
        }

        LargeUploadMessage = "กำลังตรวจสอบไฟล์ ...";
        await InvokeAsync(StateHasChanged);

        var chkValidate = new List<TCProcessExcelErrorDTO>();
        switch (uploadType)
        {
            case "main": chkValidate = await masterTemplateService.ValidateAndImportFile(filename, masterTemplateData, masterTemplateData.mst_code, mainLayout.loginUser.Username, bReplace); break;
            case "antibiotic": chkValidate = await masterTemplateService.ValidateAndImportAntibioticFile(filename, masterTemplateData, masterTemplateData.mst_code, mainLayout.loginUser.Username, bReplace); break;
            case "specimen": chkValidate = await masterTemplateService.ValidateAndImportSpecimenFile(filename, masterTemplateData, masterTemplateData.mst_code, mainLayout.loginUser.Username, bReplace); break;
            case "organism": chkValidate = await masterTemplateService.ValidateAndImportOrganismFile(filename, masterTemplateData, masterTemplateData.mst_code, mainLayout.loginUser.Username, bReplace); break;
            case "macro": chkValidate = await masterTemplateService.ValidateAndImportMacroFile(filename, masterTemplateData, masterTemplateData.mst_code, mainLayout.loginUser.Username, bReplace); break;
        }

        await InvokeAsync(StateHasChanged);

        //showPopupDialogUpload = false; //Close Dialog

        //int totalRec = 0;
        if (chkValidate != null)
        {
            string ErrorMessage = "";
            foreach (TCProcessExcelErrorDTO item in chkValidate)
            {
                if (item.tcp_status == 'E')
                    ErrorMessage += "- " + item.tcp_Err_Message + "\n";
            }
            if (!string.IsNullOrEmpty(ErrorMessage))
            {
                await jsRuntime.InvokeAsync<object>("ShowAlert", ErrorMessage);
                LargeUploadMessage = "พบข้อผิดพลาด";
            }
            else
            {
                LargeUploadMessage = "อัปโหลดเรียบร้อยแล้ว";
                await ClosePopupDialogUpload();
                await jsRuntime.InvokeAsync<object>("ShowAlert", "Upload completed.");
            }
        }
        else
        {
            LargeUploadMessage = "อัปโหลดเรียบร้อยแล้ว";
            await ClosePopupDialogUpload();
            await jsRuntime.InvokeAsync<object>("ShowAlert", "Upload completed.");
        }

        UploadedBytes = 0;
        TotalBytes = 0;
        LargeUploadMessage = "";
        Uploading = false;
    }

    private async void SaveMasterTemplateHeader()
    {
        var result = await jsRuntime.InvokeAsync<bool>("ShowConfirm", "Confirm save data.");
        if (result)
        {
            showLoading = true;
            StateHasChanged();

            if (masterTemplateData.mst_status == "N")
            {
                if (string.IsNullOrEmpty(masterTemplateData.mst_version))
                {
                    await jsRuntime.InvokeAsync<object>("ShowAlert", "กรุณากรอกข้อมูล Whonet Ver.");

                    showLoading = false;
                    StateHasChanged();

                    return;
                }

                if (masterTemplateData.mst_date_from is null)
                {
                    await jsRuntime.InvokeAsync<object>("ShowAlert", "กรุณากรอกข้อมูล วันที่มีผล");

                    showLoading = false;
                    StateHasChanged();

                    return;
                }

            }

            //Check Active
            //var checkActive = await masterTemplateService.GetListAsync();
            //foreach (var x in checkActive)
            //{
            //    if((x.mst_active = true) && (x.mst_code != masterTemplateData.mst_code))
            //    {
            //        var msg = "Master Template [" + x.mst_code + "] ที่ active อยู่เดิมจะถูก Inactive. คุณต้องการใช่หรือไม่" ;
            //        var results = await jsRuntime.InvokeAsync<bool>("ShowConfirm", msg);

            //        if (result)
            //        {

            //        }
            //        showLoading = false;
            //        StateHasChanged();

            //        return;
            //    }
            //}


            var saveResult = await masterTemplateService.SaveDataAsync(masterTemplateData);

            if (masterTemplateData.mst_status == "N" && string.IsNullOrEmpty(mst_code))
            {
                mst_code = saveResult.mst_code;
            }

            if (!string.IsNullOrEmpty(mst_code))
            {

                masterTemplateData = await masterTemplateService.GetDataAsync(mst_code);
                masterTemplateData.mst_status = "E";

                historyResultList = await masterTemplateService.GetHistoryAsync(masterTemplateData.mst_code);

                await jsRuntime.InvokeAsync<object>("ShowAlert", "Save data complete.");

                showLoading = false;
                StateHasChanged();
            }
            else
            {
                await jsRuntime.InvokeAsync<object>("ShowAlert", "Action unsuccessful.");
                showLoading = false;
            }
        }
    }

    private void ShowPopupDialogUpload(string pUploadType)
    {
        uploadType = pUploadType;
        showPopupDialogUpload = true;
    }

    private void SearchInboxDataAntibiotcs()
    {
        if (antibiotcsGrid.radzenGrid != null) antibiotcsGrid.radzenGrid.GoToPage(0);
        StateHasChanged();
    }

    private void SearchInboxDataAntibioticSpecies()
    {
        if (antibioticSpeciesGrid.radzenGrid != null) antibioticSpeciesGrid.radzenGrid.GoToPage(0);
        StateHasChanged();
    }

    private void SearchInboxDataDepartments()
    {
        if (departmentsGrid.radzenGrid != null) departmentsGrid.radzenGrid.GoToPage(0);
        StateHasChanged();
    }

    private void SearchInboxDataSpecimen()
    {
        if (specimenGrid.radzenGrid != null) specimenGrid.radzenGrid.GoToPage(0);
        StateHasChanged();
    }

    private void SearchInboxDataWHONETColumn()
    {
        if (whonetColumnGrid.radzenGrid != null) whonetColumnGrid.radzenGrid.GoToPage(0);
        StateHasChanged();
    }

    private void SearchInboxDataOrganism()
    {
        if (organismGrid.radzenGrid != null) organismGrid.radzenGrid.GoToPage(0);
        StateHasChanged();
    }

    private void SearchInboxDataMacro()
    {
        if (macroGrid.radzenGrid != null) macroGrid.radzenGrid.GoToPage(0);
        StateHasChanged();
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AntibioticService antibioticService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private MasterTemplateService masterTemplateService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ConfigDataService configDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private DialogService dialogService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime jsRuntime { get; set; }
    }
}
#pragma warning restore 1591
