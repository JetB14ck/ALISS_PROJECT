// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace ALISS.Pages.P4_UserManagement.MasterManagement
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using System.Text.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using System.Security.Claims;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.HttpOverrides;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Blazored;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Blazored.Menu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using BlazorDownloadFile;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.Account;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.DropDownList.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.LoginManagement.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Master.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Process.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.AUTH.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 32 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.MasterManagement.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 33 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.UserManagement.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 34 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.HISUpload.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 35 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.ANTIBIOGRAM.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 36 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.ANTIBIOTREND.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 37 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.GLASS.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 39 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D0_Master;

#line default
#line hidden
#nullable disable
#nullable restore
#line 41 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D3_Process;

#line default
#line hidden
#nullable disable
#nullable restore
#line 42 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D4_UserManagement.AUTH;

#line default
#line hidden
#nullable disable
#nullable restore
#line 43 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D4_UserManagement.MasterManagement;

#line default
#line hidden
#nullable disable
#nullable restore
#line 44 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D4_UserManagement.UserManagement;

#line default
#line hidden
#nullable disable
#nullable restore
#line 46 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D5_HISData;

#line default
#line hidden
#nullable disable
#nullable restore
#line 47 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D6_Report.Antibiogram;

#line default
#line hidden
#nullable disable
#nullable restore
#line 48 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D6_Report.Antibiotrend;

#line default
#line hidden
#nullable disable
#nullable restore
#line 49 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D6_Report.Glass;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\Pages\P4_UserManagement\MasterManagement\MasterTemplateUpload.razor"
using System.IO;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/MasterManagement/MasterTemplate/UploadDetail")]
    [Microsoft.AspNetCore.Components.RouteAttribute("/MasterManagement/MasterTemplate/UploadDetail/{mst_code}")]
    public partial class MasterTemplateUpload : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 224 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\Pages\P4_UserManagement\MasterManagement\MasterTemplateUpload.razor"
       
    [CascadingParameter] MainLayout mainLayout { get; set; }
    [Parameter] public string mst_code { get; set; }

    private ConfigData configData = new ConfigData();
    private string classLabel = "col-4";
    private string classInput = "col-8";
    private bool showLoading;
    private string _CurrentTab = "TEMPLATECOLUMNS";
    private bool showModal = false;

    private IBrowserFile selectedFiles;

    string LargeUploadMessage = "";
    long UploadedBytes;
    long TotalBytes;
    bool Uploading = false;

    private MasterTemplateDTO masterTemplateData = new MasterTemplateDTO();
    private List<TCProcessExcelColumnDTO> processExcelColumnDatas;
    private List<TCProcessExcelRowDTO> processExcelRowDatas;
    private List<TCProcessExcelTemplateDTO> processExcelTemplateDatas;

    RadzenGridCustom<TCProcessExcelColumnDTO> excelColumnGrid = new RadzenGridCustom<TCProcessExcelColumnDTO>();
    RadzenGridCustom<TCProcessExcelRowDTO> excelRowGrid = new RadzenGridCustom<TCProcessExcelRowDTO>();
    RadzenGridCustom<TCProcessExcelTemplateDTO> excelTemplateGrid = new RadzenGridCustom<TCProcessExcelTemplateDTO>();

    private bool showPopupDialogUpload = false;

    private bool pageLoading { get { return (processExcelColumnDatas == null || processExcelRowDatas == null || processExcelTemplateDatas == null); } }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await mainLayout.GetLoginUser();

            if (mainLayout.loginUser.CheckPagePermission("MNU_0202") == false) navigationManager.NavigateTo("/NoPermissionPage");

            configData.ConfigDTOList = await configDataService.Get_TBConfig_DataList_Async(new TBConfigDTO() { tbc_mnu_code = "MNU_0202" });
            if (mainLayout.loginUser.rol_code == "ROL_00")
            {
                configData.ConfigDTOList.ForEach(x =>
                {
                    x.tbc_edit = true;
                });
            }

            if (!string.IsNullOrEmpty(mst_code))
            {
                masterTemplateData = await masterTemplateService.GetDataAsync(mst_code);

                masterTemplateData.mst_status = "E";
                masterTemplateData.mst_updateuser = mainLayout.loginUser.Username;

                processExcelColumnDatas = await processExcelService.Get_TCProcessExcelColumn_DataList_Async(new TCProcessExcelColumnDTO() { pec_mst_code = mst_code });
                processExcelRowDatas = await processExcelService.Get_TCProcessExcelRow_DataList_Async(new TCProcessExcelRowDTO() { per_mst_code = mst_code });
                processExcelTemplateDatas = await processExcelService.Get_TCProcessExcelTemplate_DataList_Async(new TCProcessExcelTemplateDTO() { pet_mst_code = mst_code });
            }

            StateHasChanged();
        }
    }

    private void HandleInvalidSubmit()
    {

    }

    private async void HandleValidSubmit()
    {

    }

    private async void DownloadData()
    {

        var x = processExcelColumnDatas.FirstOrDefault();
        var str_CurrentDate = x.pec_createdate?.ToString("yyyyMMdd");
        string filepath = await processExcelService.GetPath();

        filepath = Path.Combine(filepath, str_CurrentDate, mst_code);
        var filename = "template antibiogram 2025.xlsm";
        var fullpath = Path.Combine(filepath, filename);

        if (File.Exists(fullpath))
        {
            byte[] bytes = File.ReadAllBytes(fullpath);
            await downloadService.DownloadFile(filename, bytes, "application/vnd.ms-excel.sheet.macroEnabled.12");
        }
        else
        {
            await jsRuntime.InvokeAsync<object>("ShowAlert", "File not Found");
        }
    }

    private async void UploadData()
    {
        string confirmMessage = "";
        bool bReplace = false;
        Uploading = true;

        if ((processExcelColumnDatas.Count() > 0) && (processExcelRowDatas.Count() > 0) && (processExcelTemplateDatas.Count() > 0))
        {
            confirmMessage = "ไฟล์ที่อัพโหลดใหม่ จะแทนที่ข้อมูลไฟล์เดิม ต้องการยืนยันอัพโหลดไฟล์ใหม่ ใช่หรือไม่? " + "\n";
            bReplace = true;
        }
        else
        {
            confirmMessage = "Confirm upload data." + "\n" + " File Name: " + selectedFiles.Name + "\n";
        }

        var result = await jsRuntime.InvokeAsync<bool>("ShowConfirm", confirmMessage);
        if (result == false)
        {
            return;
        }

        showModal = true;

        LargeUploadMessage = "กำลังอัปโหลดไฟล์";
        //string str_CurrentDate = DateTime.Now.ToString("yyyyMMdd");

        string filepath = await masterTemplateService.GetPath();
        //filepath = Path.Combine(filepath, str_CurrentDate, mst_code);
        filepath = Path.Combine(filepath, "MasterTemplate", masterTemplateData.mst_code, "ExcelTemplate");


        bool exists = System.IO.Directory.Exists(filepath);

        if (!exists)
            System.IO.Directory.CreateDirectory(filepath);

        var filename = Path.Combine(filepath, selectedFiles.Name);

        UploadedBytes = 0;

        TotalBytes = selectedFiles.Size;

        long percent = 0;
        long chunckSize = 400000;
        long numChunks = TotalBytes / chunckSize;
        long remainder = TotalBytes % chunckSize;

        if (File.Exists(filename)) File.Delete(filename);

        using (var inStream = selectedFiles.OpenReadStream(long.MaxValue))
        {
            using (var outStream = File.OpenWrite(filename))
            {
                for (int i = 0; i < numChunks; i++)
                {
                    var buffer = new byte[chunckSize];
                    await inStream.ReadAsync(buffer, 0, buffer.Length);

                    await outStream.WriteAsync(buffer, 0, buffer.Length);

                    UploadedBytes += chunckSize;

                    percent = UploadedBytes * 100 / TotalBytes;

                    LargeUploadMessage = $"กำลังอัปโหลดไฟล์ {percent}%";

                    await InvokeAsync(StateHasChanged);
                }

                if (remainder > 0)
                {
                    var buffer = new byte[remainder];
                    await inStream.ReadAsync(buffer, 0, buffer.Length);

                    await outStream.WriteAsync(buffer, 0, buffer.Length);

                    UploadedBytes += remainder;

                    percent = UploadedBytes * 100 / TotalBytes;

                    LargeUploadMessage = $"กำลังอัปโหลดไฟล์ {percent}%";

                    await InvokeAsync(StateHasChanged);
                }
            }
        }

        LargeUploadMessage = "กำลังตรวจสอบไฟล์ ...";
        await InvokeAsync(StateHasChanged);

        var chkValidate = await processExcelService.ValidateProcessExcelFileAsync(filename, masterTemplateData, mst_code, mainLayout.loginUser.Username, bReplace);


        await InvokeAsync(StateHasChanged);

        if (chkValidate != null)
        {
            string ErrorMessage = "";
            foreach (TCProcessExcelErrorDTO item in chkValidate)
            {
                if (item.tcp_status == 'E')
                    ErrorMessage += "- " + item.tcp_Err_Message + "\n";
            }
            if (!string.IsNullOrEmpty(ErrorMessage))
            {
                await jsRuntime.InvokeAsync<object>("ShowAlert", ErrorMessage);
                LargeUploadMessage = "พบข้อผิดพลาด";
            }

            else
            {
                LargeUploadMessage = "อัปโหลดเรียบร้อยแล้ว";
                await ClosePopupDialogUpload();
                await jsRuntime.InvokeAsync<object>("ShowAlert", "Upload completed.");
            }

        }
        else
        {
            LargeUploadMessage = "อัปโหลดเรียบร้อยแล้ว";
            await ClosePopupDialogUpload();
            await jsRuntime.InvokeAsync<object>("ShowAlert", "Upload completed.");
        }

        var chkError = chkValidate.FirstOrDefault(x => x.tcp_status == 'E');
    

        UploadedBytes = 0;
        TotalBytes = 0;
        LargeUploadMessage = "";
        Uploading = false;
    }

    private async Task ClosePopupDialogUpload()
    {
        showPopupDialogUpload = false;

        processExcelColumnDatas = await processExcelService.Get_TCProcessExcelColumn_DataList_Async(new TCProcessExcelColumnDTO() { pec_mst_code = mst_code });
        processExcelRowDatas = await processExcelService.Get_TCProcessExcelRow_DataList_Async(new TCProcessExcelRowDTO() { per_mst_code = mst_code });
        processExcelTemplateDatas = await processExcelService.Get_TCProcessExcelTemplate_DataList_Async(new TCProcessExcelTemplateDTO() { pet_mst_code = mst_code });

        showLoading = false;
        StateHasChanged();
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.File;

        var type = Path.GetExtension(selectedFiles.Name);

        long maxFileSize = 1024L; // 1KB
        maxFileSize *= 1024L; // 1MB
        maxFileSize *= 512L; // 0.5GB

        if (selectedFiles.Size > maxFileSize)
        {
            await jsRuntime.InvokeAsync<object>("ShowAlert", "ไม่สามารถ Upload ไฟล์ ขนาดมากกว่า 500MB ได้");
            selectedFiles = null;
            return;
        }
    }

    private void ShowPopupDialogUpload()
    {
        showPopupDialogUpload = true;
    }

    private void RedirectToInbox()
    {
        navigationManager.NavigateTo("MasterManagement/MasterTemplate/");
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IBlazorDownloadFileService downloadService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ProcessExcelService processExcelService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private WHONETColumnService whonetColumnService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ExpertRuleService expertRuleService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private QCRangeService qcrangeService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private OrganismService organismService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AntibioticService antibioticService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private SpecimenService specimenService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private WardTypeService wardTypeService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private MasterTemplateService masterTemplateService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ConfigDataService configDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private DialogService dialogService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime jsRuntime { get; set; }
    }
}
#pragma warning restore 1591
