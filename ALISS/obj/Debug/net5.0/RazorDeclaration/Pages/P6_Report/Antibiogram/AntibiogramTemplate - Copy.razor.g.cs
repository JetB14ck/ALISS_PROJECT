// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace ALISS.Pages.P6_Report.Antibiogram
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Project\ALISS_PROJECT\ALISS\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Project\ALISS_PROJECT\ALISS\_Imports.razor"
using System.Text.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Project\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Project\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Project\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Project\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Project\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Project\ALISS_PROJECT\ALISS\_Imports.razor"
using System.Security.Claims;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Project\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.HttpOverrides;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\Project\ALISS_PROJECT\ALISS\_Imports.razor"
using Blazored;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\Project\ALISS_PROJECT\ALISS\_Imports.razor"
using Blazored.Menu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "D:\Project\ALISS_PROJECT\ALISS\_Imports.razor"
using BlazorDownloadFile;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "D:\Project\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "D:\Project\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "D:\Project\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.Account;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "D:\Project\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "D:\Project\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "D:\Project\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.LoginManagement.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "D:\Project\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Master.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "D:\Project\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Process.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "D:\Project\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.AUTH.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 32 "D:\Project\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.MasterManagement.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 33 "D:\Project\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.UserManagement.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 34 "D:\Project\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.HISUpload.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 36 "D:\Project\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.ANTIBIOTREND.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 37 "D:\Project\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.GLASS.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 41 "D:\Project\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D3_Process;

#line default
#line hidden
#nullable disable
#nullable restore
#line 42 "D:\Project\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D4_UserManagement.AUTH;

#line default
#line hidden
#nullable disable
#nullable restore
#line 43 "D:\Project\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D4_UserManagement.MasterManagement;

#line default
#line hidden
#nullable disable
#nullable restore
#line 44 "D:\Project\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D4_UserManagement.UserManagement;

#line default
#line hidden
#nullable disable
#nullable restore
#line 46 "D:\Project\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D5_HISData;

#line default
#line hidden
#nullable disable
#nullable restore
#line 48 "D:\Project\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D6_Report.Antibiotrend;

#line default
#line hidden
#nullable disable
#nullable restore
#line 49 "D:\Project\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D6_Report.Glass;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Project\ALISS_PROJECT\ALISS\Pages\P6_Report\Antibiogram\AntibiogramTemplate - Copy.razor"
using ALISS.Data.D6_Report.Antibiogram;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Project\ALISS_PROJECT\ALISS\Pages\P6_Report\Antibiogram\AntibiogramTemplate - Copy.razor"
using ALISS.Data.D0_Master;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Project\ALISS_PROJECT\ALISS\Pages\P6_Report\Antibiogram\AntibiogramTemplate - Copy.razor"
using ALISS.DropDownList.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Project\ALISS_PROJECT\ALISS\Pages\P6_Report\Antibiogram\AntibiogramTemplate - Copy.razor"
using ALISS.ANTIBIOGRAM.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Project\ALISS_PROJECT\ALISS\Pages\P6_Report\Antibiogram\AntibiogramTemplate - Copy.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Project\ALISS_PROJECT\ALISS\Pages\P6_Report\Antibiogram\AntibiogramTemplate - Copy.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Project\ALISS_PROJECT\ALISS\Pages\P6_Report\Antibiogram\AntibiogramTemplate - Copy.razor"
using System.IO;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/Antibiogram/antibiogram_template")]
    public partial class AntibiogramTemplate___Copy : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 394 "D:\Project\ALISS_PROJECT\ALISS\Pages\P6_Report\Antibiogram\AntibiogramTemplate - Copy.razor"
       

    #region "Variable"
    [CascadingParameter] MainLayout mainLayout { get; set; }
    private const string MENU_CODE = "MNU_0704";
    private ConfigData configData = new ConfigData();
    private string classLabel = "col-4";
    private string classInput = "col-8";
    private string classMonth = "col-4";
    private List<HospitalLabDataDTO> lab_ddl_List;
    private RadzenGridCustom<AntibiogramNationTemplateDTO> inboxGridNation = new RadzenGridCustom<AntibiogramNationTemplateDTO>();
    private RadzenGridCustom<AntibiogramAreaHealthTemplateDTO> inboxGridAreaHealth = new RadzenGridCustom<AntibiogramAreaHealthTemplateDTO>();
    private RadzenGridCustom<AntibiogramHospitalTemplateDTO> inboxGridHospital = new RadzenGridCustom<AntibiogramHospitalTemplateDTO>();
    private RadzenGridCustom<AntibiogramProvinceTemplateDTO> inboxGridProvince = new RadzenGridCustom<AntibiogramProvinceTemplateDTO>();

    [Inject]
    private IFileSave OIFileSave { get; set; }
    private List<AntibiogramAreaHealthTemplateDTO> gridArhDatas;
    private List<AntibiogramNationTemplateDTO> gridNationDatas;
    private List<AntibiogramHospitalTemplateDTO> gridHospitalDatas;
    private List<AntibiogramProvinceTemplateDTO> gridProvinceDatas;
    AntiHospitalSearchDTO searchAnti = new AntiHospitalSearchDTO();
    private int iMonthFrom = 1;
    private int iMonthTo = DateTime.Today.Month;
    private int iYearFrom = DateTime.Today.Year;
    private int iYearTo = DateTime.Today.Year;
    private DateTime dtStartDate;
    private DateTime dtEndDate;
    NotificationMessage notiMsg = new NotificationMessage();
    AntibiogramHospitalTemplateDTO selectedHospRow = new AntibiogramHospitalTemplateDTO();
    AntibiogramAreaHealthTemplateDTO selectedArhRow = new AntibiogramAreaHealthTemplateDTO();
    AntibiogramNationTemplateDTO selectedNationRow = new AntibiogramNationTemplateDTO();
    AntibiogramProvinceTemplateDTO selectedProvinceRow = new AntibiogramProvinceTemplateDTO();
    private List<SpecimenDTO> SpecimenMaster = new List<SpecimenDTO>();
    private eAntibiogramType selectedReport = eAntibiogramType.Nation;
    private bool blnLoadComplete = true;

    private List<HospitalDataDTO> arh_List;
    private List<HospitalDataDTO> prv_List;
    private List<HospitalDataDTO> arh_DDL_List;
    private List<HospitalDataDTO> prv_DDL_List;
    private List<HospitalDataDTO> arh_DL_DDL_List;
    private List<HospitalDataDTO> prv_DL_DDL_List;

    private enum eAntibiogramType
    {
        Hospital = 1,
        AreaHealth = 2,
        Nation = 3,
        Province = 4
    }

    private enum eDownloadType
    {
        Excel = 1,
        PDF = 2
    }

    private class MonthItem
    {
        public int MonthValue { get; set; }
        public string MonthName { get; set; }
    }

    MonthItem[] MonthData = new MonthItem[] {
        new MonthItem
        {
            MonthValue = 1,
            MonthName = "January"
        },
        new MonthItem
        {
           MonthValue = 2,
           MonthName = "Febuary"
        },
        new MonthItem
        {
          MonthValue = 3,
          MonthName = "March"
        },
        new MonthItem
        {
           MonthValue = 4,
           MonthName = "April"
        },
        new MonthItem
        {
           MonthValue = 5,
           MonthName = "May"
        },
        new MonthItem
        {
            MonthValue = 6,
            MonthName = "June"
        },
        new MonthItem
        {
           MonthValue = 7,
            MonthName = "July"
        },
        new MonthItem
        {
           MonthValue = 8,
            MonthName = "August"
        },
        new MonthItem
        {
            MonthValue = 9,
            MonthName = "September"
        },
        new MonthItem
        {
           MonthValue = 10,
            MonthName = "October"
        },
        new MonthItem
        {
            MonthValue = 11,
            MonthName = "November"
        },
        new MonthItem
        {
           MonthValue = 12,
           MonthName = "December"
        }
    };

    #endregion

    #region "Event"

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await mainLayout.GetLoginUser();

            if (mainLayout.loginUser.CheckPagePermission(MENU_CODE) == false) navigationManager.NavigateTo("/NoPermissionPage");

            configData.ConfigDTOList = await configDataService.Get_TBConfig_DataList_Async(new TBConfigDTO() { tbc_mnu_code = MENU_CODE });
            var searchData = new HospitalLabDataDTO()
            {
                arh_code = searchAnti.arh_code = mainLayout.loginUser.arh_code,
                prv_code = searchAnti.prv_code = mainLayout.loginUser.prv_code,
                hos_code = searchAnti.hos_code = mainLayout.loginUser.hos_code,
            };
            lab_ddl_List = await ddlDataService.GetAllLabListByModelAsync(searchData);
            var objspecimen = await specimenService.GetListByModelActiveAsync(new SpecimenDTO());
            objspecimen.Add(new SpecimenDTO { spc_code = "A", spc_name = "All Specimen" });
            SpecimenMaster = objspecimen.OrderBy(w => w.spc_code).ToList();
            await LoadData();
            //gridArhDatas = await AntibiogramService.GetAntibiogramAreaHealthTemplateListModelAsync(searchAnti);
        }

    }

    #endregion

    #region "Method"

    private async Task SearchData()
    {
        dtStartDate = new DateTime(iYearFrom, iMonthFrom, 1);

        int numberOfDays = DateTime.DaysInMonth(iYearTo, iMonthTo);
        dtEndDate = new DateTime(iYearTo, iMonthTo, numberOfDays);

        searchAnti.start_date = dtStartDate;
        searchAnti.end_date = dtEndDate;

        await LoadData();
        StateHasChanged();
    }

    private async Task ChangeAntibiogramType()
    {
        await ClearData();
        await LoadData();
        StateHasChanged();
    }

    private async Task LoadData()
    {
        if (selectedReport == eAntibiogramType.AreaHealth)
        {
            gridArhDatas = await AntibiogramService.GetAntibiogramAreaHealthTemplateListModelAsync(searchAnti);
        }
        else if (selectedReport == eAntibiogramType.Nation)
        {
            gridNationDatas = await AntibiogramService.GetAntibiogramNationTemplateListModelAsync(searchAnti);
        }
        else if (selectedReport == eAntibiogramType.Province)
        {
            gridProvinceDatas = await AntibiogramService.GetAntibiogramProvinceTemplateListModelAsync(searchAnti);
        }
        else
        {
            gridHospitalDatas = await AntibiogramService.GetAntibiogramHospitalTemplateListModelAsync(searchAnti);
        }
    }

    private async Task ClearData()
    {

        searchAnti.arh_code = mainLayout.loginUser.arh_code;
        searchAnti.prv_code = mainLayout.loginUser.prv_code;
        searchAnti.hos_code = mainLayout.loginUser.hos_code;
        searchAnti.spc_code = null;

    }

    private async Task DownloadProvinceFile(AntibiogramProvinceTemplateDTO Selecteditem, eDownloadType eReportType)
    {
        if (!string.IsNullOrEmpty(Selecteditem.file_name) && !string.IsNullOrEmpty(Selecteditem.file_path))
        {
            blnLoadComplete = false;

            var extension = Path.GetExtension(Selecteditem.file_name);
            string OutputFileName;

            if (eReportType == eDownloadType.PDF)
            {
                OutputFileName = Selecteditem.file_name.Replace(extension, ".pdf");
                string statuscode = await AntibiogramService.DownloadPDFFileAsync(Selecteditem);

                if (statuscode == "OK")
                {
                    //await OIFileSave.DownloadFile(ServerFileName, OutputFileName, contentType); 
                    var filename = $"{Selecteditem.file_name.Replace(System.IO.Path.GetExtension(Selecteditem.file_name), "")}_{DateTime.Now.ToString("yyyyMMdd_HHmmss")}{".pdf"}";
                    byte[] bytes = await fileService.GetFilePdfDownloadAsync("WHONETBackupPath_NARST_Result", "ProcessRequest_NARST_Result", OutputFileName);

                    await downloadService.DownloadFile(filename, bytes, "application/pdf");

                }
                else if (statuscode == "ERR_PATH") { await jsRuntime.InvokeAsync<object>("ShowAlert", "ไม่พบ Config PATH กรุณาติดต่อผู้ดูแลระบบ"); }
                else { await jsRuntime.InvokeAsync<object>("ShowAlert", "File not Found"); }

            }
            else
            {
                var filename = $"{Selecteditem.file_name.Replace(System.IO.Path.GetExtension(Selecteditem.file_name), "")}_{DateTime.Now.ToString("yyyyMMdd_HHmmss")}{System.IO.Path.GetExtension(Selecteditem.file_name)}";
                byte[] bytes = await fileService.GetFileExcelDownloadAsync("WHONETBackupPath_NARST_Result", "ProcessRequest_NARST_Result", Selecteditem.file_name);

                await downloadService.DownloadFile(filename, bytes, "application/vnd.ms-excel");

                //string ServerFileName = string.Format("{0}\\{1}", Selecteditem.file_path.Remove(0, 1), Selecteditem.file_name);
                //contentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                //OutputFileName = Selecteditem.file_name;
                //await OIFileSave.DownloadFile(ServerFileName, OutputFileName, contentType);
            }
            blnLoadComplete = true;
        }
        else
        {
            //Path incorrect or null
            await jsRuntime.InvokeAsync<object>("ShowAlert", "Path Incorrect");
        }
    }

    private async Task DownloadHospitalFile(AntibiogramHospitalTemplateDTO Selecteditem, eDownloadType eReportType)
    {
        if (!string.IsNullOrEmpty(Selecteditem.file_name))
        {
            blnLoadComplete = false;

            var extension = Path.GetExtension(Selecteditem.file_name);
            string OutputFileName;

            if (eReportType == eDownloadType.PDF)
            {

                OutputFileName = Selecteditem.file_name.Replace(extension, ".pdf");
                string statuscode = await AntibiogramService.DownloadPDFFileAsync(Selecteditem);

                if (statuscode == "OK")
                {
                    //await OIFileSave.DownloadFile(ServerFileName, OutputFileName, contentType); 
                    var filename = $"{Selecteditem.file_name.Replace(System.IO.Path.GetExtension(Selecteditem.file_name), "")}_{DateTime.Now.ToString("yyyyMMdd_HHmmss")}{".pdf"}";
                    byte[] bytes = await fileService.GetFilePdfDownloadAsync("WHONETBackupPath_NARST_Result", "ProcessRequest_NARST_Result", OutputFileName);

                    await downloadService.DownloadFile(filename, bytes, "application/pdf");

                }
                else if (statuscode == "ERR_PATH") { await jsRuntime.InvokeAsync<object>("ShowAlert", "ไม่พบ Config PATH กรุณาติดต่อผู้ดูแลระบบ"); }
                else { await jsRuntime.InvokeAsync<object>("ShowAlert", "File not Found"); }
            }
            else
            {
                var filename = $"{Selecteditem.file_name.Replace(System.IO.Path.GetExtension(Selecteditem.file_name), "")}_{DateTime.Now.ToString("yyyyMMdd_HHmmss")}{System.IO.Path.GetExtension(Selecteditem.file_name)}";
                byte[] bytes = await fileService.GetFileExcelDownloadAsync("WHONETBackupPath_NARST_Result", "ProcessRequest_NARST_Result", Selecteditem.file_name);

                await downloadService.DownloadFile(filename, bytes, "application/vnd.ms-excel");
            }
            blnLoadComplete = true;
        }
        else
        {
            //Path incorrect or null
            await jsRuntime.InvokeAsync<object>("ShowAlert", "Path Incorrect");
        }
    }

    private async Task DownloadAreaHealthFile(AntibiogramAreaHealthTemplateDTO Selecteditem, eDownloadType eReportType)
    {
        if (!string.IsNullOrEmpty(Selecteditem.file_name) && !string.IsNullOrEmpty(Selecteditem.file_path))
        {
            blnLoadComplete = false;

            var extension = Path.GetExtension(Selecteditem.file_name);
            string OutputFileName;

            if (eReportType == eDownloadType.PDF)
            {
                //contentType = "application/pdf";
                OutputFileName = Selecteditem.file_name.Replace(extension, ".pdf");
                string statuscode = await AntibiogramService.DownloadPDFFileAsync(Selecteditem);

                if (statuscode == "OK")
                {
                    var filename = $"{Selecteditem.file_name.Replace(System.IO.Path.GetExtension(Selecteditem.file_name), "")}_{DateTime.Now.ToString("yyyyMMdd_HHmmss")}{".pdf"}";
                    byte[] bytes = await fileService.GetFilePdfDownloadAsync("WHONETBackupPath_NARST_Result", "ProcessRequest_NARST_Result", OutputFileName);

                    await downloadService.DownloadFile(filename, bytes, "application/pdf");
                }
                else if (statuscode == "ERR_PATH") { await jsRuntime.InvokeAsync<object>("ShowAlert", "ไม่พบ Config PATH กรุณาติดต่อผู้ดูแลระบบ"); }
                else { await jsRuntime.InvokeAsync<object>("ShowAlert", "File not Found"); }

            }
            else
            {
                var filename = $"{Selecteditem.file_name.Replace(System.IO.Path.GetExtension(Selecteditem.file_name), "")}_{DateTime.Now.ToString("yyyyMMdd_HHmmss")}{System.IO.Path.GetExtension(Selecteditem.file_name)}";
                byte[] bytes = await fileService.GetFileExcelDownloadAsync("WHONETBackupPath_NARST_Result", "ProcessRequest_NARST_Result", Selecteditem.file_name);

                await downloadService.DownloadFile(filename, bytes, "application/vnd.ms-excel");
            }
            blnLoadComplete = true;
        }
        else
        {
            //Path incorrect or null
            await jsRuntime.InvokeAsync<object>("ShowAlert", "Path Incorrect");
        }
    }

    private async Task DownloadNationFile(AntibiogramNationTemplateDTO Selecteditem, eDownloadType eReportType)
    {
        if (!string.IsNullOrEmpty(Selecteditem.file_name) && !string.IsNullOrEmpty(Selecteditem.file_path))
        {
            blnLoadComplete = false;
            var extension = Path.GetExtension(Selecteditem.file_name);
            string OutputFileName;

            if (eReportType == eDownloadType.PDF)
            {
                OutputFileName = Selecteditem.file_name.Replace(extension, ".pdf");
                string statuscode = await AntibiogramService.DownloadPDFFileAsync(Selecteditem);

                if (statuscode == "OK")
                {
                    var filename = $"{Selecteditem.file_name.Replace(System.IO.Path.GetExtension(Selecteditem.file_name), "")}_{DateTime.Now.ToString("yyyyMMdd_HHmmss")}{".pdf"}";
                    byte[] bytes = await fileService.GetFilePdfDownloadAsync("WHONETBackupPath_NARST_Result", "ProcessRequest_NARST_Result", OutputFileName);

                    await downloadService.DownloadFile(filename, bytes, "application/pdf");
                }
                else if (statuscode == "ERR_PATH") { await jsRuntime.InvokeAsync<object>("ShowAlert", "ไม่พบ Config PATH กรุณาติดต่อผู้ดูแลระบบ"); }
                else { await jsRuntime.InvokeAsync<object>("ShowAlert", "File not Found"); }

            }
            else
            {
                var filename = $"{Selecteditem.file_name.Replace(System.IO.Path.GetExtension(Selecteditem.file_name), "")}_{DateTime.Now.ToString("yyyyMMdd_HHmmss")}{System.IO.Path.GetExtension(Selecteditem.file_name)}";
                byte[] bytes = await fileService.GetFileExcelDownloadAsync("WHONETBackupPath_NARST_Result", "ProcessRequest_NARST_Result", Selecteditem.file_name);

                await downloadService.DownloadFile(filename, bytes, "application/vnd.ms-excel");
            }
            blnLoadComplete = true;

        }
        else
        {
            //Path incorrect or null
            await jsRuntime.InvokeAsync<object>("ShowAlert", "Path Incorrect");
        }

    }

    async Task ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);
        await InvokeAsync(() => { StateHasChanged(); });
    }

    private void DDL_Change(string ddl_name, object value)
    {
        if (ddl_name == "Arh" && value == null)
        {
            searchAnti.prv_code = null;
            searchAnti.hos_code = null;
        }
        else if (ddl_name == "Prv" && value == null)
        {
            searchAnti.hos_code = null;
        }
        else if (ddl_name == "Prv" && value != null)
        {
            var prv_select = lab_ddl_List.FirstOrDefault(x => x.prv_code == value.ToString());

            searchAnti.arh_code = prv_select.arh_code;
        }
        else if (ddl_name == "Hos" && value == null)
        {
            //searchModel.mps_lab = null;
        }
        else if (ddl_name == "Hos" && value != null)
        {
            var hos_select = lab_ddl_List.FirstOrDefault(x => x.hos_code == value.ToString());

            searchAnti.prv_code = hos_select.prv_code;
            searchAnti.arh_code = hos_select.arh_code;
        }

        StateHasChanged();
    }

    #endregion


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IBlazorDownloadFileService downloadService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private FileService fileService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private SpecimenService specimenService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ConfigDataService configDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NotificationService notificationService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private DialogService dialogService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private DropDownListDataService ddlDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ReportService ReportService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AntibiogramTemplateService AntibiogramService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime jsRuntime { get; set; }
    }
}
#pragma warning restore 1591
