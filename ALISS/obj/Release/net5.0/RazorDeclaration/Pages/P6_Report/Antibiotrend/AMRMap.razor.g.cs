// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace ALISS.Pages.P6_Report.Antibiotrend
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using System.Text.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using System.Security.Claims;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.HttpOverrides;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using Blazored;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using Blazored.Menu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using BlazorDownloadFile;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.Account;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.DropDownList.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.LoginManagement.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Master.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Process.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.AUTH.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 32 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.MasterManagement.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 33 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.UserManagement.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 34 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.HISUpload.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 35 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.ANTIBIOGRAM.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 37 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.GLASS.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 39 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D0_Master;

#line default
#line hidden
#nullable disable
#nullable restore
#line 41 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D3_Process;

#line default
#line hidden
#nullable disable
#nullable restore
#line 42 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D4_UserManagement.AUTH;

#line default
#line hidden
#nullable disable
#nullable restore
#line 43 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D4_UserManagement.MasterManagement;

#line default
#line hidden
#nullable disable
#nullable restore
#line 44 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D4_UserManagement.UserManagement;

#line default
#line hidden
#nullable disable
#nullable restore
#line 46 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D5_HISData;

#line default
#line hidden
#nullable disable
#nullable restore
#line 47 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D6_Report.Antibiogram;

#line default
#line hidden
#nullable disable
#nullable restore
#line 49 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D6_Report.Glass;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\Pages\P6_Report\Antibiotrend\AMRMap.razor"
using ALISS.Data.D6_Report.Antibiotrend;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\Pages\P6_Report\Antibiotrend\AMRMap.razor"
using ALISS.ANTIBIOTREND.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\Pages\P6_Report\Antibiotrend\AMRMap.razor"
using ALISS.EXPORT.Library.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\Pages\P6_Report\Antibiotrend\AMRMap.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\Pages\P6_Report\Antibiotrend\AMRMap.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\Pages\P6_Report\Antibiotrend\AMRMap.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/Antibiotrend/AMRMap")]
    public partial class AMRMap : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 250 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\Pages\P6_Report\Antibiotrend\AMRMap.razor"
       

    [CascadingParameter] MainLayout mainLayout { get; set; }
    private const string MENU_CODE = "MNU_0706";
    private ConfigData configData = new ConfigData();
    private string classLabel = "col-4";
    private string classInput = "col-8";
    private string classMonth = "col-4";

    private int iMonthFrom = 1;
    private int iMonthTo = 12;
    private int iYearFrom = 2020;
    private int iYearTo = 2020;

    private int iYear = DateTime.Today.Year;
    private DateTime dtStartDate;
    private DateTime dtEndDate;
    private string SelectedOrgn = "";
    private List<string> lstOrganism = new List<string> { "A. baumannii", "P. aeruginosa", "E. coli", "K. pneumonia", "Salmonella", "Enterococcus supp", "A. aureus", "S. pneumoniae" };
    private List<AntibiotrendAMRStrategyDTO> lstAMRData = new List<AntibiotrendAMRStrategyDTO>();
    private AntibiotrendAMRStrategyDTO selectedAMR = new AntibiotrendAMRStrategyDTO();
    private AMRStrategySearchDTO searchAMR = new AMRStrategySearchDTO();
    private AMRSearchMapDTO modelExport = new AMRSearchMapDTO();
    private string antiPercentLabel = "";
    private eAreaHealth selectedAreaHealth;
    private eAreaHealth selectedMaxAreaHealth;
    private eAreaHealth selectedMinAreaHealth;
    private bool pageLoading = true;
    //private List<string> lstCanvasValue = new List<string> { "idx_01", "idx_02", "idx_03", "idx_04", "idx_05", "idx_06", "idx_07", "idx_08", "idx_09", "idx_10", "idx_11", "idx_12", "idx_13" };
    private Boolean blnLoadingComplete = true;
    private Boolean blnFirstDrawMax = true;
    private Boolean blnFirstDrawMin = true;
    private Dictionary<int, decimal> dictValue = new Dictionary<int, decimal>();
    private Dictionary<int,string> dictColor = new Dictionary<int,string>();
    private Dictionary<int, Dictionary<string,decimal>> dict = new Dictionary<int, Dictionary<string,decimal>>();

    private eSortby selectedSortBy = eSortby.regH;
    private class MonthItem
    {
        public int MonthValue { get; set; }
        public string MonthName { get; set; }
    }
    MonthItem[] MonthData = new MonthItem[] {
        new MonthItem
        {
            MonthValue = 1,
            MonthName = "มกราคม"
        },
        new MonthItem
        {
           MonthValue = 2,
           MonthName = "กุมภาพันธ์"
        },
        new MonthItem
        {
          MonthValue = 3,
          MonthName = "มีนาคม"
        },
        new MonthItem
        {
           MonthValue = 4,
           MonthName = "เมษายน"
        },
        new MonthItem
        {
           MonthValue = 5,
           MonthName = "พฤษภาคม"
        },
        new MonthItem
        {
            MonthValue = 6,
            MonthName = "มิถุนายน"
        },
        new MonthItem
        {
           MonthValue = 7,
            MonthName = "กรกฎาคม"
        },
        new MonthItem
        {
           MonthValue = 8,
            MonthName = "สิงหาคม"
        },
        new MonthItem
        {
            MonthValue = 9,
            MonthName = "กันยายน"
        },
        new MonthItem
        {
           MonthValue = 10,
            MonthName = "ตุลาคม"
        },
        new MonthItem
        {
            MonthValue = 11,
            MonthName = "พฤศจิกายน"
        },
        new MonthItem
        {
           MonthValue = 12,
           MonthName = "ธันวาคม"
        }
    };

    private string CVS_MAX_WIDTH = 128 + "px";
    private string CVS_MAX_HEIGHT = 110 + "px";
    private string CVS_MIN_WIDTH = 128 + "px";
    private string CVS_MIN_HEIGHT = 110 + "px";

    private enum eAreaHealth
    {
        Arh_01 = 1,
        Arh_02 = 2,
        Arh_03 = 3,
        Arh_04 = 4,
        Arh_05 = 5,
        Arh_06 = 6,
        Arh_07 = 7,
        Arh_08 = 8,
        Arh_09 = 9,
        Arh_10 = 10,
        Arh_11 = 11,
        Arh_12 = 12,
        Arh_13 = 13
    }

    private enum eSortby
    {
        desc = 1,
        asc = 2,
        regH = 3,
        none = 4
    }

    private class clsCoordinateXY
    {
        public int rgn_x { get; set; }
        public int rgn_y { get; set; }
        public int idx_x { get; set; }
        public int idx_y { get; set; }
        public string Width { get; set; }
        public string Height { get; set; }
        public string arhpicid { get; set; }
    }

    private string W01 = 128 + "px";
    private string W02 = 126 + "px";
    private string W03 = 60 + "px";
    private string W04 = 45 + "px";
    private string W05 = 74 + "px";
    private string W06 = 81 + "px";
    private string W07 = 85 + "px";
    private string W08 = 128 + "px";
    private string W09 = 94 + "px";
    private string W10 = 57 + "px";
    private string W11 = 85 + "px";
    private string W12 = 98 + "px";
    private string W13 = 22 + "px";

    private string H01 = 110 + "px";
    private string H02 = 108 + "px";
    private string H03 = 68 + "px";
    private string H04 = 60 + "px";
    private string H05 = 158 + "px";
    private string H06 = 98 + "px";
    private string H07 = 58 + "px";
    private string H08 = 60 + "px";
    private string H09 = 88 + "px";
    private string H10 = 92 + "px";
    private string H11 = 125 + "px";
    private string H12 = 78 + "px";
    private string H13 = 16 + "px";

    private string colorArea01 = "#ff5500";
    private string colorArea02 = "#ffbee8";
    private string colorArea03 = "#267300";
    private string colorArea04 = "#ffd380";
    private string colorArea05 = "#00ffc5";
    private string colorArea06 = "#005be7";
    private string colorArea07 = "#ffff00";
    private string colorArea08 = "#00a8e6";
    private string colorArea09 = "#cd6667";
    private string colorArea10 = "#b2b2b2";
    private string colorArea11 = "#ff01c4";
    private string colorArea12 = "#737400";
    private string colorArea13 = "#d20001";

    private clsCoordinateXY Coordinate
    {
        get
        {
            var obj = new clsCoordinateXY();
            if (selectedAreaHealth == eAreaHealth.Arh_01)
            {
                obj.rgn_x = 3;
                obj.rgn_y = 10;

                obj.idx_x = 45;
                obj.idx_y = 3;

                obj.Width = 128 + "px";
                obj.Height = 110 + "px";
                obj.arhpicid = nameof(eAreaHealth.Arh_01);
            }
            else if (selectedAreaHealth == eAreaHealth.Arh_02)
            {
                obj.rgn_x = 20;
                obj.rgn_y = 80;

                obj.idx_x = 45;
                obj.idx_y = 48;

                obj.Width = 126 + "px";
                obj.Height = 108 + "px";
                obj.arhpicid = nameof(eAreaHealth.Arh_02);
            }
            else if (selectedAreaHealth == eAreaHealth.Arh_03)
            {
                obj.rgn_x = 55;
                obj.rgn_y = 130;

                obj.idx_x = 45;
                obj.idx_y = 93;

                obj.Width = 60 + "px";
                obj.Height = 68 + "px";
                obj.arhpicid = nameof(eAreaHealth.Arh_03);
            }
            else if (selectedAreaHealth == eAreaHealth.Arh_04)
            {
                obj.rgn_x = 92;
                obj.rgn_y = 176;

                obj.idx_x = 45;
                obj.idx_y = 140;

                obj.Width = 44 + "px";
                obj.Height = 58 + "px";
                obj.arhpicid = nameof(eAreaHealth.Arh_04);
            }
            else if (selectedAreaHealth == eAreaHealth.Arh_05)
            {
                obj.rgn_x = 27;
                obj.rgn_y = 171;

                obj.idx_x = 45;
                obj.idx_y = 189;

                obj.Width = 74 + "px";
                obj.Height = 158 + "px";
                obj.arhpicid = nameof(eAreaHealth.Arh_05);
            }
            else if (selectedAreaHealth == eAreaHealth.Arh_06)
            {
                obj.rgn_x = 101;
                obj.rgn_y = 211;

                obj.idx_x = 45;
                obj.idx_y = 232;

                obj.Width = 81 + "px";
                obj.Height = 98 + "px";
                obj.arhpicid = nameof(eAreaHealth.Arh_06);
            }
            else if (selectedAreaHealth == eAreaHealth.Arh_07)
            {
                obj.rgn_x = 142;
                obj.rgn_y = 123;

                obj.idx_x = 45;
                obj.idx_y = 283;

                obj.Width = 85 + "px";
                obj.Height = 58 + "px";
                obj.arhpicid = nameof(eAreaHealth.Arh_07);
            }
            else if (selectedAreaHealth == eAreaHealth.Arh_08)
            {
                obj.rgn_x = 115;
                obj.rgn_y = 77;

                obj.idx_x = 165;
                obj.idx_y = 3;

                obj.Width = 128 + "px";
                obj.Height = 60 + "px";
                obj.arhpicid = nameof(eAreaHealth.Arh_08);
            }
            else if (selectedAreaHealth == eAreaHealth.Arh_09)
            {
                obj.rgn_x = 126;
                obj.rgn_y = 137;

                obj.idx_x = 165;
                obj.idx_y = 48;

                obj.Width = 94 + "px";
                obj.Height = 88 + "px";
                obj.arhpicid = nameof(eAreaHealth.Arh_09);
            }
            else if (selectedAreaHealth == eAreaHealth.Arh_10)
            {
                obj.rgn_x = 212;
                obj.rgn_y = 130;

                obj.idx_x = 165;
                obj.idx_y = 93;

                obj.Width = 57 + "px";
                obj.Height = 92 + "px";
                obj.arhpicid = nameof(eAreaHealth.Arh_10);
            }
            else if (selectedAreaHealth == eAreaHealth.Arh_11)
            {
                obj.rgn_x = 17;
                obj.rgn_y = 322;

                obj.idx_x = 165;
                obj.idx_y = 138;

                obj.Width = 85 + "px";
                obj.Height = 121 + "px";
                obj.arhpicid = nameof(eAreaHealth.Arh_11);
            }
            else if (selectedAreaHealth == eAreaHealth.Arh_12)
            {
                obj.rgn_x = 59;//58
                obj.rgn_y = 422;

                obj.idx_x = 165;
                obj.idx_y = 190;

                obj.Width = 98 + "px";
                obj.Height = 78 + "px";
                obj.arhpicid = nameof(eAreaHealth.Arh_12);
            }
            else if (selectedAreaHealth == eAreaHealth.Arh_13)
            {
                obj.rgn_x = 96;
                obj.rgn_y = 229;

                obj.idx_x = 165;
                obj.idx_y = 236;

                obj.Width = 22 + "px";
                obj.Height = 16 + "px";
                obj.arhpicid = nameof(eAreaHealth.Arh_13);
            }
            else
            {
                obj.rgn_x = 0;
                obj.rgn_y = 0;

                obj.idx_x = 0;
                obj.idx_y = 0;

                obj.Width = 0 + "px";
                obj.Height = 0 + "px";
                obj.arhpicid = "";
            }
            return obj;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await mainLayout.GetLoginUser();

            if (mainLayout.loginUser.CheckPagePermission(MENU_CODE) == false) navigationManager.NavigateTo("/NoPermissionPage");

            configData.ConfigDTOList = await configDataService.Get_TBConfig_DataList_Async(new TBConfigDTO() { tbc_mnu_code = MENU_CODE });

            //dtStartDate = new DateTime(iYearFrom, iMonthFrom, 1);
            //dtEndDate = new DateTime(iYearTo, iMonthTo, 1);
            dtStartDate = new DateTime(2020, 1, 1);
            dtEndDate = new DateTime(2020, 12, 1);

            searchAMR.month_start = dtStartDate;
            searchAMR.month_end = dtEndDate;

            lstAMRData = await ReportService.GetAMRStrategyModelAsync(searchAMR);

            //var rank_01 = lstAMRData.FirstOrDefault().rank_arh_01;
            //var rank_02 = lstAMRData.FirstOrDefault().rank_arh_02;

            await CalRank();

            dictValue.Clear();
            dictColor.Clear();
            for(var i = 0; i < 13; i++)
            {
                dictValue.Add(i+1, 0);
                if ((i+1) == 1){dictColor.Add(i + 1, colorArea01);}
                else if ((i+1) == 2) {dictColor.Add(i + 1,colorArea02); }
                else if ((i+1) == 3) {dictColor.Add(i + 1,colorArea03); }
                else if ((i+1) == 4) {dictColor.Add(i + 1,colorArea04); }
                else if ((i+1) == 5) {dictColor.Add(i + 1,colorArea05); }
                else if ((i+1) == 6) {dictColor.Add(i + 1,colorArea06); }
                else if ((i+1) == 7) {dictColor.Add(i + 1,colorArea07); }
                else if ((i+1) == 8) {dictColor.Add(i + 1,colorArea08); }
                else if ((i+1) == 9) {dictColor.Add(i + 1,colorArea09); }
                else if ((i+1) == 10) {dictColor.Add(i + 1,colorArea10); }
                else if ((i+1) == 11) {dictColor.Add(i + 1, colorArea11); }
                else if ((i+1) == 12) {dictColor.Add(i + 1,colorArea12); }
                else if ((i+1) == 13) {dictColor.Add(i + 1,colorArea13); }

            }


            pageLoading = false;
            StateHasChanged();

            //await JSRuntime.InvokeVoidAsync("SetPositionCanvasInitial", "circle", lstCanvasValue);
        }
    }

    private async Task CalRank()
    {
        //List<AntibiotrendAMRStrategyDTO> lst = new List<AntibiotrendAMRStrategyDTO>();
        //AntibiotrendAMRStrategyDTO lst = lstAMRData.FirstOrDefault();


        foreach( AntibiotrendAMRStrategyDTO lst in lstAMRData)
        {
            var dictValue = new Dictionary<int, decimal>();

            dictValue.Add(1, lst.arh_01);
            dictValue.Add(2, lst.arh_02);
            dictValue.Add(3, lst.arh_03);
            dictValue.Add(4, lst.arh_04);
            dictValue.Add(5, lst.arh_05);
            dictValue.Add(6, lst.arh_06);
            dictValue.Add(7, lst.arh_07);
            dictValue.Add(8, lst.arh_08);
            dictValue.Add(9, lst.arh_09);
            dictValue.Add(10, lst.arh_10);
            dictValue.Add(11, lst.arh_11);
            dictValue.Add(12, lst.arh_12);
            dictValue.Add(13, lst.arh_13);

            if (lst.arh_01 == 0 && lst.arh_02 == 0 && lst.arh_03 == 0 && lst.arh_04 == 0 && lst.arh_05 == 0 && lst.arh_06 == 0
                && lst.arh_07 == 0 && lst.arh_08 == 0 && lst.arh_09 == 0 && lst.arh_10 == 0 && lst.arh_11 == 0 && lst.arh_12 == 0 && lst.arh_13 == 0)
            {
                lst.rank_arh_01 = 0;
                lst.rank_arh_02 = 0;
                lst.rank_arh_03 = 0;
                lst.rank_arh_04 = 0;
                lst.rank_arh_05 = 0;
                lst.rank_arh_06 = 0;
                lst.rank_arh_07 = 0;
                lst.rank_arh_08 = 0;
                lst.rank_arh_09 = 0;
                lst.rank_arh_10 = 0;
                lst.rank_arh_11 = 0;
                lst.rank_arh_12 = 0;
                lst.rank_arh_13 = 0;

                return;
            }

            var sortedDict = from dk in dictValue orderby dk.Value descending select dk;
            for (int i = 0; i < 13; i++)
            {
                if (lst.arh_01 == sortedDict.ElementAt(i).Value)
                {
                    lst.rank_arh_01 = i + 1;
                    continue;
                }
                else if(lst.arh_02 == sortedDict.ElementAt(i).Value)
                {
                    lst.rank_arh_02 = i + 1;
                    continue;
                }
                else if(lst.arh_03 == sortedDict.ElementAt(i).Value)
                {
                    lst.rank_arh_03 = i + 1;
                    continue;
                }
                else if (lst.arh_04 == sortedDict.ElementAt(i).Value)
                {
                    lst.rank_arh_04 = i + 1;
                    continue;
                }
                else if(lst.arh_05 == sortedDict.ElementAt(i).Value)
                {
                    lst.rank_arh_05 = i + 1;
                    continue;
                }
                else if(lst.arh_06 == sortedDict.ElementAt(i).Value)
                {
                    lst.rank_arh_06 = i + 1;
                    continue;
                }
                else if(lst.arh_07 == sortedDict.ElementAt(i).Value)
                {
                    lst.rank_arh_07 = i + 1;
                    continue;
                }
                else if(lst.arh_08 == sortedDict.ElementAt(i).Value)
                {
                    lst.rank_arh_08 = i + 1;
                    continue;
                }
                else if(lst.arh_09 == sortedDict.ElementAt(i).Value)
                {
                    lst.rank_arh_09 = i + 1;
                    continue;
                }
                else if (lst.arh_10 == sortedDict.ElementAt(i).Value)
                {
                    lst.rank_arh_10 = i + 1;
                    continue;
                }
                else if(lst.arh_11 == sortedDict.ElementAt(i).Value)
                {
                    lst.rank_arh_11 = i + 1;
                    continue;
                }
                else if(lst.arh_12 == sortedDict.ElementAt(i).Value)
                {
                    lst.rank_arh_12 = i + 1;
                    continue;
                }
                else if(lst.arh_13 == sortedDict.ElementAt(i).Value)
                {
                    lst.rank_arh_13 = i + 1;
                    continue;
                }
            }
        }

    }

    private async Task SearchData()
    {
        blnLoadingComplete = false;

        dtStartDate = new DateTime(iYearFrom, iMonthFrom, 1);
        dtEndDate = new DateTime(iYearTo, iMonthTo, 1);

        searchAMR.month_start = dtStartDate;
        searchAMR.month_end = dtEndDate;

        lstAMRData = await ReportService.GetAMRStrategyModelAsync(searchAMR);
        await CalRank();
        StateHasChanged();

        dictValue.Clear();
        for (var i = 0; i < 13; i++)
        {
            dictValue.Add(i+1, 0);
        }

        await ClearSelectedAMR();

        blnLoadingComplete = true;
    }

    private async Task ClickOrganism(MouseEventArgs args, AntibiotrendAMRStrategyDTO selectedItem)
    {
        selectedAMR = selectedItem;
        antiPercentLabel = string.Format("(%{0}) {1}", selectedItem.measure_type, selectedItem.anti_name);

        await DrawRegion();
        await DrawRegion();

        await DrawCircle(selectedItem);

        await DrawPercentValue();
    }

    private async Task DrawCircle(AntibiotrendAMRStrategyDTO selectedItem)
    {
        // Draw circle each region
        selectedAreaHealth = eAreaHealth.Arh_01;
        var radius01 = CalCanvasRadius(selectedItem.rank_arh_01);
        await JSRuntime.InvokeVoidAsync("ClearCircle", "cvs01");
        await JSRuntime.InvokeVoidAsync("DrawCircle", "cvs01", "thai", Coordinate.rgn_x, Coordinate.rgn_y, Coordinate.arhpicid, radius01, 1);
        StateHasChanged();

        selectedAreaHealth = eAreaHealth.Arh_02;
        var radius02 = CalCanvasRadius(selectedItem.rank_arh_02);
        await JSRuntime.InvokeVoidAsync("ClearCircle", "cvs02");
        await JSRuntime.InvokeVoidAsync("DrawCircle", "cvs02", "thai", Coordinate.rgn_x + 20, Coordinate.rgn_y - 5, Coordinate.arhpicid, radius02, 2);
        StateHasChanged();

        selectedAreaHealth = eAreaHealth.Arh_03;
        var radius03 = CalCanvasRadius(selectedItem.rank_arh_03);
        await JSRuntime.InvokeVoidAsync("ClearCircle", "cvs03");
        await JSRuntime.InvokeVoidAsync("DrawCircle", "cvs03", "thai", Coordinate.rgn_x, Coordinate.rgn_y, Coordinate.arhpicid, radius03, 3);
        StateHasChanged();

        selectedAreaHealth = eAreaHealth.Arh_04;
        var radius04 = CalCanvasRadius(selectedItem.rank_arh_04);
        await JSRuntime.InvokeVoidAsync("ClearCircle", "cvs04");
        await JSRuntime.InvokeVoidAsync("DrawCircle", "cvs04", "thai", Coordinate.rgn_x, Coordinate.rgn_y, Coordinate.arhpicid, radius04, 4);
        StateHasChanged();

        selectedAreaHealth = eAreaHealth.Arh_05;
        var radius05 = CalCanvasRadius(selectedItem.rank_arh_05);
        await JSRuntime.InvokeVoidAsync("ClearCircle", "cvs05");
        await JSRuntime.InvokeVoidAsync("DrawCircle", "cvs05", "thai", Coordinate.rgn_x + 15, Coordinate.rgn_y, Coordinate.arhpicid, radius05, 5);
        StateHasChanged();

        selectedAreaHealth = eAreaHealth.Arh_06;
        var radius06 = CalCanvasRadius(selectedItem.rank_arh_06);
        await JSRuntime.InvokeVoidAsync("ClearCircle", "cvs06");
        await JSRuntime.InvokeVoidAsync("DrawCircle", "cvs06", "thai", Coordinate.rgn_x, Coordinate.rgn_y - 20, Coordinate.arhpicid, radius06, 6);
        StateHasChanged();

        selectedAreaHealth = eAreaHealth.Arh_07;
        var radius07 = CalCanvasRadius(selectedItem.rank_arh_07);
        await JSRuntime.InvokeVoidAsync("ClearCircle", "cvs07");
        await JSRuntime.InvokeVoidAsync("DrawCircle", "cvs07", "thai", Coordinate.rgn_x, Coordinate.rgn_y, Coordinate.arhpicid, radius07, 7);
        StateHasChanged();

        selectedAreaHealth = eAreaHealth.Arh_08;
        var radius08 = CalCanvasRadius(selectedItem.rank_arh_08);
        await JSRuntime.InvokeVoidAsync("ClearCircle", "cvs08");
        await JSRuntime.InvokeVoidAsync("DrawCircle", "cvs08", "thai", Coordinate.rgn_x, Coordinate.rgn_y, Coordinate.arhpicid, radius08, 8);
        StateHasChanged();

        selectedAreaHealth = eAreaHealth.Arh_09;
        var radius09 = CalCanvasRadius(selectedItem.rank_arh_09);
        await JSRuntime.InvokeVoidAsync("ClearCircle", "cvs09");
        await JSRuntime.InvokeVoidAsync("DrawCircle", "cvs09", "thai", Coordinate.rgn_x, Coordinate.rgn_y + 15, Coordinate.arhpicid, radius09, 9);
        StateHasChanged();

        selectedAreaHealth = eAreaHealth.Arh_10;
        var radius10 = CalCanvasRadius(selectedItem.rank_arh_10);
        await JSRuntime.InvokeVoidAsync("ClearCircle", "cvs10");
        await JSRuntime.InvokeVoidAsync("DrawCircle", "cvs10", "thai", Coordinate.rgn_x, Coordinate.rgn_y, Coordinate.arhpicid, radius10, 10);
        StateHasChanged();

        selectedAreaHealth = eAreaHealth.Arh_11;
        var radius11 = CalCanvasRadius(selectedItem.rank_arh_11);
        await JSRuntime.InvokeVoidAsync("ClearCircle", "cvs11");
        await JSRuntime.InvokeVoidAsync("DrawCircle", "cvs11", "thai", Coordinate.rgn_x, Coordinate.rgn_y, Coordinate.arhpicid, radius11, 11);
        StateHasChanged();

        selectedAreaHealth = eAreaHealth.Arh_12;
        var radius12 = CalCanvasRadius(selectedItem.rank_arh_12);
        await JSRuntime.InvokeVoidAsync("ClearCircle", "cvs12");
        await JSRuntime.InvokeVoidAsync("DrawCircle", "cvs12", "thai", Coordinate.rgn_x, Coordinate.rgn_y, Coordinate.arhpicid, radius12, 12);
        StateHasChanged();

        selectedAreaHealth = eAreaHealth.Arh_13;
        var radius13 = CalCanvasRadius(selectedItem.rank_arh_13);
        await JSRuntime.InvokeVoidAsync("ClearCircle", "cvs13");
        await JSRuntime.InvokeVoidAsync("DrawCircle", "cvs13", "thai", Coordinate.rgn_x, Coordinate.rgn_y, Coordinate.arhpicid, radius13, 13);
        StateHasChanged();

    }

    private async Task DrawRegion()
    {

        List<decimal> lstValue = new List<decimal>  { selectedAMR.arh_01, selectedAMR.arh_02
                                                       , selectedAMR.arh_03, selectedAMR.arh_04
                                                       , selectedAMR.arh_05, selectedAMR.arh_06
                                                       , selectedAMR.arh_07, selectedAMR.arh_08
                                                       , selectedAMR.arh_09, selectedAMR.arh_10
                                                       , selectedAMR.arh_11, selectedAMR.arh_12
                                                       , selectedAMR.arh_13 };
        //List<decimal> lstValue = new List<decimal>() ;
        //if (selectedAMR.arh_01 > 0) { lstValue.Add(selectedAMR.arh_01);}
        //if (selectedAMR.arh_02 > 0) { lstValue.Add(selectedAMR.arh_02);}
        //if (selectedAMR.arh_03 > 0) { lstValue.Add(selectedAMR.arh_03);}
        //if (selectedAMR.arh_04 > 0) { lstValue.Add(selectedAMR.arh_04);}
        //if (selectedAMR.arh_05 > 0) { lstValue.Add(selectedAMR.arh_05);}
        //if (selectedAMR.arh_06 > 0) { lstValue.Add(selectedAMR.arh_06);}
        //if (selectedAMR.arh_07 > 0) { lstValue.Add(selectedAMR.arh_07);}
        //if (selectedAMR.arh_08 > 0) { lstValue.Add(selectedAMR.arh_08);}
        //if (selectedAMR.arh_09 > 0) { lstValue.Add(selectedAMR.arh_09);}
        //if (selectedAMR.arh_10 > 0) { lstValue.Add(selectedAMR.arh_10);}
        //if (selectedAMR.arh_11 > 0) { lstValue.Add(selectedAMR.arh_11);}
        //if (selectedAMR.arh_12 > 0) { lstValue.Add(selectedAMR.arh_12);}
        //if (selectedAMR.arh_13 > 0) { lstValue.Add(selectedAMR.arh_13);}


        var maxValue = lstValue.Max();
        var minValue = lstValue.Min();
        int maxIndex = 0;
        int minIndex = 0;
        var cnt = lstValue.Count();

        maxValue = 0;
        for (var i = 0; i < cnt; i++)
        {
            if (lstValue[i] > maxValue)
            {
                maxValue = lstValue[i];
                maxIndex = i + 1;
            }
        }
        minValue = 100;
        for (var i = 0; i < cnt; i++)
        {
            if (lstValue[i] < minValue && lstValue[i] > 0)
            {
                minValue = lstValue[i];
                minIndex = i + 1;
            }
        }

        // Max Area
        if (maxIndex > 0)
        {
            selectedAreaHealth = (eAreaHealth)maxIndex;
            CVS_MAX_WIDTH = Coordinate.Width;
            CVS_MAX_HEIGHT = Coordinate.Height;
            await JSRuntime.InvokeVoidAsync("ClearCircle", "cvsMax");
            await JSRuntime.InvokeVoidAsync("MoveCanvas", "cvsMax", "thai", Coordinate.rgn_x, Coordinate.rgn_y, Coordinate.arhpicid, 20);
            blnFirstDrawMax = false;
            StateHasChanged();
        }
        else
        {
            if (!blnFirstDrawMax)
            {
                await JSRuntime.InvokeVoidAsync("ClearCircle", "cvsMax");
            }
        }

        // Min Area
        if (minIndex > 0)
        {
            selectedAreaHealth = (eAreaHealth)minIndex;
            CVS_MIN_WIDTH = Coordinate.Width;
            CVS_MIN_HEIGHT = Coordinate.Height;
            await JSRuntime.InvokeVoidAsync("ClearCircle", "cvsMin");
            await JSRuntime.InvokeVoidAsync("MoveCanvas", "cvsMin", "thai", Coordinate.rgn_x, Coordinate.rgn_y, Coordinate.arhpicid, 3);
            blnFirstDrawMin = false;
            StateHasChanged();
        }
        else
        {
            if (!blnFirstDrawMin)
            {
                await JSRuntime.InvokeVoidAsync("ClearCircle", "cvsMin");
            }
        }
    }

    private async Task ChangeOrderBy(eSortby SelectedValue, string name)
    {
        await DrawPercentValue();
    }

    private async Task DrawPercentValue()
    {
        // ------------------------ % Value ---------------------- //

        dictValue[1] = selectedAMR.arh_01;
        dictValue[2] = selectedAMR.arh_02;
        dictValue[3] = selectedAMR.arh_03;
        dictValue[4] = selectedAMR.arh_04;
        dictValue[5] = selectedAMR.arh_05;
        dictValue[6] = selectedAMR.arh_06;
        dictValue[7] = selectedAMR.arh_07;
        dictValue[8] = selectedAMR.arh_08;
        dictValue[9] = selectedAMR.arh_09;
        dictValue[10] = selectedAMR.arh_10;
        dictValue[11] = selectedAMR.arh_11;
        dictValue[12] = selectedAMR.arh_12;
        dictValue[13] = selectedAMR.arh_13;

        if(selectedSortBy == eSortby.asc)
        {
            dictValue = dictValue.OrderBy(x => x.Value).ToDictionary(x => x.Key, x => x.Value);
        }
        else if (selectedSortBy == eSortby.desc)
        {
            dictValue = dictValue.OrderByDescending(x => x.Value).ToDictionary(x => x.Key, x => x.Value);
        }
        else if (selectedSortBy == eSortby.regH)
        {
            dictValue = dictValue.OrderBy(x => x.Key).ToDictionary(x => x.Key, x => x.Value);
        }
    }

    private async Task ClearSelectedAMR()
    {
        selectedAMR.arh_01 = 0;
        selectedAMR.arh_02 = 0;
        selectedAMR.arh_03 = 0;
        selectedAMR.arh_04 = 0;
        selectedAMR.arh_05 = 0;
        selectedAMR.arh_06 = 0;
        selectedAMR.arh_07 = 0;
        selectedAMR.arh_08 = 0;
        selectedAMR.arh_09 = 0;
        selectedAMR.arh_10 = 0;
        selectedAMR.arh_11 = 0;
        selectedAMR.arh_12 = 0;
        selectedAMR.arh_13 = 0;

        selectedAMR.rank_arh_01 = 0;
        selectedAMR.rank_arh_02 = 0;
        selectedAMR.rank_arh_03 = 0;
        selectedAMR.rank_arh_04 = 0;
        selectedAMR.rank_arh_05 = 0;
        selectedAMR.rank_arh_06 = 0;
        selectedAMR.rank_arh_07 = 0;
        selectedAMR.rank_arh_08 = 0;
        selectedAMR.rank_arh_09 = 0;
        selectedAMR.rank_arh_10 = 0;
        selectedAMR.rank_arh_11 = 0;
        selectedAMR.rank_arh_12 = 0;
        selectedAMR.rank_arh_13 = 0;

        selectedAMR.org_code = "";
        selectedAMR.anti_code = "";

        await ClickOrganism(null, selectedAMR);
    }

    private int CalCanvasRadius(int rank)
    {
        int radius = 0;
        if (rank == 1) { radius = 18; }
        else if (rank == 2) { radius = 16; }
        else if (rank == 3) { radius = 15; }
        else if (rank == 4) { radius = 14; }
        else if (rank == 5) { radius = 13; }
        else if (rank == 6) { radius = 12; }
        else if (rank == 7) { radius = 11; }
        else if (rank == 8) { radius = 10; }
        else if (rank == 9) { radius = 9; }
        else if (rank == 10) { radius = 8; }
        else if (rank == 11) { radius = 7; }
        else if (rank == 12) { radius = 6; }
        else if (rank == 13) { radius = 5; }
        return radius;
    }

    private async Task MoveCanvas(MouseEventArgs args, eAreaHealth selectedItem)
    {

        selectedAreaHealth = selectedItem;
        //SetContext();
        CVS_MAX_WIDTH = Coordinate.Width;
        CVS_MAX_HEIGHT = Coordinate.Height;
        await JSRuntime.InvokeVoidAsync("MoveCanvas", "cvsMax", "thai", Coordinate.rgn_x, Coordinate.rgn_y, Coordinate.arhpicid, selectedItem);

        //var strValue = selectedAMR.percent_ns + "%";
        //await JSRuntime.InvokeVoidAsync("DrawValue", "cvsIndex", "circle", Coordinate.idx_x, Coordinate.idx_y,strValue);

        StateHasChanged();

    }

    private async void Export()
    {
        blnLoadingComplete = false;
        modelExport.month_start = searchAMR.month_start;
        modelExport.month_end = searchAMR.month_end;

        string statuscode = await ReportService.ExportMapDataAsync(modelExport);
        if (statuscode == "OK")
        {
            string OutputFileName = string.Format("{0}_{1}-{2}_{3}"
                                        , DateTime.Today.ToString("yyyyMMdd")
                                        , modelExport.month_start.Value.ToString("MMMyy", new CultureInfo("en-US"))
                                        , modelExport.month_end.Value.ToString("MMMyy", new CultureInfo("en-US"))
                                        , "AMPMap.pdf"
                                        );

            string ServerFileName = "ANTIBIOTREND" + "/" + DateTime.Today.ToString("yyyyMMdd") + "/" + OutputFileName;
            string contentType = "application/pdf";

            await OIFileSave.DownloadFile(ServerFileName, OutputFileName, contentType);
        }
        else if (statuscode == "ERR_PATH")
        {
            await JSRuntime.InvokeAsync<object>("ShowAlert", "ไม่พบ Config PATH กรุณาติดต่อผู้ดูแลระบบ");
        }
        else
        {
            await JSRuntime.InvokeAsync<object>("ShowAlert", "File not Found");
        }
        blnLoadingComplete = true;
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IFileSave OIFileSave { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ConfigDataService configDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AMPService ReportService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NotificationService notificationService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private DialogService dialogService { get; set; }
    }
}
#pragma warning restore 1591
