// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace ALISS.Pages.P6_Report.Antibiotrend
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using System.Text.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using System.Security.Claims;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.HttpOverrides;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Blazored;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Blazored.Menu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using BlazorDownloadFile;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.Account;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.DropDownList.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.LoginManagement.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Master.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Process.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.AUTH.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 32 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.MasterManagement.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 33 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.UserManagement.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 34 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.HISUpload.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 35 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.ANTIBIOGRAM.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 37 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.GLASS.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 39 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D0_Master;

#line default
#line hidden
#nullable disable
#nullable restore
#line 41 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D3_Process;

#line default
#line hidden
#nullable disable
#nullable restore
#line 42 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D4_UserManagement.AUTH;

#line default
#line hidden
#nullable disable
#nullable restore
#line 43 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D4_UserManagement.MasterManagement;

#line default
#line hidden
#nullable disable
#nullable restore
#line 44 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D4_UserManagement.UserManagement;

#line default
#line hidden
#nullable disable
#nullable restore
#line 46 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D5_HISData;

#line default
#line hidden
#nullable disable
#nullable restore
#line 47 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D6_Report.Antibiogram;

#line default
#line hidden
#nullable disable
#nullable restore
#line 49 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D6_Report.Glass;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\Pages\P6_Report\Antibiotrend\AMRGraphByHosp.razor"
using ALISS.Data.D6_Report.Antibiotrend;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\Pages\P6_Report\Antibiotrend\AMRGraphByHosp.razor"
using ALISS.ANTIBIOTREND.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\Pages\P6_Report\Antibiotrend\AMRGraphByHosp.razor"
using ALISS.EXPORT.Library.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\Pages\P6_Report\Antibiotrend\AMRGraphByHosp.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\Pages\P6_Report\Antibiotrend\AMRGraphByHosp.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\Pages\P6_Report\Antibiotrend\AMRGraphByHosp.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\Pages\P6_Report\Antibiotrend\AMRGraphByHosp.razor"
using System.Data.SqlClient;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\Pages\P6_Report\Antibiotrend\AMRGraphByHosp.razor"
using System.Configuration;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/Antibiotrend/AMRGraphByHosp")]
    public partial class AMRGraphByHosp : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 340 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\Pages\P6_Report\Antibiotrend\AMRGraphByHosp.razor"
           

        [CascadingParameter] MainLayout mainLayout { get; set; }
        private const string MENU_CODE = "MNU_0709";
        private ConfigData configData = new ConfigData();
        private string classLabel = "col-md-4";
        private string classInput = "col-8";
        private List<ColumnConfigDTO> searchColumnConfigResultList;
        private List<HospitalLabDataDTO> lab_ddl_List;

        string _Message;
        private int iYearFrom = (DateTime.Today.Year - 5);
        private int iYearTo = DateTime.Today.Year;
        private eSIRValue selectedSIRValue = eSIRValue.S;
        private eSubGraph selectedSubGraph = eSubGraph.None;
        private eGraphFormat selectedGraphFormat = eGraphFormat.Line;
        private string SIRText;
        private Boolean blnLoadData = false;
        private Boolean blnLoadComplete = false;
        private Boolean blnExportComplete = true;
        private Boolean blnShowSubGraphList = false;

        private string TitleChart;
        private eSubGraph LoadAMRData = eSubGraph.NA;

        private List<SP_AntimicrobialResistanceDTO> AMRData;
        SP_AntimicrobialResistanceHospSearchDTO searchAMR = new SP_AntimicrobialResistanceHospSearchDTO();
        private AMRGraphSearchDTO modelExport = new AMRGraphSearchDTO();

        private string titleChart;
        private string chartName1;
        private string chartName2;
        IEnumerable<string> multipleSelectedOrg = new string[] { };
        IEnumerable<string> multipleSelectedAnti = new string[] { };
        IEnumerable<string> multipleSelectedSpecimen = new string[] { };
        IEnumerable<string> multipleSelectedWardType = new string[] { };
        private List<SpecimenDTO> SpecimenMaster = new List<SpecimenDTO>();
        //private List<OrganismDTO> OrganismMaster = new List<OrganismDTO>();
        private List<AntibioticNameDTO> AntibioticMaster = new List<AntibioticNameDTO>();

        private SpecimenDTO ActiveSpcimen = new SpecimenDTO();
        private OrganismDTO ActiveOrganism = new OrganismDTO();
        private AntibioticDTO ActiveAntibiotic = new AntibioticDTO();
        private MasterTemplateDTO ActiveMasterTemplate = new MasterTemplateDTO();

        List<string> WardTypeMaster = new List<string> { "opd", "ipd", "icu" };
        //List<string> SpecimenMasteruu = new List<string> { "bl", "ur", "st", "sp" };
        private List<OrganismGroupDTO> OrganismGroupMaster = new List<OrganismGroupDTO>();
        List<string> OrgLabelName = new List<string>();
        List<string> AntiLabelName = new List<string>();
        private bool blnUpdate = false;

        IEnumerable<DataReport> enumData = new DataReport[] { };

        private enum eGraphFormat
        {
            Line = 1,
            Bar = 2,
            Pie = 3
        }

        private enum eSubGraph
        {
            Specimen = 1,
            Ward = 2,
            None = 0,
            NA = -1

        }

        private enum eSIRValue
        {
            S = 1,
            I = 2,
            R = 3
        }

        class DataReport
        {
            public string Year { get; set; }
            public double SIR { get; set; }
        }

        private Dictionary<string, IEnumerable<DataReport>> dictSeries = new Dictionary<string, IEnumerable<DataReport>>();
        private Dictionary<string, Dictionary<string, IEnumerable<DataReport>>> dictSubMain = new Dictionary<string, Dictionary<string, IEnumerable<DataReport>>>();
        private Dictionary<string, Dictionary<string, Dictionary<string, IEnumerable<DataReport>>>> dictDrugMain = new Dictionary<string, Dictionary<string, Dictionary<string, IEnumerable<DataReport>>>>();

        class clsOrganism
        {
            public string org_code { get; set; }
            public string org_name { get; set; }
        }

        class clsAntibiotic
        {
            public string anti_code { get; set; }
            public string anti_name { get; set; }
        }

        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            if (firstRender)
            {
                await mainLayout.GetLoginUser();

                //if (mainLayout.loginUser.CheckPagePermission(MENU_CODE) == false) navigationManager.NavigateTo("/NoPermissionPage");

                configData.ConfigDTOList = await configDataService.Get_TBConfig_DataList_Async(new TBConfigDTO() { tbc_mnu_code = MENU_CODE });

                var searchData = new HospitalLabDataDTO()
                {
                    arh_code = searchAMR.arh_code = mainLayout.loginUser.arh_code,
                    hos_code = searchAMR.hos_code = mainLayout.loginUser.hos_code,
                    prv_code = searchAMR.prv_code = mainLayout.loginUser.prv_code,
                };
                lab_ddl_List = await ddlDataService.GetAllLabListByModelAsync(searchData);

                ActiveMasterTemplate = await masterTemplateService.GetListByModelActiveAsync(new MasterTemplateSearchDTO());
                ActiveSpcimen.spc_mst_code = ActiveOrganism.org_mst_code = ActiveAntibiotic.ant_mst_code = ActiveMasterTemplate.mst_code;

                SpecimenMaster = await specimenService.GetListByModelActiveAsync(ActiveSpcimen);
                AntibioticMaster = await ReportService.GetAntibioticNameAsync();
                AntiLabelName = AntibioticMaster.Select(s => s.ant_name).Distinct().ToList();

                OrganismGroupMaster = await antihosp.GetOrganismGroupAsync();
                OrgLabelName = OrganismGroupMaster.Select(s => s.org_organism_label).Distinct().ToList();

                searchAMR.start_year = iYearFrom;
                searchAMR.end_year = iYearTo;

                blnLoadComplete = true;

            }
        }

        private async Task ClearGraph()
        {
            dictSeries.Clear();
            dictSubMain.Clear();
            dictDrugMain.Clear();

            blnLoadData = false;
            StateHasChanged();
        }

        private async Task ClearData()
        {
            iYearFrom = (DateTime.Today.Year - 5);
            iYearTo = DateTime.Today.Year;

            searchAMR.start_year = iYearFrom;
            searchAMR.end_year = iYearTo;

            multipleSelectedOrg = new string[] { };
            multipleSelectedAnti = new string[] { };

            selectedSubGraph = eSubGraph.None;
            selectedGraphFormat = eGraphFormat.Line;
            selectedSIRValue = eSIRValue.S;

            await ClearGraph();
        }

        async void ExportFile()
        {
            blnExportComplete = false;
            modelExport.start_year = searchAMR.start_year;
            modelExport.end_year = searchAMR.end_year;
            if (selectedSIRValue == eSIRValue.S)
            {
                modelExport.sir = "S";
            }
            else if (selectedSIRValue == eSIRValue.I)
            {
                modelExport.sir = "I";
            }
            else
            {
                modelExport.sir = "R";
            }
            modelExport.graph_format = (int)selectedGraphFormat;
            modelExport.sub_graph = (int)selectedSubGraph;
            modelExport.organism = multipleSelectedOrg;
            modelExport.antibiotic = multipleSelectedAnti;

            modelExport.hos_code = searchAMR.hos_code;
            var hos_select = lab_ddl_List.FirstOrDefault(x => x.hos_code == searchAMR.hos_code);
            modelExport.hos_name = hos_select.hos_name;
            modelExport.wardlist = multipleSelectedWardType;
            modelExport.specimenlist = multipleSelectedSpecimen;

            string OutputFileName = string.Format("{0}-{1}_{2}_{3}"
                                                , modelExport.start_year
                                                , modelExport.end_year
                                                , modelExport.hos_name
                                                , "AMRGraph.pdf");

            string statuscode = await ReportService.ExportGraphFileDataAsync(modelExport,"H",OutputFileName);
            if (statuscode == "OK")
            {

                string ServerFileName = "ANTIBIOTREND" + "/" + DateTime.Today.ToString("yyyyMMdd") + "/" + OutputFileName;
                string contentType = "application/pdf";

                await OIFileSave.DownloadFile(ServerFileName, OutputFileName, contentType);

            }
            else if (statuscode == "ERR_PATH")
            {
                await JSRuntime.InvokeAsync<object>("ShowAlert", "ไม่พบ Config PATH กรุณาติดต่อผู้ดูแลระบบ");
            }
            else
            {
                await JSRuntime.InvokeAsync<object>("ShowAlert", "File not Found");
            }
            blnExportComplete = true;
        }

        private async Task GraphResult()
        {

            if (string.IsNullOrEmpty(searchAMR.hos_code))
            {
                await JSRuntime.InvokeAsync<object>("ShowAlert", "Please Select โรงพยาบาล");
            }
            else if((multipleSelectedOrg.Count() == 0) || (multipleSelectedAnti.Count() == 0)){
                 await JSRuntime.InvokeAsync<object>("ShowAlert", "Please select Organism and Antibiotic");
            }
            else
            {
                if (iYearFrom != 0 && iYearTo != 0)
                {

                    blnLoadComplete = false;
                    await ClearGraph();

                    searchAMR.start_year = iYearFrom;
                    searchAMR.end_year = iYearTo;

                    // y-axis
                    if (selectedSIRValue == eSIRValue.S)
                    {
                        SIRText = "%S";
                        TitleChart = "Susceptibility of ";
                    }
                    else if (selectedSIRValue == eSIRValue.I)
                    {
                        SIRText = "%I";
                        TitleChart = "Intermediate of ";
                    }
                    else
                    {
                        SIRText = "%R";
                        TitleChart = "Resistance of ";
                    }

                  
                    // 1 or หลาย เชื้อ : 1 ยา >> series เชื้อ
                    if (multipleSelectedOrg.Count() > 0 && multipleSelectedAnti.Count() == 1)
                    {
                        DataReport dtReport = new DataReport { };
                        List<DataReport> EnumList = new List<DataReport>();
                        List<SP_AntimicrobialResistanceDTO> objAMRSearchResult;

                        dictSeries.Clear();
                        dictSeries = new Dictionary<string, IEnumerable<DataReport>>();
                        var antiName = AntibioticMaster.Find(f => f.ant_code == multipleSelectedAnti.FirstOrDefault()).ant_name;

                        if (selectedSubGraph == eSubGraph.None)
                        {
                            if (!blnUpdate)
                            {
                                AMRData = await ReportService.GetAMROverallByHospModelAsync(searchAMR);
                                LoadAMRData = selectedSubGraph;
                                blnUpdate = true;
                            }

                            //searchAMR.org_codes = string.Join(",", multipleSelectedOrg);
                            //searchAMR.anti_codes = string.Join(",", multipleSelectedAnti);

                            objAMRSearchResult = AMRData.Where(w => (w.year >= searchAMR.start_year && w.year <= searchAMR.end_year)
                                                   && (multipleSelectedOrg.Contains(w.org_name))
                                                   && (multipleSelectedAnti.Contains(w.anti_code))
                                                   ).OrderBy(o => o.org_code).ToList();

                            foreach (var objOrg in multipleSelectedOrg)
                            {
                                if (!dictSeries.ContainsKey(objOrg))
                                {
                                    EnumList = new List<DataReport>();
                                    for (var i = iYearFrom; i <= iYearTo; i++)
                                    {
                                        var newdata = new DataReport { Year = i.ToString(), SIR = 0 };
                                        EnumList.Add(newdata);
                                    }
                                    dictSeries.Add(objOrg, EnumList);
                                }
                            }

                            foreach (var obj in objAMRSearchResult)
                            {

                                var obe = dictSeries[obj.org_name].Where(w => w.Year == obj.year.ToString()).FirstOrDefault();
                                if (obe != null)
                                {
                                    if (selectedSIRValue == eSIRValue.S) { obe.SIR = obj.percent_s; }
                                    else if (selectedSIRValue == eSIRValue.I) { obe.SIR = obj.percent_i; }
                                    else { obe.SIR = obj.percent_r; }
                                }
                            }

                            var title = string.Join(" and ", multipleSelectedOrg);
                            chartName1 = multipleSelectedOrg.FirstOrDefault();
                            TitleChart = TitleChart + antiName;//+ " to " + title
                        }

                        // have sub graph
                        else
                        {
                            if (selectedSubGraph == eSubGraph.Specimen)
                            {

                                if (multipleSelectedSpecimen.Count() == 0)
                                {
                                    await JSRuntime.InvokeAsync<object>("ShowAlert", "Please Select at least 1 Specimen");
                                    goto EndPoint;
                                }

                                dictSeries.Clear();
                                dictSubMain.Clear();
                                dictSeries = new Dictionary<string, IEnumerable<DataReport>>();
                                dictSubMain = new Dictionary<string, Dictionary<string, IEnumerable<DataReport>>>();
                                List<SP_AntimicrobialResistanceDTO> objSpc = new List<SP_AntimicrobialResistanceDTO>();

                                if (!blnUpdate)
                                {
                                    AMRData = await ReportService.GetAMRSpecimenByHospModelAsync(searchAMR);
                                    LoadAMRData = selectedSubGraph;
                                    blnUpdate = true;
                                }
                                objAMRSearchResult = AMRData.Where(w => (w.year >= searchAMR.start_year && w.year <= searchAMR.end_year)
                                                       && (multipleSelectedOrg.Contains(w.org_name))
                                                       && (multipleSelectedAnti.Contains(w.anti_code))
                                                       ).OrderBy(o => o.org_code).ToList();

                                foreach (var orgn in multipleSelectedOrg)
                                {
                                    dictSeries = new Dictionary<string, IEnumerable<DataReport>>();
                                    var orgName = orgn;
                                    if (!dictSubMain.ContainsKey(orgName)) { dictSubMain.Add(orgName, dictSeries); }

                                    foreach (var spcCode in multipleSelectedSpecimen)
                                    {
                                        objSpc = objAMRSearchResult.Where(w => w.org_name == orgn
                                                                            && w.spc_code == spcCode
                                                                            ).ToList();

                                        chartName1 = orgn;
                                        EnumList = new List<DataReport>();
                                        for (var i = iYearFrom; i <= iYearTo; i++)
                                        {
                                            var newdata = new DataReport { Year = i.ToString(), SIR = 0 };
                                            EnumList.Add(newdata);
                                        }
                                        var spcName = SpecimenMaster.Find(t => t.spc_code == spcCode).spc_name;
                                        dictSeries.Add(spcName, EnumList);

                                        foreach (var obj in objSpc)
                                        {
                                            var obe = EnumList.Where(w => w.Year == obj.year.ToString()).FirstOrDefault();
                                            if (obe != null)
                                            {
                                                if (selectedSIRValue == eSIRValue.S) { obe.SIR = obj.percent_s; }
                                                else if (selectedSIRValue == eSIRValue.I) { obe.SIR = obj.percent_i; }
                                                else { obe.SIR = obj.percent_r; }
                                            }

                                        } // end objSpc1
                                    }
                                }

                                var SelectdAntiDesc = new List<string>();
                                foreach (var SelectedAntiCode in multipleSelectedAnti)
                                {
                                    var desc = AntibioticMaster.Find(t => t.ant_code == SelectedAntiCode);
                                    if (desc != null) { SelectdAntiDesc.Add(desc.ant_name); }
                                    else { SelectdAntiDesc.Add(SelectedAntiCode); }
                                }

                                var title = string.Format("{0} to {1} by Specimen", SelectdAntiDesc.FirstOrDefault(), string.Join(",", multipleSelectedOrg));
                                TitleChart = TitleChart + title;
                            } // end sub graph : specimen

                            if (selectedSubGraph == eSubGraph.Ward)
                            {
                                if (multipleSelectedWardType.Count() == 0)
                                {
                                    await JSRuntime.InvokeAsync<object>("ShowAlert", "Please Select at least 1 Ward Type");
                                    goto EndPoint;
                                }

                                dictSeries.Clear();
                                dictSubMain.Clear();
                                dictSeries = new Dictionary<string, IEnumerable<DataReport>>();
                                dictSubMain = new Dictionary<string, Dictionary<string, IEnumerable<DataReport>>>();
                                List<SP_AntimicrobialResistanceDTO> objWard = new List<SP_AntimicrobialResistanceDTO>();

                                if (!blnUpdate)
                                {
                                    AMRData = await ReportService.GetAMRWardTypeByHospModelAsync(searchAMR);
                                    LoadAMRData = selectedSubGraph;
                                    blnUpdate = true;
                                }
                                objAMRSearchResult = AMRData.Where(w => (w.year >= searchAMR.start_year && w.year <= searchAMR.end_year)
                                                       && (multipleSelectedOrg.Contains(w.org_name))
                                                       && (multipleSelectedAnti.Contains(w.anti_code))
                                                       ).OrderBy(o => o.org_code).ToList();
                                foreach (var orgn in multipleSelectedOrg)
                                {
                                    dictSeries = new Dictionary<string, IEnumerable<DataReport>>();
                                    var orgName = orgn;
                                    if (!dictSubMain.ContainsKey(orgName))
                                    {
                                        dictSubMain.Add(orgName, dictSeries);
                                    }

                                    foreach (var wardCode in multipleSelectedWardType)
                                    {
                                        objWard = objAMRSearchResult.Where(w => w.org_name == orgn
                                                                            && w.ward_type == wardCode
                                                                            ).ToList();

                                        chartName1 = orgn;
                                        EnumList = new List<DataReport>();
                                        for (var i = iYearFrom; i <= iYearTo; i++)
                                        {
                                            var newdata = new DataReport { Year = i.ToString(), SIR = 0 };
                                            EnumList.Add(newdata);
                                        }

                                        dictSeries.Add(wardCode, EnumList);

                                        foreach (var obj in objWard)
                                        {
                                            var obe = EnumList.Where(w => w.Year == obj.year.ToString()).FirstOrDefault();
                                            if (obe != null)
                                            {
                                                if (selectedSIRValue == eSIRValue.S) { obe.SIR = obj.percent_s; }
                                                else if (selectedSIRValue == eSIRValue.I) { obe.SIR = obj.percent_i; }
                                                else { obe.SIR = obj.percent_r; }
                                            }

                                        } // end objSpc1

                                    }
                                }

                                var SelectdAntiDesc = new List<string>();
                                foreach (var SelectedAntiCode in multipleSelectedAnti)
                                {
                                    var desc = AntibioticMaster.Find(t => t.ant_code == SelectedAntiCode);
                                    if (desc != null) { SelectdAntiDesc.Add(desc.ant_name); }
                                    else { SelectdAntiDesc.Add(SelectedAntiCode); }
                                }

                                var title = string.Format("{0} to {1} by Ward Type", SelectdAntiDesc.FirstOrDefault(), string.Join(",", multipleSelectedOrg));
                                TitleChart = TitleChart + title;
                            } // end sub graph : Ward Type
                        }
                    }

                    // 1 เชื้อ : หลาย ยา >> series ยา
                    else if (multipleSelectedOrg.Count() == 1 && multipleSelectedAnti.Count() > 1)
                    {

                        var orgName = multipleSelectedOrg.FirstOrDefault(); //OrganismGroupMaster.Find(f => f.organisms == multipleSelectedOrg.FirstOrDefault()).grp_organism_label;

                        List<SP_AntimicrobialResistanceDTO> objAMRSearchResult;

                        DataReport dtReport = new DataReport { };
                        List<DataReport> EnumList = new List<DataReport>();
                        dictSeries.Clear();
                        dictSeries = new Dictionary<string, IEnumerable<DataReport>>();

                        if (selectedSubGraph == eSubGraph.None)
                        {
                            if (!blnUpdate)
                            {
                                AMRData = await ReportService.GetAMROverallByHospModelAsync(searchAMR);
                                LoadAMRData = selectedSubGraph;
                                blnUpdate = true;
                            }

                            //searchAMR.org_codes = string.Join(",", multipleSelectedOrg);
                            //searchAMR.anti_codes = string.Join(",", multipleSelectedAnti);
                            objAMRSearchResult = AMRData.Where(w => (w.year >= searchAMR.start_year && w.year <= searchAMR.end_year)
                                                   && (multipleSelectedOrg.Contains(w.org_name))
                                                   && (multipleSelectedAnti.Contains(w.anti_code))
                                                   ).OrderBy(o => o.anti_code).ToList();

                            foreach (var objAntCode in multipleSelectedAnti)
                            {
                                var drugName = AntibioticMaster.Find(f => f.ant_code == objAntCode).ant_name;
                                if (!dictSeries.ContainsKey(drugName))
                                {
                                    EnumList = new List<DataReport>();
                                    for (var i = iYearFrom; i <= iYearTo; i++)
                                    {
                                        var newdata = new DataReport { Year = i.ToString(), SIR = 0 };
                                        EnumList.Add(newdata);
                                    }
                                    dictSeries.Add(drugName, EnumList);
                                }
                            }


                            foreach (var objAMR in objAMRSearchResult)
                            {
                                var obe = dictSeries[objAMR.anti_name.ToUpper()].Where(w => w.Year == objAMR.year.ToString()).FirstOrDefault();
                                if (obe != null)
                                {
                                    if (selectedSIRValue == eSIRValue.S) { obe.SIR = objAMR.percent_s; }
                                    else if (selectedSIRValue == eSIRValue.I) { obe.SIR = objAMR.percent_i; }
                                    else { obe.SIR = objAMR.percent_r; }
                                }
                            }

                            var title = string.Join(" and ", multipleSelectedOrg);
                            chartName1 = multipleSelectedOrg.FirstOrDefault();
                            TitleChart = TitleChart + title;
                        }

                        else
                        {
                            if (selectedSubGraph == eSubGraph.Specimen)
                            {

                                if (multipleSelectedSpecimen.Count() == 0)
                                {
                                    await JSRuntime.InvokeAsync<object>("ShowAlert", "Please Select at least 1 specimen");
                                    goto EndPoint;
                                }

                                dictSeries.Clear();
                                dictSubMain.Clear();
                                dictSeries = new Dictionary<string, IEnumerable<DataReport>>();
                                dictSubMain = new Dictionary<string, Dictionary<string, IEnumerable<DataReport>>>();
                                List<SP_AntimicrobialResistanceDTO> objSpc = new List<SP_AntimicrobialResistanceDTO>();

                                if (!blnUpdate)
                                {
                                    AMRData = await ReportService.GetAMRSpecimenByHospModelAsync(searchAMR);
                                    LoadAMRData = selectedSubGraph;
                                    blnUpdate = true;
                                }
                                //searchAMR.org_codes = string.Join(",", multipleSelectedOrg);
                                //searchAMR.anti_codes = string.Join(",", multipleSelectedAnti);
                                objAMRSearchResult = AMRData.Where(w => (w.year >= searchAMR.start_year && w.year <= searchAMR.end_year)
                                                  && (multipleSelectedOrg.Contains(w.org_name))
                                                  && (multipleSelectedAnti.Contains(w.anti_code))
                                                  ).OrderBy(o => o.anti_code).ToList();

                                foreach (var drug in multipleSelectedAnti)
                                {
                                    var drugName = AntibioticMaster.Find(f => f.ant_code == drug).ant_name;
                                    dictSeries = new Dictionary<string, IEnumerable<DataReport>>();
                                    if (!dictSubMain.ContainsKey(drugName))
                                    {
                                        dictSubMain.Add(drugName, dictSeries);
                                    }

                                    foreach (var spcCode in multipleSelectedSpecimen)
                                    {
                                        objSpc = objAMRSearchResult.Where(w => w.anti_code.ToUpper() == drug.ToUpper()
                                                                            && w.spc_code == spcCode
                                                                            ).ToList();

                                        chartName1 = drug;
                                        EnumList = new List<DataReport>();
                                        for (var i = iYearFrom; i <= iYearTo; i++)
                                        {
                                            var newdata = new DataReport { Year = i.ToString(), SIR = 0 };
                                            EnumList.Add(newdata);
                                        }
                                        var spcName = SpecimenMaster.Find(t => t.spc_code == spcCode).spc_name;
                                        dictSeries.Add(spcName, EnumList);

                                        foreach (var obj in objSpc)
                                        {
                                            var obe = EnumList.Where(w => w.Year == obj.year.ToString()).FirstOrDefault();
                                            if (obe != null)
                                            {
                                                if (selectedSIRValue == eSIRValue.S) { obe.SIR = obj.percent_s; }
                                                else if (selectedSIRValue == eSIRValue.I) { obe.SIR = obj.percent_i; }
                                                else { obe.SIR = obj.percent_r; }
                                            }

                                        } // end objSpc1
                                    }
                                }

                                var SelectdAntiDesc = new List<string>();
                                foreach (var SelectedAntiCode in multipleSelectedAnti)
                                {
                                    var desc = AntibioticMaster.Find(t => t.ant_code == SelectedAntiCode);
                                    if (desc != null) { SelectdAntiDesc.Add(desc.ant_name); }
                                    else { SelectdAntiDesc.Add(SelectedAntiCode); }
                                }

                                var title = string.Format("{0} to {1} by Specimen", multipleSelectedOrg.FirstOrDefault(), string.Join(",", SelectdAntiDesc));
                                TitleChart = TitleChart + title;
                            } // end sub graph : specimen

                            if (selectedSubGraph == eSubGraph.Ward)
                            {

                                if (multipleSelectedWardType.Count() == 0)
                                {
                                    await JSRuntime.InvokeAsync<object>("ShowAlert", "Please Select at least 1 Ward");
                                    goto EndPoint;
                                }

                                dictSeries.Clear();
                                dictSubMain.Clear();
                                dictSeries = new Dictionary<string, IEnumerable<DataReport>>();
                                dictSubMain = new Dictionary<string, Dictionary<string, IEnumerable<DataReport>>>();
                                List<SP_AntimicrobialResistanceDTO> objWard = new List<SP_AntimicrobialResistanceDTO>();

                                if (!blnUpdate)
                                {
                                    AMRData = await ReportService.GetAMRWardTypeByHospModelAsync(searchAMR);
                                    LoadAMRData = selectedSubGraph;
                                    blnUpdate = true;
                                }
                                objAMRSearchResult = AMRData.Where(w => (w.year >= searchAMR.start_year && w.year <= searchAMR.end_year)
                                                    && (multipleSelectedOrg.Contains(w.org_name))
                                                    && (multipleSelectedAnti.Contains(w.anti_code))
                                                    ).OrderBy(o => o.anti_code).ToList();

                                foreach (var drug in multipleSelectedAnti)
                                {
                                    var drugName = AntibioticMaster.Find(f => f.ant_code == drug).ant_name;
                                    dictSeries = new Dictionary<string, IEnumerable<DataReport>>();
                                    if (!dictSubMain.ContainsKey(drugName))
                                    {
                                        dictSubMain.Add(drugName, dictSeries);
                                    }

                                    foreach (var wardCode in multipleSelectedWardType)
                                    {
                                        objWard = objAMRSearchResult.Where(w => w.anti_code.ToUpper() == drug.ToUpper()
                                                                            && w.ward_type == wardCode
                                                                            ).ToList();

                                        chartName1 = drug;
                                        EnumList = new List<DataReport>();
                                        for (var i = iYearFrom; i <= iYearTo; i++)
                                        {
                                            var newdata = new DataReport { Year = i.ToString(), SIR = 0 };
                                            EnumList.Add(newdata);
                                        }

                                        dictSeries.Add(wardCode, EnumList);

                                        foreach (var obj in objWard)
                                        {
                                            var obe = EnumList.Where(w => w.Year == obj.year.ToString()).FirstOrDefault();
                                            if (obe != null)
                                            {
                                                if (selectedSIRValue == eSIRValue.S) { obe.SIR = obj.percent_s; }
                                                else if (selectedSIRValue == eSIRValue.I) { obe.SIR = obj.percent_i; }
                                                else { obe.SIR = obj.percent_r; }
                                            }

                                        } // end objSpc1
                                    }
                                }

                                var SelectdAntiDesc = new List<string>();
                                foreach (var SelectedAntiCode in multipleSelectedAnti)
                                {
                                    var desc = AntibioticMaster.Find(t => t.ant_code == SelectedAntiCode);
                                    if (desc != null) { SelectdAntiDesc.Add(desc.ant_name); }
                                    else { SelectdAntiDesc.Add(SelectedAntiCode); }
                                }

                                var title = string.Format("{0} to {1} by Ward Type", multipleSelectedOrg.FirstOrDefault(), string.Join(",", SelectdAntiDesc));
                                TitleChart = TitleChart + title;
                            } // end sub graph : Ward Type
                        }
                    }

                    // หลาย เชื้อ : หลาย ยา >> show series เชื้อ
                    else if (multipleSelectedOrg.Count() > 1 && multipleSelectedAnti.Count() > 1)
                    {

                        List<SP_AntimicrobialResistanceDTO> objAMRSearchResult;

                        dictSeries.Clear();
                        dictSeries = new Dictionary<string, IEnumerable<DataReport>>();
                        List<DataReport> EnumList = new List<DataReport>();
                        List<SP_AntimicrobialResistanceDTO> objOrg = new List<SP_AntimicrobialResistanceDTO>();
                        List<SP_AntimicrobialResistanceDTO> objSpc = new List<SP_AntimicrobialResistanceDTO>();
                        List<SP_AntimicrobialResistanceDTO> objWard = new List<SP_AntimicrobialResistanceDTO>();
                        // จำนวนกราฟ = จำนวนยา
                        if (selectedSubGraph == eSubGraph.None)
                        {

                            if (!blnUpdate)
                            {
                                AMRData = await ReportService.GetAMROverallByHospModelAsync(searchAMR);
                                LoadAMRData = selectedSubGraph;
                                blnUpdate = true;
                            }
                            //searchAMR.org_codes = string.Join(",", multipleSelectedOrg);
                            //searchAMR.anti_codes = string.Join(",", multipleSelectedAnti);
                            objAMRSearchResult = AMRData.Where(w => (w.year >= searchAMR.start_year && w.year <= searchAMR.end_year)
                                                   && (multipleSelectedOrg.Contains(w.org_name))
                                                   && (multipleSelectedAnti.Contains(w.anti_code))
                                                   ).OrderBy(o => o.org_code).ToList();

                            foreach (var drug in multipleSelectedAnti)
                            {
                                var drugName = AntibioticMaster.Find(f => f.ant_code.ToUpper() == drug.ToUpper()).ant_name;

                                objOrg = objAMRSearchResult.Where(w => w.anti_code.ToUpper() == drug.ToUpper()).ToList();
                                dictSeries = new Dictionary<string, IEnumerable<DataReport>>();

                                if (!dictSubMain.ContainsKey(drugName)) { dictSubMain.Add(drugName, dictSeries); }

                                foreach (var orgn in multipleSelectedOrg)
                                {
                                    EnumList = new List<DataReport>();
                                    for (var i = iYearFrom; i <= iYearTo; i++)
                                    {
                                        var newdata = new DataReport { Year = i.ToString(), SIR = 0 };
                                        EnumList.Add(newdata);
                                    }

                                    var objOO = objOrg.Where(w => w.org_name == orgn).ToList();

                                    foreach (var obj in objOO)
                                    {
                                        if (!dictSeries.ContainsKey(obj.org_name)) { dictSeries.Add(obj.org_name, EnumList); };

                                        var obe = EnumList.Where(w => w.Year == obj.year.ToString()).FirstOrDefault();
                                        if (obe != null)
                                        {
                                            if (selectedSIRValue == eSIRValue.S) { obe.SIR = obj.percent_s; }
                                            else if (selectedSIRValue == eSIRValue.I) { obe.SIR = obj.percent_i; }
                                            else { obe.SIR = obj.percent_r; }
                                        }
                                    }
                                }
                            }
                        }

                        // จำนวนกราฟ = จำนวนยา x จำนวนเชื้อ
                        if (selectedSubGraph == eSubGraph.Specimen)
                        {
                            if (multipleSelectedSpecimen.Count() == 0)
                            {
                                await JSRuntime.InvokeAsync<object>("ShowAlert", "Please Select at least 1 specimen");
                                goto EndPoint;
                            }

                            if (!blnUpdate)
                            {
                                AMRData = await ReportService.GetAMRSpecimenByHospModelAsync(searchAMR);
                                LoadAMRData = selectedSubGraph;
                                blnUpdate = true;
                            }
                            objAMRSearchResult = AMRData.Where(w => (w.year >= searchAMR.start_year && w.year <= searchAMR.end_year)
                                                   && (multipleSelectedOrg.Contains(w.org_name))
                                                   && (multipleSelectedAnti.Contains(w.anti_code))
                                                   ).OrderBy(o => o.org_code).ToList();

                            foreach (var drug in multipleSelectedAnti)
                            {
                                objOrg = objAMRSearchResult.Where(w => w.anti_code.ToUpper() == drug.ToUpper()).ToList();
                                dictSubMain = new Dictionary<string, Dictionary<string, IEnumerable<DataReport>>>();

                                var drugName = AntibioticMaster.Find(f => f.ant_code == drug).ant_name;
                                if (!dictDrugMain.ContainsKey(drugName)) { dictDrugMain.Add(drugName, dictSubMain); }

                                foreach (var orgn in multipleSelectedOrg)
                                {
                                    dictSeries = new Dictionary<string, IEnumerable<DataReport>>();
                                    var orgName = orgn;//OrganismGroupMaster.Find(f => f.organisms == orgn).grp_organism_label;
                                    if (!dictSubMain.ContainsKey(orgName)) { dictSubMain.Add(orgName, dictSeries); }

                                    foreach (var spcCode in multipleSelectedSpecimen)
                                    {
                                        objSpc = objOrg.Where(w => w.spc_code == spcCode && w.org_name == orgn
                                                               ).ToList();

                                        EnumList = new List<DataReport>();
                                        for (var i = iYearFrom; i <= iYearTo; i++)
                                        {
                                            var newdata = new DataReport { Year = i.ToString(), SIR = 0 };
                                            EnumList.Add(newdata);
                                        }
                                        var spcName = SpecimenMaster.Find(t => t.spc_code == spcCode).spc_name;
                                        dictSeries.Add(spcName, EnumList);

                                        foreach (var obj in objSpc)
                                        {
                                            if (!dictSeries.ContainsKey(spcName))
                                            {
                                                var obe = EnumList.Where(w => w.Year == obj.year.ToString()).FirstOrDefault();
                                                if (obe != null)
                                                {
                                                    if (selectedSIRValue == eSIRValue.S) { obe.SIR = obj.percent_s; }
                                                    else if (selectedSIRValue == eSIRValue.I) { obe.SIR = obj.percent_i; }
                                                    else { obe.SIR = obj.percent_r; }
                                                }
                                            }

                                            else
                                            {
                                                var obe = EnumList.Where(w => w.Year == obj.year.ToString()).FirstOrDefault();
                                                if (obe != null)
                                                {
                                                    if (selectedSIRValue == eSIRValue.S) { obe.SIR = obj.percent_s; }
                                                    else if (selectedSIRValue == eSIRValue.I) { obe.SIR = obj.percent_i; }
                                                    else { obe.SIR = obj.percent_r; }
                                                }
                                            }

                                        }

                                    }
                                }
                            }
                        }
                        // จำนวนกราฟ = จำนวนยา x จำนวนเชื้อ
                        if (selectedSubGraph == eSubGraph.Ward)
                        {
                            if (multipleSelectedWardType.Count() == 0)
                            {
                                await JSRuntime.InvokeAsync<object>("ShowAlert", "Please Select at least 1 ward");
                                goto EndPoint;
                            }

                            if (!blnUpdate)
                            {
                                AMRData = await ReportService.GetAMRWardTypeByHospModelAsync(searchAMR);
                                LoadAMRData = selectedSubGraph;
                                blnUpdate = true;

                            }
                            objAMRSearchResult = AMRData.Where(w => (w.year >= searchAMR.start_year && w.year <= searchAMR.end_year)
                                                   && (multipleSelectedOrg.Contains(w.org_name))
                                                   && (multipleSelectedAnti.Contains(w.anti_code))
                                                   ).OrderBy(o => o.org_code).ToList();

                            foreach (var drug in multipleSelectedAnti)
                            {
                                objOrg = objAMRSearchResult.Where(w => w.anti_code.ToUpper() == drug.ToUpper()).ToList();
                                dictSubMain = new Dictionary<string, Dictionary<string, IEnumerable<DataReport>>>();

                                var drugName = AntibioticMaster.Find(f => f.ant_code == drug).ant_name;
                                if (!dictDrugMain.ContainsKey(drugName))
                                {
                                    dictDrugMain.Add(drugName, dictSubMain);
                                }

                                foreach (var orgn in multipleSelectedOrg)
                                {
                                    dictSeries = new Dictionary<string, IEnumerable<DataReport>>();
                                    var orgName = orgn;//OrganismGroupMaster.Find(f => f.organisms == orgn).grp_organism_label;
                                    if (!dictSubMain.ContainsKey(orgName)) { dictSubMain.Add(orgName, dictSeries); }

                                    foreach (var wardCode in multipleSelectedWardType)
                                    {
                                        objWard = objOrg.Where(w => w.ward_type == wardCode && w.org_name == orgn
                                                               ).ToList();

                                        EnumList = new List<DataReport>();
                                        for (var i = iYearFrom; i <= iYearTo; i++)
                                        {
                                            var newdata = new DataReport { Year = i.ToString(), SIR = 0 };
                                            EnumList.Add(newdata);
                                        }

                                        dictSeries.Add(wardCode, EnumList);

                                        foreach (var obj in objWard)
                                        {
                                            if (!dictSeries.ContainsKey(wardCode))
                                            {
                                                var obe = EnumList.Where(w => w.Year == obj.year.ToString()).FirstOrDefault();
                                                if (obe != null)
                                                {
                                                    if (selectedSIRValue == eSIRValue.S) { obe.SIR = obj.percent_s; }
                                                    else if (selectedSIRValue == eSIRValue.I) { obe.SIR = obj.percent_i; }
                                                    else { obe.SIR = obj.percent_r; }
                                                }
                                            }

                                            else
                                            {
                                                var obe = EnumList.Where(w => w.Year == obj.year.ToString()).FirstOrDefault();
                                                if (obe != null)
                                                {
                                                    if (selectedSIRValue == eSIRValue.S) { obe.SIR = obj.percent_s; }
                                                    else if (selectedSIRValue == eSIRValue.I) { obe.SIR = obj.percent_i; }
                                                    else { obe.SIR = obj.percent_r; }
                                                }
                                            }

                                        }

                                    }
                                }
                            }
                        }

                        var SelectdAntiDesc = new List<string>();
                        foreach (var SelectedAntiCode in multipleSelectedAnti)
                        {
                            var desc = AntibioticMaster.Find(t => t.ant_code == SelectedAntiCode);
                            if (desc != null) { SelectdAntiDesc.Add(desc.ant_name); }
                            else { SelectdAntiDesc.Add(SelectedAntiCode); }
                        }

                        var title = string.Format("{0} to {1}", string.Join(",", multipleSelectedOrg), string.Join(",", SelectdAntiDesc));
                        TitleChart = TitleChart + title;
                    }

                    EndPoint:
                    blnLoadData = true;
                    blnLoadComplete = true;

                }
            }

        } // end GraphResult

        string FormatValue(object value)
        {
            return String.Format("{0:0.00}%", (double)value);
        }

        private async Task ChangeSubGraph()
        {
            if (selectedSubGraph == eSubGraph.Specimen)
            {
                multipleSelectedWardType = Enumerable.Empty<string>();
            }
            else if (selectedSubGraph == eSubGraph.Ward)
            {
                multipleSelectedSpecimen = Enumerable.Empty<string>();
            }
            else if (selectedSubGraph == eSubGraph.None || selectedSubGraph == eSubGraph.NA)
            {
                multipleSelectedSpecimen = Enumerable.Empty<string>();
                multipleSelectedWardType = Enumerable.Empty<string>();
            }
            blnUpdate = false;
            StateHasChanged();
        }

        private void DDL_Change(string ddl_name, object value)
        {
            if (ddl_name == "Arh" && value == null)
            {
                searchAMR.prv_code = null;
                searchAMR.hos_code = null;
            }
            else if (ddl_name == "Prv" && value == null)
            {
                searchAMR.hos_code = null;
            }
            else if (ddl_name == "Prv" && value != null)
            {
                var prv_select = lab_ddl_List.FirstOrDefault(x => x.prv_code == value.ToString());

                searchAMR.arh_code = prv_select.arh_code;
            }
            else if (ddl_name == "Hos" && value == null)
            {
                //searchModel.mps_lab = null;
            }
            else if (ddl_name == "Hos" && value != null)
            {
                var hos_select = lab_ddl_List.FirstOrDefault(x => x.hos_code == value.ToString());

                searchAMR.prv_code = hos_select.prv_code;
                searchAMR.arh_code = hos_select.arh_code;
            }

            StateHasChanged();
        }
    

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private DropDownListDataService ddlDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ColumnConfigService columnConfigService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ReportService antihosp { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private MasterTemplateService masterTemplateService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IFileSave OIFileSave { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private SpecimenService specimenService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AntibioticService antibioticService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private OrganismService organismService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ConfigDataService configDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AMPService ReportService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
    }
}
#pragma warning restore 1591
