// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace ALISS.Pages.P1_Upload
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using System.Text.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using System.Security.Claims;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.HttpOverrides;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using Blazored;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using Blazored.Menu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using BlazorDownloadFile;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.Account;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.DropDownList.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.LoginManagement.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Master.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Process.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.AUTH.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 32 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.MasterManagement.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 33 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.UserManagement.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 34 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.HISUpload.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 35 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.ANTIBIOGRAM.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 36 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.ANTIBIOTREND.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 37 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.GLASS.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 39 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D0_Master;

#line default
#line hidden
#nullable disable
#nullable restore
#line 41 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D3_Process;

#line default
#line hidden
#nullable disable
#nullable restore
#line 42 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D4_UserManagement.AUTH;

#line default
#line hidden
#nullable disable
#nullable restore
#line 43 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D4_UserManagement.MasterManagement;

#line default
#line hidden
#nullable disable
#nullable restore
#line 44 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D4_UserManagement.UserManagement;

#line default
#line hidden
#nullable disable
#nullable restore
#line 46 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D5_HISData;

#line default
#line hidden
#nullable disable
#nullable restore
#line 47 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D6_Report.Antibiogram;

#line default
#line hidden
#nullable disable
#nullable restore
#line 48 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D6_Report.Antibiotrend;

#line default
#line hidden
#nullable disable
#nullable restore
#line 49 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D6_Report.Glass;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\Pages\P1_Upload\LabFileUpload.razor"
using ALISS.Data.D1_Upload;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\Pages\P1_Upload\LabFileUpload.razor"
using ALISS.Data.D2_Mapping;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\Pages\P1_Upload\LabFileUpload.razor"
using ALISS.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\Pages\P1_Upload\LabFileUpload.razor"
using ALISS.LabFileUpload.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\Pages\P1_Upload\LabFileUpload.razor"
using ALISS.Mapping.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\Pages\P1_Upload\LabFileUpload.razor"
using System.IO;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/LabFileUpload")]
    public partial class LabFileUpload : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 477 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\Pages\P1_Upload\LabFileUpload.razor"
       
    [CascadingParameter] MainLayout mainLayout { get; set; }

    private ConfigData configData = new ConfigData();

    private string classLabel = "col-4";
    private string classInput = "col-8";

    private RadzenGridCustom<LabFileUploadDataDTO> inboxGrid = new RadzenGridCustom<LabFileUploadDataDTO>();
    private List<DropDownListDTO> rol_List;
    private List<DropDownListDTO> lab_List = new List<DropDownListDTO>();

    private bool showModal = false;
    private bool ShowUploadEntryPopup = false;
    private bool ShowUploadLabPopup = false;
    //private bool checkDataYear { get { return ((_isAntibioticField != true) || (objWHONetMapping.wnm_antibioticcolumn != null)); } }

    private List<LabFileUploadDataDTO> gridDatas;
    IList<string> selectedLabFileUploads;

    LoginUserRolePermissionDTO permission;
    //IFileListEntry selectedFiles;
    private IBrowserFile selectedFiles;

    string LargeUploadMessage = "";
    long UploadedBytes;
    long TotalBytes;

    LabFileUploadSearchDTO searchModel = new LabFileUploadSearchDTO();
    LabFileUploadDataDTO LabFileData = new LabFileUploadDataDTO();

    private List<HospitalLabDataDTO> lab_ddl_List;
    private List<ParameterDTO> ParameterList;

    clsFileType[] mlabFileType = new clsFileType[]
    {
        new clsFileType
        {
            mFileType = eMLABFileType.DISK,
            FileTypeLabel = "DISK",
            FileTypeValue = clsLabFileType.MLAB_FileType.DISK
        },
        new clsFileType
        {
            mFileType = eMLABFileType.MIC,
            FileTypeLabel = "MIC",
            FileTypeValue = clsLabFileType.MLAB_FileType.MIC
        },
        new clsFileType
        {
            mFileType = eMLABFileType.ETEST,
            FileTypeLabel = "ETEST(OM)",
            FileTypeValue = clsLabFileType.MLAB_FileType.ETEST
        }
    //new clsFileType
    //{
    //    mFileType = eMLABFileType.DISK_MIC,
    //    FileTypeLabel = "DISK(ตัวเลข) + MIC(SIR)",
    //    FileTypeValue = clsLabFileType.MLAB_FileType.DISK_NUM_MIC_SIR
    //},
    //new clsFileType
    //{
    //    mFileType = eMLABFileType.DISK_MIC,
    //    FileTypeLabel = "DISK(SIR) + MIC(ตัวเลข)",
    //    FileTypeValue = clsLabFileType.MLAB_FileType.DISK_SIR_MIC_NUM
    //}
    };

    private enum eMLABFileType
    {
        DISK = 1,
        MIC = 2,
        ETEST = 3,
        //DISK_MIC = 4
    }

    private class clsFileType
    {
        public eMLABFileType mFileType { get; set; }
        public string FileTypeLabel { get; set; }
        public string FileTypeValue { get; set; }
    }

    //string[] filetype = new[]
    //{
    //            "DISK",
    //            "MIC",
    //            "ETEST",
    //            "ALL(DISK+MIC)"
    // };

    string[] programs = new[]
         {
                "MLAB",
                "WHONET",
                "OTHER"
    };

    private static class LabTypes
    {
        public const string Lab = "Lab";
        public const string HIS = "HIS";
        public const string STARS = "STARS";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await mainLayout.GetLoginUser();

            if (mainLayout.loginUser.CheckPagePermission("MNU_0402") == false) navigationManager.NavigateTo("/NoPermissionPage");

            configData.ConfigDTOList = await configDataService.Get_TBConfig_DataList_Async(new TBConfigDTO() { tbc_mnu_code = "MNU_0402" });

            var searchData = new HospitalLabDataDTO()
            {
                arh_code = searchModel.lfu_Area = mainLayout.loginUser.arh_code,
                prv_code = searchModel.lfu_Province = mainLayout.loginUser.prv_code,
                hos_code = LabFileData.lfu_hos_code = searchModel.lfu_Hos = mainLayout.loginUser.hos_code,
                lab_code = LabFileData.lfu_lab = searchModel.lfu_lab = mainLayout.loginUser.lab_code
            };


            lab_ddl_List = await ddlDataService.GetAllLabListByModelAsync(searchData);
            rol_List = await ddlDataService.GetRoleListByModelAsync();
            ParameterList = await ddlDataService.GetParameterListByModelAsync(new ParameterDTO() { prm_code_major = "UPLOAD_STARS" });


            gridDatas = await labFileUploadservice.GetLabFileUploadListByModelAsync(searchModel);
        }
    }

    private async void ClearInboxData()
    {
        searchModel.lfu_Area = null;
        searchModel.lfu_Hos = null;
        searchModel.lfu_Province = null;
        searchModel.lfu_lab = null;
        selectedLabFileUploads = null;
        SearchData();
    }

    private async void SearchData()
    {
        showModal = true;

        gridDatas = await labFileUploadservice.GetLabFileUploadListByModelAsync(searchModel);

        if (inboxGrid.radzenGrid != null) inboxGrid.radzenGrid.GoToPage(0);
        showModal = false;
        StateHasChanged();
    }

    private void DDL_Change(string ddl_name, object value)
    {
        if (ddl_name == "Arh" && value == null)
        {
            searchModel.lfu_Province = null;
            searchModel.lfu_Hos = null;
            searchModel.lfu_lab = null;
            LabFileData.lfu_lab = null;
        }
        else if (ddl_name == "Prv" && value == null)
        {
            searchModel.lfu_Hos = null;
            searchModel.lfu_lab = null;
            LabFileData.lfu_lab = null;
        }
        else if (ddl_name == "Prv" && value != null)
        {
            var prv_select = lab_ddl_List.FirstOrDefault(x => x.prv_code == value.ToString());

            searchModel.lfu_Area = prv_select.arh_code;
        }
        else if (ddl_name == "Hos" && value == null)
        {
            searchModel.lfu_lab = null;
            LabFileData.lfu_lab = null;
            LabFileData.lfu_hos_code = null;
        }
        else if (ddl_name == "Hos" && value != null)
        {
            var hos_select = lab_ddl_List.FirstOrDefault(x => x.hos_code == value.ToString());

            searchModel.lfu_Province = hos_select.prv_code;
            searchModel.lfu_Area = hos_select.arh_code;
            searchModel.lfu_lab = null;
            LabFileData.lfu_hos_code = hos_select.hos_code;
        }
        else if (ddl_name == "Lab" && value != null)
        {
            LabFileData.lfu_lab = searchModel.lfu_lab;
        }
        else if (ddl_name == "Lab" && value == null)
        {

            LabFileData.lfu_lab = null;
        }
        else if (ddl_name == "Program" && value != null)
        {
            LabFileData.lfu_FileType = "FileType";
        }
        StateHasChanged();
    }


    async Task ControlPopup(string type, bool control)
    {
        if (type == "UploadEntry")
        {
            ShowUploadEntryPopup = control;
            LabFileData.lfu_DataYear = DateTime.Now.Year;

            if (control == false)
            {
                selectedFiles = null;
                LabFileData.lfu_Program = null;
                LabFileData.lfu_FileType = null;
            }
        }
        else if (type == "UploadLab")
        {
            ShowUploadLabPopup = control;
            if (control)
                LabFileData.lfu_TestType = LabTypes.Lab;
        }
    }

    async Task ValidateFile()
    {
        string confirmMessage = "";
        confirmMessage = "Confirm upload data." + "\n" + " File Name: " + selectedFiles.Name + "\n" + " Program: " + LabFileData.lfu_Program + "\n";

        if (LabFileData.lfu_Program == "MLAB")
            confirmMessage += " File Type: " + LabFileData.lfu_FileType;



        var result = await jsRuntime.InvokeAsync<bool>("ShowConfirm", confirmMessage);
        if (result == false)
        {
            return;
        }

        showModal = true;
        MasterTemplateSearchDTO searchMasterTemplate = new MasterTemplateSearchDTO();
        MappingDataDTO mappingSearch = new MappingDataDTO();
        mappingSearch.mp_hos_code = LabFileData.lfu_hos_code;
        mappingSearch.mp_lab = LabFileData.lfu_lab;
        mappingSearch.mp_program = LabFileData.lfu_Program;
        mappingSearch.mp_filetype = LabFileData.lfu_FileType;

        if (LabFileData.lfu_Program == "MLAB")
        {
            mappingSearch = new MappingDataDTO();
            mappingSearch.mp_hos_code = LabFileData.lfu_hos_code;

            List<ParameterDTO> parameterDTO = new List<ParameterDTO>();
            parameterDTO = await ddlDataService.GetParameterListByModelAsync(new ParameterDTO() { prm_code_major = "MLAB_MAPPING_TEMPLATE" });
            mappingSearch.mp_id = Guid.Parse(parameterDTO.FirstOrDefault(x => x.prm_code_minor == "mp_id").prm_value);
        }
        else
        {
            mappingSearch.mp_filetype = null;
        }

        var MappingTemplate = new MappingDataDTO();
        MasterTemplateDTO ActiveMasterTemplate = await masterTemplateService.GetListByModelActiveAsync(searchMasterTemplate);

        if (LabFileData.lfu_Program != "MLAB")
        {
            MappingTemplate = await mappingservice.GetMappingDataActiveWithModelAsync(mappingSearch);

            if (MappingTemplate.mp_id == Guid.Empty)
            {
                await jsRuntime.InvokeAsync<object>("ShowAlert", "ไม่พบ Mapping Template สำหรับใช้ในการ Upload File");
                showModal = false;
                return;
            }

            if (ActiveMasterTemplate == null)
            {
                await jsRuntime.InvokeAsync<object>("ShowAlert", "ไม่พบ Master Template ที่มีสถานะเป็น Active (กรุณาติดต่อผู้ดูแลระบบ)");
                showModal = false;
                return;
            }
            //if (MappingTemplate.mp_mst_code != ActiveMasterTemplate.mst_code)
            //{
            //    await jsRuntime.InvokeAsync<object>("ShowAlert", "กรุณาติดต่อผู้ดูแลระบบเนื่องจาก Master Template (" + MappingTemplate.mp_mst_code + ") ไม่ตรงกับ Version ปัจจุบัน (" + ActiveMasterTemplate.mst_code + ")");
            //    showModal = false;
            //    return;
            //}
        }
        else
        {

            MappingTemplate = await mappingservice.GetMappingDataAsync(mappingSearch.mp_id.ToString());

            if (ActiveMasterTemplate == null)
            {
                await jsRuntime.InvokeAsync<object>("ShowAlert", "ไม่พบ Master Template ที่มีสถานะเป็น Active (กรุณาติดต่อผู้ดูแลระบบ)");
                showModal = false;
                return;
            }
            //if (MappingTemplate.mp_mst_code != ActiveMasterTemplate.mst_code)
            //{
            //    await jsRuntime.InvokeAsync<object>("ShowAlert", "กรุณาติดต่อผู้ดูแลระบบเนื่องจาก MLAB Master Template (" + MappingTemplate.mp_mst_code + ") ไม่ตรงกับ Version ปัจจุบัน (" + ActiveMasterTemplate.mst_code + ")");
            //    showModal = false;
            //    return;
            //}
        }


        string str_CurrentDate = DateTime.Now.ToString("yyyyMMdd");

        string filepath = await fileUploadservice.GetPath();
        filepath = Path.Combine(filepath, str_CurrentDate, mappingSearch.mp_hos_code);
        bool exists = System.IO.Directory.Exists(filepath);

        if (!exists)
            System.IO.Directory.CreateDirectory(filepath);

        var filename = Path.Combine(filepath, selectedFiles.Name);

        UploadedBytes = 0;

        TotalBytes = selectedFiles.Size;

        long percent = 0;
        long chunckSize = 400000;
        long numChunks = TotalBytes / chunckSize;
        long remainder = TotalBytes % chunckSize;

        //string justFileName = Path.GetFileNameWithoutExtension(e.File.Name);
        //string extension = Path.GetExtension(e.File.Name);
        //string newFileNameWithOutPath = $"{justFileName}-{DateTime.Now.Ticks.ToString()}{extension}";
        //string fileuploadname = $"{Environment.CurrentDirectory}\\Files\\{newFileNameWithOutPath}";

        if (File.Exists(filename)) File.Delete(filename);

        using (var inStream = selectedFiles.OpenReadStream(long.MaxValue))
        {
            using (var outStream = File.OpenWrite(filename))
            {
                for (int i = 0; i < numChunks; i++)
                {
                    var buffer = new byte[chunckSize];
                    await inStream.ReadAsync(buffer, 0, buffer.Length);

                    await outStream.WriteAsync(buffer, 0, buffer.Length);

                    UploadedBytes += chunckSize;

                    percent = UploadedBytes * 100 / TotalBytes;

                    LargeUploadMessage = $"กำลังอัปโหลดไฟล์ {percent}%";

                    await InvokeAsync(StateHasChanged);
                }

                if (remainder > 0)
                {
                    var buffer = new byte[remainder];
                    await inStream.ReadAsync(buffer, 0, buffer.Length);

                    await outStream.WriteAsync(buffer, 0, buffer.Length);

                    UploadedBytes += remainder;

                    percent = UploadedBytes * 100 / TotalBytes;

                    LargeUploadMessage = $"กำลังอัปโหลดไฟล์ {percent}%";

                    await InvokeAsync(StateHasChanged);
                }
            }
        }

        LargeUploadMessage = "กำลังตรวจสอบไฟล์ ...";
        await InvokeAsync(StateHasChanged);

        var chkValidate = await fileUploadservice.ValidateLabFileAsync(filepath, selectedFiles.Name, MappingTemplate, LabFileData.lfu_FileType);

        LargeUploadMessage = "อัปโหลดเรียบร้อยแล้ว";
        await InvokeAsync(StateHasChanged);
        int totalRec = 0;
        if (chkValidate != null)
        {
            string ErrorMessage = "";
            foreach (LabFileUploadErrorMessageDTO item in chkValidate)
            {
                if (item.lfu_status == 'I' && item.lfu_Err_Column == "Total")
                {
                    Int32.TryParse(item.lfu_Err_Message, out totalRec);
                    ////ErrorMessage += "Total Record(s) = " + totalRec + "\n";
                    ErrorMessage += "Total Record(s) = " + String.Format("{0:n0}", totalRec) + "\n";
                }
                else if (item.lfu_status == 'E')
                    ErrorMessage += "- " + item.lfu_Err_Message + "\n";
            }

            await jsRuntime.InvokeAsync<object>("ShowAlert", ErrorMessage);
        }

        var chkError = chkValidate.FirstOrDefault(x => x.lfu_status == 'E');

        if (chkError == null)
        {
            var path = chkValidate.FirstOrDefault(x => x.lfu_status == 'I' && x.lfu_Err_Column == "path").lfu_Err_Message;
            await UploadFile(MappingTemplate.mp_id, MappingTemplate.mp_version, totalRec, path);
            await ControlPopup("UploadEntry", false);
            showModal = false;

            SearchData();
            StateHasChanged();

        }
        else
        {
            showModal = false;
            return;
        }

        UploadedBytes = 0;
        TotalBytes = 0;
        LargeUploadMessage = "";

    }

    void ValidateLab(){
        if (LabFileData.lfu_TestType == LabTypes.STARS)
            LabFileData.lfu_Program = "MLAB";
        if (LabFileData.lfu_TestType == LabTypes.HIS)
        {
            LabFileData.lfu_Program = "HIS";
            LabFileData.lfu_FileType = "HIS";
        }
        ControlPopup("UploadLab", false);
        ControlPopup("UploadEntry", true);
    }

    async Task UploadFile(Guid mp_id, Decimal mp_version, int TotalRec, string path)
    {

        LabFileUploadDataDTO LabFileUpload = new LabFileUploadDataDTO();

        LabFileUpload.lfu_mp_id = mp_id;
        LabFileUpload.lfu_mp_version = mp_version;
        LabFileUpload.lfu_hos_code = LabFileData.lfu_hos_code;
        LabFileUpload.lfu_lab = LabFileData.lfu_lab;
        LabFileUpload.lfu_Program = LabFileData.lfu_Program;
        LabFileUpload.lfu_Path = path;
        LabFileUpload.lfu_DataYear = LabFileData.lfu_DataYear;
        LabFileUpload.lfu_FileName = selectedFiles.Name;
        LabFileUpload.lfu_TotalRecord = TotalRec;
        LabFileUpload.lfu_FileType = LabFileData.lfu_FileType;
        LabFileUpload.lfu_createuser = mainLayout.loginUser.Username;
        LabFileUpload.lfu_updateuser = mainLayout.loginUser.Username;
        LabFileUpload.lfu_FileTypeLabel = LabFileData.lfu_FileTypeLabel;
        LabFileUpload.lfu_TestType = LabFileData.lfu_TestType;

        var x = await fileUploadservice.UploadFileAsync(LabFileUpload);

    }

    async Task ShowUploadEntryDialog()
    {
        ControlPopup("UploadLab", true);
    }

    //async Task HandleFileSelection(IFileListEntry[] files)
    //{
    //    selectedFiles = files.FirstOrDefault();

    //    var type = Path.GetExtension(selectedFiles.Name);
    //    if (type != ".xlsx" && type != ".xls" && type != ".csv" && type != ".txt")
    //    {
    //        if (selectedFiles.Type != "")
    //        {
    //            await jsRuntime.InvokeAsync<object>("ShowAlert", "ไม่สามารถ Upload ไฟล์ " + selectedFiles.Name);
    //            selectedFiles = null;
    //            return;
    //        }
    //    }
    //}

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        //browserFile = e.File;
        //DebugOutput.Add($"Our file is {e.File.Size} bytes long.");

        selectedFiles = e.File;

        var type = Path.GetExtension(selectedFiles.Name);
        //if (type != ".xlsx" && type != ".xls" && type != ".csv" && type != ".txt" && type != ".DBF")
        //{
        //    await jsRuntime.InvokeAsync<object>("ShowAlert", "ไม่สามารถ Upload ไฟล์ประเภท " + type + "ได้ (ระบบรองรับ .xlsx .xls .csv .txt .DBF เท่านั้น)");
        //    selectedFiles = null;
        //    return;
        //}

        long maxFileSize = 1024L; // 1KB
        maxFileSize *= 1024L; // 1MB
        maxFileSize *= 512L; // 0.5GB

        if (selectedFiles.Size > maxFileSize)
        {
            await jsRuntime.InvokeAsync<object>("ShowAlert", "ไม่สามารถ Upload ไฟล์ ขนาดมากกว่า 500MB ได้");
            selectedFiles = null;
            return;
        }
    }


    void OnRowSeleted()
    {
    }

    void OnGridRowSelected(LabFileUploadDataDTO lab)
    {
        selectedLabFileUploads = selectedLabFileUploads ?? new List<string>();
        if ((lab.lfu_status == 'E' || lab.lfu_status == 'N' || lab.lfu_status == 'P' || lab.lfu_status == 'M' || lab.lfu_status == 'Q' || lab.lfu_status == 'F') && !selectedLabFileUploads.Contains(lab.lfu_id.ToString()))
            selectedLabFileUploads.Add(lab.lfu_id.ToString());
        else if (selectedLabFileUploads.Contains(lab.lfu_id.ToString()))
            selectedLabFileUploads.Remove(lab.lfu_id.ToString());
    }

    async Task OpenLabFileUploadDetail(string id)
    {

        navigationManager.NavigateTo("LabFileUploadDetail/" + id);

    }

    private async Task NavigateToDownloadFile(LabFileUploadDataDTO lab)
    {
        //var urlPath = new Uri(configDataService.Get_AppSetting("LabFileUpload"));
        //var filePath = lab.lfu_Path.Split('\\');

        //var fullname = new Uri(urlPath, (filePath[(filePath.Length - 3)] + "/" + filePath[(filePath.Length - 2)] + "/" + filePath[(filePath.Length - 1)]));

        //await jsRuntime.InvokeAsync<object>("open", fullname, "_blank");
        var FullPath = lab.lfu_Path;
        if (File.Exists(FullPath))
        {
            byte[] bytes = File.ReadAllBytes(FullPath);
            await downloadService.DownloadFile(lab.lfu_FileName, bytes, "application/octet-stream");
        }
        else
        {
            await jsRuntime.InvokeAsync<object>("ShowAlert", "File not Found");
        }


    }
    void OnChange(object value)
    {
        if (value.ToString() == "MIC")
        {
            LabFileData.lfu_FileTypeLabel = "MIC";
        }
        else
        {
            LabFileData.lfu_FileTypeLabel = "";
        }
    }

    private async Task GenerateExcelMappingError()
    {
        if (selectedLabFileUploads == null || selectedLabFileUploads.Count == 0)
        {
            await jsRuntime.InvokeAsync<object>("ShowAlert", "Please select data!");
            return;
        }

        var filterFDatas = gridDatas.Where(x => selectedLabFileUploads.Any(s => s.Contains(x.lfu_id.ToString())));
        if (filterFDatas.Where(x => x.lfu_status != 'E').Count() > 0)
        {
            await jsRuntime.InvokeAsync<object>("ShowAlert", "Please select error record only!");
            return;
        }

        string[] lfu_ids = selectedLabFileUploads.ToArray();
        string fileName = string.Format("ExportErrorMapping_{0}", DateTime.Now.ToString("yyyy-MM-dd"));

        try
        {
            labFileUploadservice.GenerateExportMappingError(jsRuntime, lfu_ids, fileName);
        }
        catch (Exception ex)
        {
            await jsRuntime.InvokeAsync<object>("ShowAlert", ex.Message);
        }
    }

    private async Task GenerateBoxNo()
    {
        if (selectedLabFileUploads == null || selectedLabFileUploads.Count == 0)
        {
            await jsRuntime.InvokeAsync<object>("ShowAlert", "Please select data!");
            return;
        }

        try
        {
            var data = gridDatas.Where(x => selectedLabFileUploads.Any(s => s.Contains(x.lfu_id.ToString()))).ToList();
            var result = await labFileUploadservice.GenerateBoxNo(data, ParameterList.FirstOrDefault(x => x.prm_code_minor == "RUNNING_FORMAT").prm_value);
            if (result.Count() == 1)
            {
                await jsRuntime.InvokeAsync<object>("ShowAlert", string.Format("Generate Box No. : {0}", result.FirstOrDefault().lfu_BoxNo));
            }
            else
            {
                await jsRuntime.InvokeAsync<object>("ShowAlert", string.Format("Generate Box No. success {0} records", result.Count()));
            }
            selectedLabFileUploads = null;
            SearchData();
        }
        catch (Exception ex)
        {
            await jsRuntime.InvokeAsync<object>("ShowAlert", ex.Message);
        }
    }

    private async Task ExportBoxNoBarcode(LabFileUploadDataDTO data)
    {
        try
        {
            string tempPath = ParameterList.FirstOrDefault(x => x.prm_code_minor == "BARCODE_PATH").prm_value;
            labFileUploadservice.ExportBoxNoBarcode(jsRuntime, data, tempPath);
        }
        catch (Exception ex)
        {
            await jsRuntime.InvokeAsync<object>("ShowAlert", ex.Message);
        }
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private FileService fileService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IBlazorDownloadFileService downloadService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private MasterTemplateService masterTemplateService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private MappingService mappingservice { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ConfigDataService configDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private DropDownListDataService ddlDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private LoginUserData loginUserData { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private FileUploadService fileUploadservice { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private LabFileUploadService labFileUploadservice { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime jsRuntime { get; set; }
    }
}
#pragma warning restore 1591
