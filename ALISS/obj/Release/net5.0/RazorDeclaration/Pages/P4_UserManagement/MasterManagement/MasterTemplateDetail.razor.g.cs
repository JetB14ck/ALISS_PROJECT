// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace ALISS.Pages.P4_UserManagement.MasterManagement
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using System.Text.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using System.Security.Claims;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.HttpOverrides;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Blazored;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Blazored.Menu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using BlazorDownloadFile;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.Account;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.DropDownList.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.LoginManagement.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Master.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Process.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.AUTH.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 32 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.MasterManagement.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 33 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.UserManagement.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 34 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.HISUpload.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 35 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.ANTIBIOGRAM.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 36 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.ANTIBIOTREND.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 37 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.GLASS.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 39 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D0_Master;

#line default
#line hidden
#nullable disable
#nullable restore
#line 41 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D3_Process;

#line default
#line hidden
#nullable disable
#nullable restore
#line 42 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D4_UserManagement.AUTH;

#line default
#line hidden
#nullable disable
#nullable restore
#line 43 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D4_UserManagement.MasterManagement;

#line default
#line hidden
#nullable disable
#nullable restore
#line 44 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D4_UserManagement.UserManagement;

#line default
#line hidden
#nullable disable
#nullable restore
#line 46 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D5_HISData;

#line default
#line hidden
#nullable disable
#nullable restore
#line 47 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D6_Report.Antibiogram;

#line default
#line hidden
#nullable disable
#nullable restore
#line 48 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D6_Report.Antibiotrend;

#line default
#line hidden
#nullable disable
#nullable restore
#line 49 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D6_Report.Glass;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/MasterManagement/MasterTemplate/DataDetail")]
    [Microsoft.AspNetCore.Components.RouteAttribute("/MasterManagement/MasterTemplate/DataDetail/{mst_code}")]
    public partial class MasterTemplateDetail : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 1031 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\Pages\P4_UserManagement\MasterManagement\MasterTemplateDetail.razor"
       
    [CascadingParameter] MainLayout mainLayout { get; set; }
    [Parameter] public string mst_code { get; set; }

    private ConfigData configData = new ConfigData();
    private string classLabel = "col-4";
    private string classInput = "col-8";
    private bool showLoading;

    RadzenGridCustom<WardTypeDTO> wardTypeGrid = new RadzenGridCustom<WardTypeDTO>();
    RadzenGridCustom<SpecimenDTO> specimenGrid = new RadzenGridCustom<SpecimenDTO>();
    RadzenGridCustom<AntibioticDTO> antibioticGrid = new RadzenGridCustom<AntibioticDTO>();
    RadzenGridCustom<OrganismDTO> organismGrid = new RadzenGridCustom<OrganismDTO>();
    RadzenGridCustom<QCRangeDTO> qcrangeGrid = new RadzenGridCustom<QCRangeDTO>();
    RadzenGridCustom<ExpertRuleDTO> expertRuleGrid = new RadzenGridCustom<ExpertRuleDTO>();
    RadzenGridCustom<WHONETColumnDTO> whonetColumnGrid = new RadzenGridCustom<WHONETColumnDTO>();

    private MasterTemplateDTO masterTemplateData = new MasterTemplateDTO();
    private List<WardTypeDTO> wardTypeDatas;
    private List<SpecimenDTO> specimenDatas;
    private List<AntibioticDTO> antibioticDatas;
    private List<OrganismDTO> organismDatas;
    private List<QCRangeDTO> qcrangeDatas;
    private List<ExpertRuleDTO> expertRuleDatas;
    private List<WHONETColumnDTO> whonetColumnDatas;

    private WardTypeDTO wardTypeModel = new WardTypeDTO();
    private SpecimenDTO specimenModel = new SpecimenDTO();
    private AntibioticDTO antibioticModel = new AntibioticDTO();
    private OrganismDTO organismModel = new OrganismDTO();
    private QCRangeDTO qcRangeModel = new QCRangeDTO();
    private ExpertRuleDTO expertRuleModel = new ExpertRuleDTO();
    private WHONETColumnDTO whonetColumnModel = new WHONETColumnDTO();

    private List<LogProcessDTO> historyResultList;

    private bool showPopupDialogWardType = false;
    private bool showPopupDialogSpecimen = false;
    private bool showPopupDialogAntibiotic = false;
    private bool showPopupDialogOrganism = false;
    private bool showPopupDialogQCRange = false;
    private bool showPopupDialogExpertRule = false;
    private bool showPopupDialogWHONETColumn = false;

    private bool pageLoading { get { return (wardTypeDatas == null || specimenDatas == null || antibioticDatas == null || organismDatas == null || qcrangeDatas == null || expertRuleDatas == null || whonetColumnDatas == null || historyResultList == null); } }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await mainLayout.GetLoginUser();

            if (mainLayout.loginUser.CheckPagePermission("MNU_0202") == false) navigationManager.NavigateTo("/NoPermissionPage");

            configData.ConfigDTOList = await configDataService.Get_TBConfig_DataList_Async(new TBConfigDTO() { tbc_mnu_code = "MNU_0202" });
            if (mainLayout.loginUser.rol_code == "ROL_00")
            {
                configData.ConfigDTOList.ForEach(x =>
                {
                    x.tbc_edit = true;
                });
            }

            if (string.IsNullOrEmpty(mst_code))
            {
                masterTemplateData = new MasterTemplateDTO()
                {
                    mst_code = "New",
                    mst_status = "N",
                    mst_active = true,
                    mst_createuser = mainLayout.loginUser.Username
                };

                wardTypeDatas = new List<WardTypeDTO>();
                specimenDatas = new List<SpecimenDTO>();
                antibioticDatas = new List<AntibioticDTO>();
                organismDatas = new List<OrganismDTO>();
                qcrangeDatas = new List<QCRangeDTO>();
                expertRuleDatas = new List<ExpertRuleDTO>();
                whonetColumnDatas = new List<WHONETColumnDTO>();

                historyResultList = new List<LogProcessDTO>();
            }
            else
            {
                masterTemplateData = await masterTemplateService.GetDataAsync(mst_code);

                masterTemplateData.mst_status = "E";
                masterTemplateData.mst_updateuser = mainLayout.loginUser.Username;

                wardTypeDatas = await wardTypeService.GetListByModelAsync(new WardTypeDTO() { wrd_mst_code = mst_code });
                specimenDatas = await specimenService.GetListByModelAsync(new SpecimenDTO() { spc_mst_code = mst_code });
                antibioticDatas = await antibioticService.GetListByModelAsync(new AntibioticDTO() { ant_mst_code = mst_code });
                organismDatas = await organismService.GetListByModelAsync(new OrganismDTO() { org_mst_code = mst_code });
                qcrangeDatas = await qcrangeService.GetListByModelAsync(new QCRangeDTO() { qcr_mst_code = mst_code });
                expertRuleDatas = await expertRuleService.GetListByModelAsync(new ExpertRuleDTO() { exr_mst_code = mst_code });
                whonetColumnDatas = await whonetColumnService.GetListByModelAsync(new WHONETColumnDTO() { wnc_mst_code = mst_code });

                historyResultList = await masterTemplateService.GetHistoryAsync(mst_code);
            }

            StateHasChanged();
        }
    }

    private void RedirectToInbox()
    {
        navigationManager.NavigateTo("MasterManagement/MasterTemplate/");
    }

    #region WardType ...

    private void SearchInboxDataWardType()
    {
        if (wardTypeGrid.radzenGrid != null) wardTypeGrid.radzenGrid.GoToPage(0);
        StateHasChanged();
    }

    private void ShowPopupDialogWardType(WardTypeDTO selectModel)
    {
        if (selectModel == null)
        {
            wardTypeModel = new WardTypeDTO()
            {
                wrd_mst_code = masterTemplateData.mst_code,
                wrd_status = "N",
                wrd_active = true,
                wrd_createuser = mainLayout.loginUser.Username
            };
        }
        else
        {
            //wardTypeModel = await wardTypeService.GetDataAsync(wrd_code);
            wardTypeModel = selectModel;
            wardTypeModel.wrd_status = "E";
            wardTypeModel.wrd_updateuser = mainLayout.loginUser.Username;
        }

        showPopupDialogWardType = true;
    }

    private async Task ClosePopupDialogWardType()
    {
        wardTypeModel = new WardTypeDTO();
        showPopupDialogWardType = false;

        wardTypeDatas = await wardTypeService.GetListByModelAsync(new WardTypeDTO() { wrd_mst_code = mst_code });

        showLoading = false;
        StateHasChanged();
    }

    private void HandleInvalidSubmitWardType()
    {

    }

    private async void HandleValidSubmitWardType()
    {
        var result = await jsRuntime.InvokeAsync<bool>("ShowConfirm", "Do you want to save data?");
        if (result)
        {
            showLoading = true;
            StateHasChanged();

            if (wardTypeModel.wrd_status == "N")
            {
                //Check duplicate
                //var duplicate = await wardTypeService.GetDataAsync(wardTypeModel.wrd_code);
                var duplicate = wardTypeDatas.Any(x => x.wrd_code == wardTypeModel.wrd_code);

                if (duplicate)
                {
                    await jsRuntime.InvokeAsync<object>("ShowAlert", "Duplicate ward type code.");

                    showLoading = false;
                    StateHasChanged();

                    return;
                }
                wardTypeModel.wrd_createuser = mainLayout.loginUser.Username;
            }
            else
            {
                wardTypeModel.wrd_updateuser = mainLayout.loginUser.Username;
            }

            //Save data
            var returnData = await wardTypeService.SaveDataAsync(wardTypeModel);

            await jsRuntime.InvokeAsync<object>("ShowAlert", "Save ward type data complete.");

            await ClosePopupDialogWardType();
        }
    }

    #endregion

    #region Specimen ...

    private void SearchInboxDataSpecimen()
    {
        if (specimenGrid.radzenGrid != null) specimenGrid.radzenGrid.GoToPage(0);
        StateHasChanged();
    }

    private void ShowPopupDialogSpecimen(SpecimenDTO selectModel)
    {
        if (selectModel == null)
        {
            specimenModel = new SpecimenDTO()
            {
                spc_mst_code = masterTemplateData.mst_code,
                spc_status = "N",
                spc_createuser = mainLayout.loginUser.Username
            };
        }
        else
        {
            //specimenModel = await specimenService.GetDataAsync(spc_code);
            specimenModel = selectModel;
            specimenModel.spc_status = "E";
            specimenModel.spc_updateuser = mainLayout.loginUser.Username;
        }

        showPopupDialogSpecimen = true;
    }

    private async Task ClosePopupDialogSpecimen()
    {
        specimenModel = new SpecimenDTO();
        showPopupDialogSpecimen = false;

        specimenDatas = await specimenService.GetListByModelAsync(new SpecimenDTO() { spc_mst_code = mst_code });

        showLoading = false;
        StateHasChanged();
    }

    private void HandleInvalidSubmitSpecimen()
    {

    }

    private async void HandleValidSubmitSpecimen()
    {
        var result = await jsRuntime.InvokeAsync<bool>("ShowConfirm", "Do you want to save data?");
        if (result)
        {
            showLoading = true;
            StateHasChanged();

            if (specimenModel.spc_status == "N")
            {
                //Check duplicate
                var duplicate = specimenDatas.Any(x => x.spc_code == specimenModel.spc_code);

                if (duplicate)
                {
                    await jsRuntime.InvokeAsync<object>("ShowAlert", "Duplicate specimen code.");

                    showLoading = false;
                    StateHasChanged();

                    return;
                }
                specimenModel.spc_createuser = mainLayout.loginUser.Username;
            }
            else
            {
                specimenModel.spc_updateuser = mainLayout.loginUser.Username;
            }

            //Save data
            var returnData = await specimenService.SaveDataAsync(specimenModel);

            await jsRuntime.InvokeAsync<object>("ShowAlert", "Save specimen data complete.");

            await ClosePopupDialogSpecimen();
        }
    }

    #endregion

    #region Antibiotic ...

    private void SearchInboxDataAntibiotic()
    {
        if (antibioticGrid.radzenGrid != null) antibioticGrid.radzenGrid.GoToPage(0);
        StateHasChanged();
    }

    private void ShowPopupDialogAntibiotic(AntibioticDTO selectModel)
    {
        if (selectModel == null)
        {
            antibioticModel = new AntibioticDTO()
            {
                ant_mst_code = masterTemplateData.mst_code,
                ant_status = "N",
                ant_active = true,
                ant_createuser = mainLayout.loginUser.Username
            };
        }
        else
        {
            //wardTypeModel = await wardTypeService.GetDataAsync(wrd_code);
            antibioticModel = selectModel;
            antibioticModel.ant_status = "E";
            antibioticModel.ant_updateuser = mainLayout.loginUser.Username;
        }

        showPopupDialogAntibiotic = true;
    }

    private async Task ClosePopupDialogAntibiotic()
    {
        antibioticModel = new AntibioticDTO();
        showPopupDialogAntibiotic = false;

        antibioticDatas = await antibioticService.GetListByModelAsync(new AntibioticDTO() { ant_mst_code = mst_code });

        showLoading = false;
        StateHasChanged();
    }

    private void HandleInvalidSubmitAntibiotic()
    {

    }

    private async void HandleValidSubmitAntibiotic()
    {
        var result = await jsRuntime.InvokeAsync<bool>("ShowConfirm", "Do you want to save data?");
        if (result)
        {
            showLoading = true;
            StateHasChanged();

            if (antibioticModel.ant_status == "N")
            {
                //Check duplicate
                //var duplicate = await antibioticService.GetDataAsync(antibioticModel.ant_code);
                var duplicate = antibioticDatas.Any(x => x.ant_code == antibioticModel.ant_code);

                if (duplicate)
                {
                    await jsRuntime.InvokeAsync<object>("ShowAlert", "Duplicate code.");

                    showLoading = false;
                    StateHasChanged();

                    return;
                }
            }

            //Save data
            var returnData = await antibioticService.SaveDataAsync(antibioticModel);

            await jsRuntime.InvokeAsync<object>("ShowAlert", "Save data complete.");

            await ClosePopupDialogAntibiotic();
        }
    }

    #endregion

    #region Organism ...

    private void SearchInboxDataOrganism()
    {
        if (organismGrid.radzenGrid != null) organismGrid.radzenGrid.GoToPage(0);
        StateHasChanged();
    }

    private void ShowPopupDialogOrganism(OrganismDTO selectModel)
    {
        if (selectModel == null)
        {
            organismModel = new OrganismDTO()
            {
                org_mst_code = masterTemplateData.mst_code,
                org_status = "N",
                org_active = true,
                org_createuser = mainLayout.loginUser.Username
            };
        }
        else
        {
            //wardTypeModel = await wardTypeService.GetDataAsync(wrd_code);
            organismModel = selectModel;
            organismModel.org_status = "E";
            organismModel.org_updateuser = mainLayout.loginUser.Username;
        }

        showPopupDialogOrganism = true;
    }

    private async Task ClosePopupDialogOrganism()
    {
        organismModel = new OrganismDTO();
        showPopupDialogOrganism = false;

        organismDatas = await organismService.GetListByModelAsync(new OrganismDTO() { org_mst_code = mst_code });

        showLoading = false;
        StateHasChanged();
    }

    private void HandleInvalidSubmitOrganism()
    {

    }

    private async void HandleValidSubmitOrganism()
    {
        var result = await jsRuntime.InvokeAsync<bool>("ShowConfirm", "Do you want to save data?");
        if (result)
        {
            showLoading = true;
            StateHasChanged();

            if (organismModel.org_status == "N")
            {
                //Check duplicate
                //var duplicate = await organismService.GetDataAsync(organismModel.org_code);
                var duplicate = organismDatas.Any(x => x.org_code == organismModel.org_code);

                if (duplicate)
                {
                    await jsRuntime.InvokeAsync<object>("ShowAlert", "Duplicate organism code.");

                    showLoading = false;
                    StateHasChanged();

                    return;
                }
            }

            //Save data
            var returnData = await organismService.SaveDataAsync(organismModel);

            await jsRuntime.InvokeAsync<object>("ShowAlert", "Save organism data complete.");

            await ClosePopupDialogOrganism();
        }
    }

    #endregion

    #region QCRange ...

    private void SearchInboxDataQCRange()
    {
        if (qcrangeGrid.radzenGrid != null) qcrangeGrid.radzenGrid.GoToPage(0);
        StateHasChanged();
    }

    private void ShowPopupDialogQCRange(QCRangeDTO selectModel)
    {
        if (selectModel == null)
        {
            qcRangeModel = new QCRangeDTO()
            {
                qcr_mst_code = masterTemplateData.mst_code,
                qcr_status = "N",
                qcr_active = true,
                qcr_createuser = mainLayout.loginUser.Username
            };
        }
        else
        {
            //wardTypeModel = await wardTypeService.GetDataAsync(wrd_code);
            qcRangeModel = selectModel;
            qcRangeModel.qcr_status = "E";
            qcRangeModel.qcr_updateuser = mainLayout.loginUser.Username;
        }

        showPopupDialogQCRange = true;
    }

    private async Task ClosePopupDialogQCRange()
    {
        qcRangeModel = new QCRangeDTO();
        showPopupDialogQCRange = false;

        qcrangeDatas = await qcrangeService.GetListByModelAsync(new QCRangeDTO() { qcr_mst_code = mst_code });

        showLoading = false;
        StateHasChanged();
    }

    private void HandleInvalidSubmitQCRange()
    {

    }

    private async void HandleValidSubmitQCRange()
    {
        var result = await jsRuntime.InvokeAsync<bool>("ShowConfirm", "Do you want to save data?");
        if (result)
        {
            showLoading = true;
            StateHasChanged();

            if (qcRangeModel.qcr_status == "N")
            {
                //Check duplicate
                //var duplicate = await qcrangeService.GetDataAsync(qcRangeModel.qcr_code);
                var duplicate = qcrangeDatas.Any(x => x.qcr_code == qcRangeModel.qcr_code);

                if (duplicate)
                {
                    await jsRuntime.InvokeAsync<object>("ShowAlert", "Duplicate QCRange code.");

                    showLoading = false;
                    StateHasChanged();

                    return;
                }
            }

            //Save data
            var returnData = await qcrangeService.SaveDataAsync(qcRangeModel);

            await jsRuntime.InvokeAsync<object>("ShowAlert", "Save QCRange data complete.");

            await ClosePopupDialogQCRange();
        }
    }

    #endregion

    #region ExpertRule ...

    private void SearchInboxDataExpertRule()
    {
        if (expertRuleGrid.radzenGrid != null) expertRuleGrid.radzenGrid.GoToPage(0);
        StateHasChanged();
    }

    private void ShowPopupDialogExpertRule(ExpertRuleDTO selectModel)
    {
        if (selectModel == null)
        {
            expertRuleModel = new ExpertRuleDTO()
            {
                exr_mst_code = masterTemplateData.mst_code,
                exr_status = "N",
                exr_active = true,
                exr_createuser = mainLayout.loginUser.Username
            };
        }
        else
        {
            //wardTypeModel = await wardTypeService.GetDataAsync(wrd_code);
            expertRuleModel = selectModel;
            expertRuleModel.exr_status = "E";
            expertRuleModel.exr_updateuser = mainLayout.loginUser.Username;
        }

        showPopupDialogExpertRule = true;
    }

    private async Task ClosePopupDialogExpertRule()
    {
        expertRuleModel = new ExpertRuleDTO();
        showPopupDialogExpertRule = false;

        expertRuleDatas = await expertRuleService.GetListByModelAsync(new ExpertRuleDTO() { exr_mst_code = mst_code });

        showLoading = false;
        StateHasChanged();
    }

    private void HandleInvalidSubmitExpertRule()
    {

    }

    private async void HandleValidSubmitExpertRule()
    {
        var result = await jsRuntime.InvokeAsync<bool>("ShowConfirm", "Do you want to save data?");
        if (result)
        {
            showLoading = true;
            StateHasChanged();

            if (qcRangeModel.qcr_status == "N")
            {
                //Check duplicate
                //var duplicate = await expertRuleService.GetDataAsync(expertRuleModel.exr_code);
                var duplicate = expertRuleDatas.Any(x => x.exr_code == expertRuleModel.exr_code);

                if (duplicate)
                {
                    await jsRuntime.InvokeAsync<object>("ShowAlert", "Duplicate expert rule code.");

                    showLoading = false;
                    StateHasChanged();

                    return;
                }
            }

            //Save data
            var returnData = await expertRuleService.SaveDataAsync(expertRuleModel);

            await jsRuntime.InvokeAsync<object>("ShowAlert", "Save expert rule data complete.");

            await ClosePopupDialogExpertRule();
        }
    }

    #endregion

    #region WHONETColumn ...

    private void SearchInboxDataWHONETColumn()
    {
        if (whonetColumnGrid.radzenGrid != null) whonetColumnGrid.radzenGrid.GoToPage(0);
        StateHasChanged();
    }

    private void ShowPopupDialogWHONETColumn(WHONETColumnDTO selectModel)
    {
        if (selectModel == null)
        {
            whonetColumnModel = new WHONETColumnDTO()
            {
                wnc_mst_code = masterTemplateData.mst_code,
                wnc_status = "N",
                wnc_active = true,
                wnc_createuser = mainLayout.loginUser.Username
            };
        }
        else
        {
            //whonetColumnModel = await whonetColumnService.GetDataAsync(wnc_code);
            whonetColumnModel = selectModel;
            whonetColumnModel.wnc_status = "E";
            whonetColumnModel.wnc_updateuser = mainLayout.loginUser.Username;
        }

        showPopupDialogWHONETColumn = true;
    }

    private async Task ClosePopupDialogWHONETColumn()
    {
        whonetColumnModel = new WHONETColumnDTO();
        showPopupDialogWHONETColumn = false;

        whonetColumnDatas = await whonetColumnService.GetListByModelAsync(new WHONETColumnDTO() { wnc_mst_code = mst_code });

        showLoading = false;
        StateHasChanged();
    }

    private void HandleInvalidSubmitWHONETColumn()
    {

    }

    private async void HandleValidSubmitWHONETColumn()
    {
        var result = await jsRuntime.InvokeAsync<bool>("ShowConfirm", "Do you want to save data?");
        if (result)
        {
            showLoading = true;
            StateHasChanged();

            if (whonetColumnModel.wnc_status == "N")
            {
                //Check duplicate
                var duplicate = await whonetColumnService.GetDataAsync(whonetColumnModel.wnc_code);

                if (string.IsNullOrEmpty(duplicate.wnc_code) == false)
                {
                    await jsRuntime.InvokeAsync<object>("ShowAlert", "Duplicate WHONET Column code.");

                    showLoading = false;
                    StateHasChanged();

                    return;
                }
                whonetColumnModel.wnc_createuser = mainLayout.loginUser.Username;
            }
            else
            {
                whonetColumnModel.wnc_updateuser = mainLayout.loginUser.Username;
            }

            //Save data
            var returnData = await whonetColumnService.SaveDataAsync(whonetColumnModel);

            await jsRuntime.InvokeAsync<object>("ShowAlert", "Save WHONET Column data complete.");

            await ClosePopupDialogWHONETColumn();
        }
    }

    #endregion

    private void HandleInvalidSubmit()
    {

    }

    private async void HandleValidSubmit()
    {
        var result = await jsRuntime.InvokeAsync<bool>("ShowConfirm", "Do you want to save data?");
        if (result)
        {
            showLoading = true;
            StateHasChanged();

            if (masterTemplateData.mst_status == "N")
            {
                //Check duplicate
                var duplicate = await masterTemplateService.GetDataAsync(masterTemplateData.mst_code);

                if (string.IsNullOrEmpty(duplicate.mst_code) == false)
                {
                    await jsRuntime.InvokeAsync<object>("ShowAlert", "Duplicate code.");

                    showLoading = false;
                    StateHasChanged();

                    return;
                }
            }

            //Save data
            var saveResult = await masterTemplateService.SaveDataAsync(masterTemplateData);

            await jsRuntime.InvokeAsync<object>("ShowAlert", "Save data complete.");

            if (masterTemplateData.mst_status == "N")
            {
                masterTemplateData.mst_code = saveResult.mst_code;
            }

            historyResultList = await masterTemplateService.GetHistoryAsync(masterTemplateData.mst_code);

            masterTemplateData.mst_status = "E";

            showLoading = false;
            StateHasChanged();
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private WHONETColumnService whonetColumnService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ExpertRuleService expertRuleService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private QCRangeService qcrangeService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private OrganismService organismService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AntibioticService antibioticService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private SpecimenService specimenService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private WardTypeService wardTypeService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private MasterTemplateService masterTemplateService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ConfigDataService configDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private DialogService dialogService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime jsRuntime { get; set; }
    }
}
#pragma warning restore 1591
