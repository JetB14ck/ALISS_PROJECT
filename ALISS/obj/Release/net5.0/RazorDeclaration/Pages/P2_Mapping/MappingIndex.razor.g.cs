// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace ALISS.Pages.P2_Mapping
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using System.Text.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using System.Security.Claims;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.HttpOverrides;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using Blazored;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using Blazored.Menu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using BlazorDownloadFile;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.Account;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.DropDownList.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.LoginManagement.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Master.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Process.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.AUTH.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 32 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.MasterManagement.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 33 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.UserManagement.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 34 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.HISUpload.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 35 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.ANTIBIOGRAM.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 36 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.ANTIBIOTREND.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 37 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.GLASS.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 39 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D0_Master;

#line default
#line hidden
#nullable disable
#nullable restore
#line 41 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D3_Process;

#line default
#line hidden
#nullable disable
#nullable restore
#line 42 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D4_UserManagement.AUTH;

#line default
#line hidden
#nullable disable
#nullable restore
#line 43 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D4_UserManagement.MasterManagement;

#line default
#line hidden
#nullable disable
#nullable restore
#line 44 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D4_UserManagement.UserManagement;

#line default
#line hidden
#nullable disable
#nullable restore
#line 46 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D5_HISData;

#line default
#line hidden
#nullable disable
#nullable restore
#line 47 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D6_Report.Antibiogram;

#line default
#line hidden
#nullable disable
#nullable restore
#line 48 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D6_Report.Antibiotrend;

#line default
#line hidden
#nullable disable
#nullable restore
#line 49 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D6_Report.Glass;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\Pages\P2_Mapping\MappingIndex.razor"
using ALISS.Data.D2_Mapping;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\Pages\P2_Mapping\MappingIndex.razor"
using ALISS.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\Pages\P2_Mapping\MappingIndex.razor"
using ALISS.Data.D1_Upload;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\Pages\P2_Mapping\MappingIndex.razor"
using ALISS.Mapping.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\Pages\P2_Mapping\MappingIndex.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\Pages\P2_Mapping\MappingIndex.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\Pages\P2_Mapping\MappingIndex.razor"
using System.IO;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/MappingIndex")]
    public partial class MappingIndex : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 395 "D:\G-able\GitHub\ALISS_PROJECT\ALISS\Pages\P2_Mapping\MappingIndex.razor"
       
    [CascadingParameter] MainLayout mainLayout { get; set; }

    private ConfigData configData = new ConfigData();
    private string classLabel = "col-4";
    private string classInput = "col-8";

    private RadzenGridCustom<MappingListsDTO> inboxGrid = new RadzenGridCustom<MappingListsDTO>();
    //private RadzenGridCustom<> hospListGrid = new RadzenGridCustom<>();
    //-- test
    RadzenGridCustom<SpecimenMappingListsDTO> specimenGrid = new RadzenGridCustom<SpecimenMappingListsDTO>();
    private List<SpecimenMappingListsDTO> gridSpecimenDatas;
    private List<SpecimenDTO> specimenDatas;
    //-- test

    private List<HospitalDataDTO> arh_List;
    private List<HospitalDataDTO> prv_List;
    private List<HospitalDataDTO> hos_List;

    private List<DropDownListDTO> rol_List;
    private List<DropDownListDTO> lab_List = new List<DropDownListDTO>();

    TRImportMappingLogDTO mappingLog = new TRImportMappingLogDTO();

    private List<HospitalLabDataDTO> lab_ddl_List;

    private bool showModal = false;
    private bool ShowPopup = false;
    private bool showHospList = false;
    private bool ShowUploadEntryPopup = false;


    private List<MappingListsDTO> gridDatas;
    private Guid _MappingSelected = Guid.Empty;
    MappingSearchDTO searchModel = new MappingSearchDTO();
    MappingSearchDTO hoslabModel = new MappingSearchDTO();
    MappingDataDTO objCopyMapping = new MappingDataDTO();

    private IBrowserFile selectedFiles;

    string LargeUploadMessage = "";
    long UploadedBytes;
    long TotalBytes;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await mainLayout.GetLoginUser();
            if (mainLayout.loginUser.CheckPagePermission("MNU_0401") == false) navigationManager.NavigateTo("/NoPermissionPage");

            configData.ConfigDTOList = await configDataService.Get_TBConfig_DataList_Async(new TBConfigDTO() { tbc_mnu_code = "MNU_0401" });

            _MappingSelected = Guid.Empty;

            var searchData = new HospitalLabDataDTO()
            {
                arh_code = searchModel.mps_Area = mainLayout.loginUser.arh_code,
                prv_code = searchModel.mps_Province = mainLayout.loginUser.prv_code,
                hos_code = searchModel.mps_Hos = mainLayout.loginUser.hos_code,
                lab_code = searchModel.mps_lab = mainLayout.loginUser.lab_code
            };
            lab_ddl_List = await ddlDataService.GetAllLabListByModelAsync(searchData);
            rol_List = await ddlDataService.GetRoleListByModelAsync();


            gridDatas = await mappingservice.GetMappingListByParamAsync(searchModel);

            // -- test
            specimenDatas = await specimenService.GetListByModelMappingActiveAsync(new SpecimenDTO() { spc_mst_code = "MST_20200001" });
        }
    }

    private async void SearchData()
    {
        showModal = true;

        gridDatas = await mappingservice.GetMappingListByParamAsync(searchModel);
        if (inboxGrid.radzenGrid != null) inboxGrid.radzenGrid.GoToPage(0);
        showModal = false;



        StateHasChanged();
    }

    void OnMappingSeleted(Guid mp_id, string mp_program)
    {
        _MappingSelected = mp_id;
        objCopyMapping.mp_program = mp_program;
        objCopyMapping.mp_AntibioticIsolateOneRec = true;
        objCopyMapping.mp_firstlineisheader = true;
        objCopyMapping.mp_dateformat = "dd/mm/yyyy";

    }

    private async Task SaveMappingCopy()
    {
        var now = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
        if (objCopyMapping.mp_startdate < now)
        {
            showModal = false;
            await jsRuntime.InvokeAsync<object>("ShowAlert", "วันที่เริ่มใช้งานไม่สามารถมีค่าก่อนวันที่ปัจจุบัน");
            return;
        }
        showModal = true;
        var searchMasterTemplate = new MasterTemplateSearchDTO();
        var ActiveMasterTemplate = await masterTemplateService.GetListByModelActiveAsync(searchMasterTemplate);

        var getSelectedMappingData = await mappingservice.GetMappingDataAsync(_MappingSelected.ToString());
        if (getSelectedMappingData.mp_id != Guid.Empty)
        {
            getSelectedMappingData.mp_lab = objCopyMapping.mp_lab;
            var chkOldMappingData = await mappingservice.GetMappingDataByModelAsync(getSelectedMappingData);


            if (chkOldMappingData.mp_id != Guid.Empty)
            {

                //Dialog Confirm
                var result = await jsRuntime.InvokeAsync<bool>("ShowConfirm", "Found old version(" + @chkOldMappingData.mp_version.ToString() + ").Do you want to create new version?");

                if (result)
                {
                    if (objCopyMapping.mp_startdate <= chkOldMappingData.mp_startdate)
                    {
                        showModal = false;
                        await jsRuntime.InvokeAsync<object>("ShowAlert", "วันที่เริ่มใช้งานไม่สามารถมีค่าก่อนหรือวันเดียวกันกับวันที่เริ่มใช้งานของ Version ก่อนหน้า (" + @chkOldMappingData.mp_version.ToString() + ")(" + @chkOldMappingData.mp_startdate_str + ")");
                        return;
                    }
                    objCopyMapping.mp_version = chkOldMappingData.mp_version + 1;
                }
                else
                {
                    showModal = false;
                    return;
                }

            }
            else
            {
                objCopyMapping.mp_version = 1;
            }


            objCopyMapping.mp_mst_code = ActiveMasterTemplate.mst_code;
            objCopyMapping.mp_id = _MappingSelected;
            objCopyMapping.mp_createuser = mainLayout.loginUser.Username;

            var x = await mappingservice.CopyMappingDataAsync(objCopyMapping);

            navigationManager.NavigateTo("MappingDetail/" + x.mp_id.ToString());

        }




    }
    async Task ShowCopyMappingPopup()
    {
        ShowPopup = true;
    }

    async Task ShowCopyMappingHospListPopup()
    {
        showHospList = true;
    }

    void CloseCopyMappingHospListPopup()
    {
        showHospList = false;
    }

    void CloseCopyMappingPopup()
    {
        hoslabModel = new MappingSearchDTO();
        objCopyMapping.mp_hos_code = null;
        objCopyMapping.mp_lab = null;
        objCopyMapping.mp_startdate = null;
        ShowPopup = false;
    }

    async Task OpenMappingDetail(string id)
    {
        if (string.IsNullOrEmpty(id))
        {
            navigationManager.NavigateTo("MappingDetail");
        }
        else
        {
            navigationManager.NavigateTo("MappingDetail/" + id);
        }
    }

    async Task OpenImportErrorMapping()
    {
        ControlPopup(true);
    }

    async Task ControlPopup(bool control)
    {
        ShowUploadEntryPopup = control;
        if (control == false)
        {
            selectedFiles = null;
        }
    }

    private void DDL_Change(string ddl_name, object value)
    {
        if (ddl_name == "Arh" && value == null)
        {
            searchModel.mps_Province = null;
            searchModel.mps_Hos = null;
            searchModel.mps_lab = null;
        }
        else if (ddl_name == "Prv" && value == null)
        {
            searchModel.mps_Hos = null;
            searchModel.mps_lab = null;
        }
        else if (ddl_name == "Prv" && value != null)
        {
            var prv_select = lab_ddl_List.FirstOrDefault(x => x.prv_code == value.ToString());

            searchModel.mps_Area = prv_select.arh_code;
        }
        else if (ddl_name == "Hos" && value == null)
        {
            searchModel.mps_lab = null;
        }
        else if (ddl_name == "Hos" && value != null)
        {
            var hos_select = lab_ddl_List.FirstOrDefault(x => x.hos_code == value.ToString());

            searchModel.mps_Province = hos_select.prv_code;
            searchModel.mps_Area = hos_select.arh_code;
            searchModel.mps_lab = null;
        }



        StateHasChanged();
    }

    private void DDL_Popup_Change(string ddl_name, object value)
    {
        if (ddl_name == "Arh" && value == null)
        {
            hoslabModel.mps_Province = null;
            hoslabModel.mps_Hos = null;
            objCopyMapping.mp_hos_code = null;
            hoslabModel.mps_lab = null;
            objCopyMapping.mp_lab = null;
        }
        else if (ddl_name == "Prv" && value == null)
        {
            hoslabModel.mps_Hos = null;
            objCopyMapping.mp_hos_code = null;
            hoslabModel.mps_lab = null;
            objCopyMapping.mp_lab = null;

        }
        else if (ddl_name == "Prv" && value != null)
        {
            var prv_select = lab_ddl_List.FirstOrDefault(x => x.prv_code == value.ToString());

            hoslabModel.mps_Area = prv_select.arh_code;
        }
        else if (ddl_name == "Hos" && value == null)
        {
            hoslabModel.mps_lab = null;
            objCopyMapping.mp_hos_code = null;
        }
        else if (ddl_name == "Hos" && value != null)
        {
            var hos_select = lab_ddl_List.FirstOrDefault(x => x.hos_code == value.ToString());

            hoslabModel.mps_Province = hos_select.prv_code;
            hoslabModel.mps_Area = hos_select.arh_code;
            hoslabModel.mps_lab = null;
            objCopyMapping.mp_lab = null;
            objCopyMapping.mp_hos_code = hos_select.hos_code;
        }
        else if (ddl_name == "Lab" && value == null)
        {

            objCopyMapping.mp_lab = null;
        }
        else if (ddl_name == "Lab" && value != null)
        {
            var lab_select = lab_ddl_List.FirstOrDefault(x => x.lab_code == value.ToString());

            objCopyMapping.mp_lab = lab_select.lab_code;
        }

        StateHasChanged();
    }

    private async void ClearInboxData()
    {
        searchModel.mps_Area = null;
        searchModel.mps_Hos = null;
        searchModel.mps_Province = null;
        searchModel.mps_lab = null;
        SearchData();
    }

    async Task ValidateFile()
    {
        string confirmMessage = "";
        confirmMessage = "Confirm upload data." + "\n" + " File Name: " + selectedFiles.Name + "\n";

        var result = await jsRuntime.InvokeAsync<bool>("ShowConfirm", confirmMessage);
        if (result == false)
            return;

        showModal = true;

        string str_CurrentDate = DateTime.Now.ToString("yyyyMMdd");

        string filepath = await importMappingErrorService.GetPath();
        filepath = Path.Combine(filepath, str_CurrentDate, string.Empty);
        bool exists = System.IO.Directory.Exists(filepath);

        if (!exists)
            System.IO.Directory.CreateDirectory(filepath);

        var filename = Path.Combine(filepath, selectedFiles.Name);

        UploadedBytes = 0;

        TotalBytes = selectedFiles.Size;

        long percent = 0;
        long chunckSize = 400000;
        long numChunks = TotalBytes / chunckSize;
        long remainder = TotalBytes % chunckSize;

        if (File.Exists(filename)) File.Delete(filename);

        using (var inStream = selectedFiles.OpenReadStream(long.MaxValue))
        {
            using (var outStream = File.OpenWrite(filename))
            {
                for (int i = 0; i < numChunks; i++)
                {
                    var buffer = new byte[chunckSize];
                    await inStream.ReadAsync(buffer, 0, buffer.Length);

                    await outStream.WriteAsync(buffer, 0, buffer.Length);

                    UploadedBytes += chunckSize;

                    percent = UploadedBytes * 100 / TotalBytes;

                    LargeUploadMessage = $"กำลังอัปโหลดไฟล์ {percent}%";

                    await InvokeAsync(StateHasChanged);
                }

                if (remainder > 0)
                {
                    var buffer = new byte[remainder];
                    await inStream.ReadAsync(buffer, 0, buffer.Length);

                    await outStream.WriteAsync(buffer, 0, buffer.Length);

                    UploadedBytes += remainder;

                    percent = UploadedBytes * 100 / TotalBytes;

                    LargeUploadMessage = $"กำลังอัปโหลดไฟล์ {percent}%";

                    await InvokeAsync(StateHasChanged);
                }
            }
        }

        LargeUploadMessage = "กำลังตรวจสอบไฟล์ ...";
        await InvokeAsync(StateHasChanged);

        var chkValidate = await importMappingErrorService.ValidateLabFileAsync(filepath, selectedFiles.Name);

        LargeUploadMessage = "อัปโหลดเรียบร้อยแล้ว";
        await InvokeAsync(StateHasChanged);
        int totalRec = 0;
        if (chkValidate != null)
        {
            string ErrorMessage = "";
            foreach (TRImportMappingLogErrorMessageDTO item in chkValidate)
            {
                if (item.lfu_status == 'I' && item.lfu_Err_Column == "Who_code")
                    ErrorMessage += "WHO Code Record(s) = " + item.lfu_Err_Message + "\n";
                if (item.lfu_status == 'I' && item.lfu_Err_Column == "Total")
                {
                    Int32.TryParse(item.lfu_Err_Message, out totalRec);
                    ErrorMessage += "Total Record(s) = " + String.Format("{0:n0}", totalRec) + "\n";
                }
                else if (item.lfu_status == 'E')
                    ErrorMessage += "- " + item.lfu_Err_Message + "\n";
            }
            await jsRuntime.InvokeAsync<object>("ShowAlert", ErrorMessage);
        }

        var chkError = chkValidate.FirstOrDefault(x => x.lfu_status == 'E');

        if (chkError == null)
        {
            await UploadFile(filename, totalRec, 0, string.Empty);
            await ControlPopup(false);
            showModal = false;

            SearchData();
            StateHasChanged();

        }
        else
        {
            showModal = false;
            return;
        }

        UploadedBytes = 0;
        TotalBytes = 0;
        LargeUploadMessage = "";

    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.File;

        var type = Path.GetExtension(selectedFiles.Name);
        if (type != ".xlsx")
        {
            await jsRuntime.InvokeAsync<object>("ShowAlert", "ไม่สามารถ Upload ไฟล์ประเภท " + type + "ได้ (ระบบรองรับ .xlsx เท่านั้น)");
            selectedFiles = null;
            return;
        }

        long maxFileSize = 1024L; // 1KB
        maxFileSize *= 1024L; // 1MB
        maxFileSize *= 512L; // 0.5GB

        if (selectedFiles.Size > maxFileSize)
        {
            await jsRuntime.InvokeAsync<object>("ShowAlert", "ไม่สามารถ Upload ไฟล์ ขนาดมากกว่า 500MB ได้");
            selectedFiles = null;
            return;
        }
    }

    async Task UploadFile(string file_name, int total_record, int who_record, string status)
    {

        TRImportMappingLogDTO model = new TRImportMappingLogDTO();

        model.iml_import_date = DateTime.Now;
        model.iml_filename = file_name;
        model.iml_total_record = total_record;
        model.iml_who_record = who_record;
        model.iml_status = status;
        model.iml_createduser = mainLayout.loginUser.Username;
        model.iml_createdate = DateTime.Now;

        var x = await importMappingErrorService.UploadFileAsync(model);

    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private SpecimenService specimenService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ImportMappingErrorService importMappingErrorService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ConfigDataService configDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private MasterTemplateService masterTemplateService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private UserLoginService userLoginService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private DropDownListDataService ddlDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private DialogService dialogService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private MappingService mappingservice { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime jsRuntime { get; set; }
    }
}
#pragma warning restore 1591
