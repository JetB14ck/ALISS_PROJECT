// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace ALISS.Pages.P5_HISData
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using System.Text.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using System.Security.Claims;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Microsoft.AspNetCore.HttpOverrides;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Blazored;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Blazored.Menu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using BlazorDownloadFile;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.Account;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.DropDownList.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.LoginManagement.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Master.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Process.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.AUTH.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 32 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.MasterManagement.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 33 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.UserManagement.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 35 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.ANTIBIOGRAM.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 36 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.ANTIBIOTREND.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 37 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.GLASS.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 39 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D0_Master;

#line default
#line hidden
#nullable disable
#nullable restore
#line 41 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D3_Process;

#line default
#line hidden
#nullable disable
#nullable restore
#line 42 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D4_UserManagement.AUTH;

#line default
#line hidden
#nullable disable
#nullable restore
#line 43 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D4_UserManagement.MasterManagement;

#line default
#line hidden
#nullable disable
#nullable restore
#line 44 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D4_UserManagement.UserManagement;

#line default
#line hidden
#nullable disable
#nullable restore
#line 47 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D6_Report.Antibiogram;

#line default
#line hidden
#nullable disable
#nullable restore
#line 48 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D6_Report.Antibiotrend;

#line default
#line hidden
#nullable disable
#nullable restore
#line 49 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\_Imports.razor"
using ALISS.Data.D6_Report.Glass;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\Pages\P5_HISData\HISFileUpload.razor"
using ALISS.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\Pages\P5_HISData\HISFileUpload.razor"
using ALISS.Data.D5_HISData;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\Pages\P5_HISData\HISFileUpload.razor"
using ALISS.HISUpload.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\Pages\P5_HISData\HISFileUpload.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\Pages\P5_HISData\HISFileUpload.razor"
using ALISS.Shared;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/HISFileUpload")]
    public partial class HISFileUpload : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 247 "D:\G-able\Projects\ALISS\Project\Current\ALISS_PROJECT\ALISS\Pages\P5_HISData\HISFileUpload.razor"
       
    [CascadingParameter] MainLayout mainLayout { get; set; }
    private ConfigData configData = new ConfigData();
    private const string MENU_CODE = "MNU_0501";
    private string classLabel = "col-4";
    private string classInput = "col-8";

    private List<HISUploadDataDTO> gridDatas;
    private HISFileTemplateDTO HISTemplateActive;
    HISUploadDataSearchDTO searchModel = new HISUploadDataSearchDTO();
    private List<HospitalLabDataDTO> lab_ddl_List;
    private List<DropDownListDTO> rol_List;
    private List<DropDownListDTO> lab_List = new List<DropDownListDTO>();
    private RadzenGridCustom<HISUploadDataDTO> inboxGrid = new RadzenGridCustom<HISUploadDataDTO>();
    HISUploadDataDTO HISFileData = new HISUploadDataDTO();
    private HISUploadDataDTO fileHeader = new HISUploadDataDTO();

    private bool showModal = false;
    private bool ShowUploadEntryPopup = false;

    LoginUserRolePermissionDTO permission;
    //IFileListEntry selectedFiles;
    IBrowserFile selectedFiles;
    string LargeUploadMessage = "";
    long UploadedBytes;
    long TotalBytes;

    private enum eHISFileType
    {
        SP = 1,
        HIS = 2
    }

    string[] filetype = new[]
        {
            "SP",
            "HIS"
        };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await mainLayout.GetLoginUser();

            if (mainLayout.loginUser.CheckPagePermission(MENU_CODE) == false) navigationManager.NavigateTo("/NoPermissionPage");

            configData.ConfigDTOList = await configDataService.Get_TBConfig_DataList_Async(new TBConfigDTO() { tbc_mnu_code = MENU_CODE });

            var searchData = new HospitalLabDataDTO()
            {
                arh_code = searchModel.hfu_arh_code = mainLayout.loginUser.arh_code,
                prv_code = searchModel.hfu_prv_code = mainLayout.loginUser.prv_code,
                hos_code = searchModel.hfu_hos_code = mainLayout.loginUser.hos_code,
                lab_code = searchModel.hfu_lab = mainLayout.loginUser.lab_code
            };


            lab_ddl_List = await ddlDataService.GetAllLabListByModelAsync(searchData);
            rol_List = await ddlDataService.GetRoleListByModelAsync();

            //gridDatas = new List<HISUploadDataDTO>();
            HISTemplateActive = await HISUploadservice.GetHISTemplate_Active_Async(new HISFileTemplateDTO());
            gridDatas = await HISUploadservice.GetHISFileUploadListByModelAsync(searchModel);
        }
    }

    private async void SearchData()
    {
        showModal = true;

        gridDatas = await HISUploadservice.GetHISFileUploadListByModelAsync(searchModel);

        if (inboxGrid.radzenGrid != null) inboxGrid.radzenGrid.GoToPage(0);
        showModal = false;
        StateHasChanged();
    }

    private async void ClearInboxData()
    {
        searchModel.hfu_arh_code = null;
        searchModel.hfu_hos_code = null;
        searchModel.hfu_prv_code = null;
        searchModel.hfu_lab = null;
        searchModel.hfu_upload_date_from = null;
        searchModel.hfu_upload_date_to = null;
        SearchData();
    }

    private void DDL_Change(string ddl_name, object value)
    {
        if (ddl_name == "Arh" && value == null)
        {
            searchModel.hfu_prv_code = null;
            searchModel.hfu_hos_code = null;
            searchModel.hfu_lab = null;
            HISFileData.hfu_lab = null;
        }
        else if (ddl_name == "Prv" && value == null)
        {
            searchModel.hfu_hos_code = null;
            searchModel.hfu_lab = null;
            HISFileData.hfu_lab = null;
        }
        else if (ddl_name == "Prv" && value != null)
        {
            var prv_select = lab_ddl_List.FirstOrDefault(x => x.prv_code == value.ToString());

            searchModel.hfu_arh_code = prv_select.arh_code;
        }
        else if (ddl_name == "Hos" && value == null)
        {
            searchModel.hfu_lab = null;
            HISFileData.hfu_lab = null;
            HISFileData.hfu_hos_code = null;
        }
        else if (ddl_name == "Hos" && value != null)
        {
            var hos_select = lab_ddl_List.FirstOrDefault(x => x.hos_code == value.ToString());

            searchModel.hfu_prv_code = hos_select.prv_code;
            searchModel.hfu_arh_code = hos_select.arh_code;
            searchModel.hfu_lab = null;
            HISFileData.hfu_hos_code = hos_select.hos_code;
        }
        else if (ddl_name == "Lab" && value != null)
        {
            HISFileData.hfu_lab = searchModel.hfu_lab;
        }
        else if (ddl_name == "Lab" && value == null)
        {

            HISFileData.hfu_lab = null;
        }

        StateHasChanged();
    }
    private async Task ShowUploadEntryDialog()
    {
        ControlPopup("UploadEntry", true);
    }

    async Task ControlPopup(string type, bool control)
    {
        if (type == "UploadEntry")
        {
            ShowUploadEntryPopup = control;

            if (control == false)
            {
                selectedFiles = null;
                HISFileData.hfu_file_type = null;
            }
        }
    }

    private async Task OpenHISFileUploadDetail(string HISuploadID)
    {
        navigationManager.NavigateTo("HISFileUploadDetail/" + HISuploadID);
    }

    private async Task UploadFile()
    {
        string confirmMessage = "";
        confirmMessage = "Confirm upload data." + "\n" + " File Name: " + selectedFiles.Name + "\n";

        if (HISFileData.hfu_file_type == eHISFileType.SP.ToString())
            confirmMessage += " File Type: " + HISFileData.hfu_file_type;


        var result = await jsRuntime.InvokeAsync<bool>("ShowConfirm", confirmMessage);
        if (result == false)
        {
            return;
        }

        showModal = true;

        // --------------------------------------------------------------------
        string str_CurrentDate = DateTime.Now.ToString("yyyyMMdd");

        string filepath = await fileUploadManageService.GetPath();
        filepath = Path.Combine(filepath, str_CurrentDate, HISFileData.hfu_hos_code);
        bool exists = System.IO.Directory.Exists(filepath);

        if (!exists)
            System.IO.Directory.CreateDirectory(filepath);

        var filename = Path.Combine(filepath, selectedFiles.Name);

        UploadedBytes = 0;

        TotalBytes = selectedFiles.Size;

        long percent = 0;
        long chunckSize = 400000;
        long numChunks = TotalBytes / chunckSize;
        long remainder = TotalBytes % chunckSize;

        if (File.Exists(filename)) File.Delete(filename);

        using (var inStream = selectedFiles.OpenReadStream(long.MaxValue))
        {
            using (var outStream = File.OpenWrite(filename))
            {
                for (int i = 0; i < numChunks; i++)
                {
                    var buffer = new byte[chunckSize];
                    await inStream.ReadAsync(buffer, 0, buffer.Length);

                    await outStream.WriteAsync(buffer, 0, buffer.Length);

                    UploadedBytes += chunckSize;

                    percent = UploadedBytes * 100 / TotalBytes;

                    LargeUploadMessage = $"กำลังอัปโหลดไฟล์ {percent}%";

                    await InvokeAsync(StateHasChanged);
                }

                if (remainder > 0)
                {
                    var buffer = new byte[remainder];
                    await inStream.ReadAsync(buffer, 0, buffer.Length);

                    await outStream.WriteAsync(buffer, 0, buffer.Length);

                    UploadedBytes += remainder;

                    percent = UploadedBytes * 100 / TotalBytes;

                    LargeUploadMessage = $"กำลังอัปโหลดไฟล์ {percent}%";

                    await InvokeAsync(StateHasChanged);
                }
            }
        }

        LargeUploadMessage = "กำลังตรวจสอบไฟล์ ...";
        await InvokeAsync(StateHasChanged);

        // -----------------------------------------------------------------------

        List<HISUploadErrorMessageDTO> objCheckValidate = new List<HISUploadErrorMessageDTO>();
        objCheckValidate = await fileUploadManageService.ValidateAndUploadFileSPFileAsync(filepath, selectedFiles.Name, HISTemplateActive, HISFileData.hfu_file_type);
        int totalRec = 0;
        if (objCheckValidate != null)
        {
            string ErrorMessage = "";
            foreach (HISUploadErrorMessageDTO item in objCheckValidate)
            {
                if (item.hfu_status == 'I' && item.hfu_Err_Column == "Total")
                {
                    Int32.TryParse(item.hfu_Err_Message, out totalRec);
                    ////ErrorMessage += "Total Record(s) = " + totalRec + "\n";
                    ErrorMessage += "Total Record(s) = " + String.Format("{0:n0}", totalRec) + "\n";
                }
                else if (item.hfu_status == 'E')
                {
                    ErrorMessage += "- " + item.hfu_Err_Message + "\n";
                }
                else if (item.hfu_status == 'W')
                {
                    //Save to table TRHISFileUploadSummary?
                    ErrorMessage += "Row " + item.hfu_Err_no + " : column " + item.hfu_Err_type + " : " + item.hfu_Err_Message + "\n";
                }
            }

            await jsRuntime.InvokeAsync<object>("ShowAlert", ErrorMessage);
          
        }

        var chkError = objCheckValidate.FirstOrDefault(x => x.hfu_status == 'E');

        if (chkError == null)
        {
            var path = objCheckValidate.FirstOrDefault(x => x.hfu_status == 'I' && x.hfu_Err_Column == "path").hfu_Err_Message;

            await SaveFileUpload(totalRec, path);

            // ------ save summary ---------
            var objWarning = objCheckValidate.Where(x => x.hfu_status == 'W').ToList();
            if (objWarning.Count() > 0)
            {
                await SaveFileUploadSumary(objWarning);
            }

            await ControlPopup("UploadEntry", false);
            showModal = false;

            SearchData();
            StateHasChanged();
        }
        else
        {
            showModal = false;
            return;
        }

        UploadedBytes = 0;
        TotalBytes = 0;
        LargeUploadMessage = "";

    }

    async Task SaveFileUpload(int TotalRec, string path)
    {

        HISUploadDataDTO newHISFileUpload = new HISUploadDataDTO();


        //newHISFileUpload.hfu_mp_id = mp_id;
        //newHISFileUpload.lfu_mp_version = mp_version;
        newHISFileUpload.hfu_hos_code = HISFileData.hfu_hos_code;
        newHISFileUpload.hfu_template_id = HISTemplateActive.hft_template_id;
        newHISFileUpload.hfu_lab = HISFileData.hfu_lab;
        newHISFileUpload.hfu_file_name = selectedFiles.Name;
        newHISFileUpload.hfu_file_path = path;
        newHISFileUpload.hfu_file_type = HISFileData.hfu_file_type;
        newHISFileUpload.hfu_total_records = TotalRec;
        newHISFileUpload.hfu_error_records = 0;
        newHISFileUpload.hfu_createuser = mainLayout.loginUser.Username;
        //newHISFileUpload.lfu_updateuser = mainLayout.loginUser.Username;

        fileHeader = await fileUploadManageService.SaveFileUploadAsync(selectedFiles, newHISFileUpload);

    }

    async Task SaveFileUploadSumary(List<HISUploadErrorMessageDTO> objFileUploadErrorMsg)
    {
        List<HISFileUploadSummaryDTO> objFileUploadSummary = new List<HISFileUploadSummaryDTO>();
        foreach (var obj in objFileUploadErrorMsg)
        {
            HISFileUploadSummaryDTO newHISSummary = new HISFileUploadSummaryDTO();

            newHISSummary.hus_hfu_id = fileHeader.hfu_id;
            newHISSummary.hus_error_fieldname = obj.hfu_Err_type;
            newHISSummary.hus_error_fielddescr = obj.hfu_Err_Message;
            newHISSummary.hus_error_fieldrecord = obj.hfu_Err_no.ToString();
            newHISSummary.hus_delete_flag = false;
            newHISSummary.hus_createuser = mainLayout.loginUser.Username;

            objFileUploadSummary.Add(newHISSummary);

        }

        var x = await fileUploadManageService.SaveFileUploadSumaryAsync(objFileUploadSummary);
    }

    //async Task HandleFileSelected(IFileListEntry[] files)
    //{
    //    selectedFiles = files.FirstOrDefault();

    //    var type = Path.GetExtension(selectedFiles.Name);
    //    if (type != ".xlsx" && type != ".xls")
    //    {
    //        if (selectedFiles.Type != "")
    //        {
    //            await jsRuntime.InvokeAsync<object>("ShowAlert", "ไม่สามารถ Upload ไฟล์ " + selectedFiles.Name);
    //            selectedFiles = null;
    //            return;
    //        }
    //    }
    //}

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.File;

        var type = Path.GetExtension(selectedFiles.Name);
        if (type != ".xlsx" && type != ".xls")
        {
            await jsRuntime.InvokeAsync<object>("ShowAlert", "ไม่สามารถ Upload ไฟล์ " + selectedFiles.Name);
            selectedFiles = null;
            return;
        }
    }

    void OnRowSeleted()
    {
    }

    private async Task NavigateToDownloadFile(HISUploadDataDTO hisFile)
    {
        var FullPath = hisFile.hfu_file_path;
        if (File.Exists(FullPath))
        {
            byte[] bytes = File.ReadAllBytes(FullPath);
            await downloadService.DownloadFile(hisFile.hfu_file_name, bytes, "application/octet-stream");
        }
        else
        {
            await jsRuntime.InvokeAsync<object>("ShowAlert", "File not Found");
        }
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IBlazorDownloadFileService downloadService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private FileUploadManageService fileUploadManageService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private DropDownListDataService ddlDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HISFileUploadService HISUploadservice { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ConfigDataService configDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime jsRuntime { get; set; }
    }
}
#pragma warning restore 1591
