@inject IJSRuntime jsRuntime
@inject NavigationManager navigationManager

@if (menuList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div>
        <div class="row">
            <div class="col">
                <NavLink Match="NavLinkMatch.All" @onclick="(() => RedirectToUserManagement(mainLayout.loginUser.Username))" style="cursor: pointer;">
                    <RadzenGravatar Email="@mainLayout.loginUser.Username" />
                </NavLink>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <label style="color:#0A6839;">Hello, @mainLayout.loginUser.Fullname</label>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <label style="color:#0A6839;">Role :  @mainLayout.loginUser.FullRole</label>
            </div>
        </div>
        <br />

        <div class="row">
            <div class="col">
                <RadzenPanelMenu Style="width:250px">
                    <RadzenPanelMenuItem Text="Home" Path="Home" Icon="home"></RadzenPanelMenuItem>
                    @foreach (var _menu in menuList.Where(x => x.mnu_parent_code == "ROOT").OrderBy(x => x.mnu_order).ToList())
                    {
                        if (menuList.Any(x => x.mnu_parent_code == _menu.rop_mnu_code))
                        {
                            <RadzenPanelMenuItem Text="@($"{_menu.mnu_name}")" Icon="@_menu.mnu_icon">
                                @foreach (var _submenu in menuList.Where(x => x.mnu_parent_code == _menu.rop_mnu_code).OrderBy(x => x.mnu_order_sub).ToList())
                                {
                                    if (menuList.Any(x => x.mnu_parent_code == _submenu.rop_mnu_code))
                                    {
                                        <RadzenPanelMenuItem Text="@($"{_submenu.mnu_name}")" Icon="@_submenu.mnu_icon">
                                            @foreach (var _subsubmenu in menuList.Where(x => x.mnu_parent_code == _submenu.rop_mnu_code).OrderBy(x => x.mnu_order_sub).ToList())
                                            {
                                                <RadzenPanelMenuItem Text="@($"{_subsubmenu.mnu_name}")" Path="@_subsubmenu.mnu_path" Icon="@_subsubmenu.mnu_icon"></RadzenPanelMenuItem>
                                            }
                                        </RadzenPanelMenuItem>
                                    }
                                    else
                                    {
                                        <RadzenPanelMenuItem Text="@($"{_submenu.mnu_name}")" Path="@_submenu.mnu_path" Icon="@_submenu.mnu_icon"></RadzenPanelMenuItem>
                                    }

                                }
                            </RadzenPanelMenuItem>
                        }
                        else
                        {
                            <RadzenPanelMenuItem Text="@($"{_menu.mnu_name}")" Path="@_menu.mnu_path" Icon="@_menu.mnu_icon"></RadzenPanelMenuItem>
                        }
                    }
                    <RadzenPanelMenuItem Text="Log out" Path="Logout" Icon="logout"></RadzenPanelMenuItem>
                </RadzenPanelMenu>
            </div>
        </div>

    </div>
}


@code {
    [CascadingParameter] MainLayout mainLayout { get; set; }
    private List<LoginUserRolePermissionDTO> menuList;

    protected override async Task OnInitializedAsync()
    {
        menuList = mainLayout.loginUser.LoginUserRolePermissionList.Where(x => x.rop_rol_code == mainLayout.loginUser.rol_code && x.rop_view == true && x.mnu_active == true).ToList();
    }

    private bool collapseSubMenu = true;
    private string currentSubMenu = "";

    private void ToggleSubMenu(string mnu_code)
    {
        if (string.IsNullOrEmpty(currentSubMenu)) currentSubMenu = mnu_code;
        else if (currentSubMenu == mnu_code) currentSubMenu = "";

        StateHasChanged();
    }

    private void DisplaySubMenu(LoginUserRolePermissionDTO _mnu)
    {
        if (_mnu.mnu_status == "A")
        {
            var menu = menuList.FirstOrDefault(x => x.rop_mnu_code == _mnu.rop_mnu_code);
            menu.mnu_status = "S";
        }
        else
        {
            var menu = menuList.FirstOrDefault(x => x.rop_mnu_code == _mnu.rop_mnu_code);
            menu.mnu_status = "A";
        }

        StateHasChanged();
    }

    private string GetToggleSign(LoginUserRolePermissionDTO _mnu)
    {
        if (_mnu.mnu_status == "A")
        {
            return "expand-more";
        }
        else
        {
            return "expand-less";
        }
    }

    private void RedirectToUserManagement(string username)
    {
        navigationManager.NavigateTo("UserManagement/UserLogin/DataDetail/" + username);
    }

}
