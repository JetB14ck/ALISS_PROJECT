@page "/Antibiotrend/AMRGraphByHosp"

@using ALISS.Data.D6_Report.Antibiotrend
@using ALISS.ANTIBIOTREND.DTO
@using ALISS.EXPORT.Library.DTO;
@using Radzen
@using Radzen.Blazor
@using System.Globalization
@using System.Data.SqlClient
@using System.Configuration

@inject IJSRuntime JSRuntime
@inject AMPService ReportService
@inject ConfigDataService configDataService
@inject NavigationManager navigationManager
@inject OrganismService organismService
@inject AntibioticService antibioticService
@inject SpecimenService specimenService
@inject IFileSave OIFileSave
@inject MasterTemplateService masterTemplateService
@inject ReportService antihosp
@inject ColumnConfigService columnConfigService
@inject DropDownListDataService ddlDataService


<div style="width: 100%;">
    <div class="divHead">
        แนวโน้ม AMR ระดับโรงพยาบาล
    </div>
</div>

@if (!blnLoadComplete)
{
    <Loading ShowModel="true" />

}
else
{
<br />
<RadzenFieldset Text=" Select Hoapital ">
    <div class="row justify-content-between">
        <div class="col-12 col-xl-4">
            <div class="row justify-content-start divGroup">
                <div class="@classLabel">
                    <LabelBox inputLabel="@configData.Get_Label("rpt_graph_hospcode")" />
                </div>
                <div class="@classInput">
                    <RadzenDropDown @bind-Value="searchAMR.hos_code" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    AllowClear="true" TValue="string" AllowFiltering="true" Placeholder="Select..."
                                    Data="lab_ddl_List.Select(x => new { x.arh_code, x.arh_name, x.prv_code, x.prv_name, x.hos_code, x.hos_name }).Where(x => (searchAMR.arh_code == null || x.arh_code == searchAMR.arh_code) && (searchAMR.prv_code == null || x.prv_code == searchAMR.prv_code))"
                                    ValueProperty="hos_code" TextProperty="hos_name" Change="@(args => DDL_Change("Hos", args))"
                                    Disabled="(!string.IsNullOrEmpty(mainLayout.loginUser.hos_code))" Style="width:100%" />
                </div>
            </div>
        </div>

        <div class="col-12 col-xl-4">
            <div class="row justify-content-start divGroup">
                <div class="@classLabel">
                    <LabelBox inputLabel="@configData.Get_Label("rpt_graph_prevcode")" />
                </div>
                <div class="@classInput">
                    <RadzenDropDown @bind-Value="searchAMR.prv_code" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    AllowClear="true" TValue="string" AllowFiltering="true" Placeholder="Select..."
                                    Data="lab_ddl_List.Select(x => new { x.arh_code, x.arh_name, x.prv_code, x.prv_name }).Where(x => (searchAMR.arh_code == null || x.arh_code == searchAMR.arh_code)).Distinct()" ValueProperty="prv_code" TextProperty="prv_name" Change="@(args => DDL_Change("Prv", args))"
                                    Disabled="(!string.IsNullOrEmpty(mainLayout.loginUser.prv_code))" Style="width:100%" />
                </div>
            </div>
        </div>

        <div class="col-12 col-xl-4">
            <div class="row justify-content-start divGroup">
                <div class="@classLabel">
                    <LabelBox inputLabel="@configData.Get_Label("rpt_graph_arhcode")" />
                </div>
                <div class="@classInput">
                    <RadzenDropDown @bind-Value="searchAMR.arh_code" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    AllowClear="true" TValue="string" AllowFiltering="true" Placeholder="Select..."
                                    Data="lab_ddl_List.Select(x => new { x.arh_code, x.arh_name }).Distinct().OrderBy(o=>o.arh_code)" ValueProperty="arh_code" TextProperty="arh_name" Change="@(args => DDL_Change("Arh", args))"
                                    Disabled="(!string.IsNullOrEmpty(mainLayout.loginUser.arh_code))" Style="width:100%" />
                </div>
            </div>
        </div>
    </div>
</RadzenFieldset>

<RadzenFieldset Text="Filter">

    <div class="row justify-content-between">
        <div class="col-12 col-xl-4">
            <h5>@configData.Get_Label("rpt_graph_xaxis")</h5>
            @configData.Get_Label("rpt_graph_yearfrom")
            <RadzenNumeric TValue="int" Max="9999" Min="1900" style="width: 30%;" Name="from_year" @bind-Value=@iYearFrom Change="@((args) => ChangeSubGraph())" />

            @configData.Get_Label("rpt_graph_yearto")
            <RadzenNumeric TValue="int" Max="9999" Min="1900" style="width: 30%;" Name="to_year" @bind-Value=@iYearTo Change="@((args) => ChangeSubGraph())" />
            <br /><br />
        </div>

        <div class="col-12 col-xl-4">
            @*Y-axis*@
            <h5>@configData.Get_Label("rpt_graph_yaxis")</h5>
            <RadzenRadioButtonList @bind-Value=@selectedSIRValue TValue="eSIRValue">
                <Items>
                    <RadzenRadioButtonListItem Text="%S" Value="eSIRValue.S" />
                    <RadzenRadioButtonListItem Text="%I" Value="eSIRValue.I" />
                    <RadzenRadioButtonListItem Text="%R" Value="eSIRValue.R" />
                </Items>
            </RadzenRadioButtonList>
            <br /><br />
        </div>
        <div class="col-12 col-xl-4">
            @*Graph Format*@
            <h5>@configData.Get_Label("rpt_graph_format")</h5>           
            <RadzenRadioButtonList @bind-Value="selectedGraphFormat" TValue="eGraphFormat">
                <Items>
                    <RadzenRadioButtonListItem Text="Line" Value="eGraphFormat.Line" />
                    <RadzenRadioButtonListItem Text="Bar" Value="eGraphFormat.Bar" />
                </Items>
            </RadzenRadioButtonList>           
        </div>
    </div>

    <div class="row justify-content-between">
        <div class="col-md-4">
            <h5>@configData.Get_Label("rpt_graph_organism")</h5>
            <RadzenListBox AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value="multipleSelectedOrg" Multiple="true" Data="@OrgLabelName"
                           Style="margin-bottom: 20px; height:350px; width:350px" />
            @*<RadzenListBox AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value="multipleSelectedOrg" Multiple="true" Data="@orgDump" TextProperty="org_name" ValueProperty="org_code"
                Style="margin-bottom: 20px; height:300px; width:350px" />*@

        </div>
        <div class="col-md-4">
            <h5>@configData.Get_Label("rpt_graph_antibiotic")</h5>
            <RadzenListBox AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value="multipleSelectedAnti" Multiple="true" Data="@AntibioticMaster" TextProperty="ant_name" ValueProperty="ant_code"
                           Style="margin-bottom: 20px; height:350px; width:350px" />
            @*<RadzenListBox AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value="multipleSelectedAnti" Multiple="true" Data="@antiDump" TextProperty="anti_name" ValueProperty="anti_code"
                Style="margin-bottom: 20px; height:300px; width:350px" />*@
        </div>
        <div class="col-md-4">

            <h5>@configData.Get_Label("rpt_graph_subgraph")</h5>
            <RadzenRadioButtonList @bind-Value=@selectedSubGraph TValue="eSubGraph" Change="@((args) => ChangeSubGraph())">
                <Items>
                    <RadzenRadioButtonListItem Text="Specimen" Value="eSubGraph.Specimen" />
                    <RadzenRadioButtonListItem Text="Ward Type" Value="eSubGraph.Ward" />
                    <RadzenRadioButtonListItem Text="None" Value="eSubGraph.None" />
                </Items>
            </RadzenRadioButtonList>

            <div class="row">

            </div>
            <div class="row">
                @if (selectedSubGraph == eSubGraph.Specimen)
                {
                    <div class="col-md-6">
                        <br /><br />
                        <h6>@configData.Get_Label("rpt_graph_specimenlist")</h6>
                        <RadzenListBox AllowFiltering="true" @bind-Value="multipleSelectedSpecimen" Multiple="true" Data="@SpecimenMaster" TextProperty="spc_name" ValueProperty="spc_code"
                                       Style="margin-bottom: 50px; height:200px; background-color : transparent" />
                    </div>
                }

                @if (selectedSubGraph == eSubGraph.Ward)
                {
                    <div class="col-md-6">
                        <br /><br />
                        <h6>@configData.Get_Label("rpt_graph_wardlist")</h6>
                        <RadzenListBox AllowFiltering="true" @bind-Value="multipleSelectedWardType" Multiple="true" Data="@WardTypeMaster"
                                       Style="margin-bottom: 50px; height:200px; background-color : transparent" />
                    </div>
                }
            </div>

            <br /><br />
        </div>
    </div>

    <div class="row justify-content-between buttonArea">
        <div class="col-6">
            <div class="row justify-content-start divGroup buttonArea">
                <div class="col-auto"> <RadzenButton class="btnDownload" Text="Export" Click="@ExportFile" /></div>
            </div>
        </div>
        <div class="col-6">
            <div class="row justify-content-end divGroup buttonArea">
                <div class="col-auto"> <RadzenButton class="btnSearch" Text="Graph Result" Click="@GraphResult" /></div>
                <div class="col-auto"> <RadzenButton class="btnClear" Text="Clear" Click="@ClearData" /></div>
            </div>
        </div>
    </div>

    @if (!blnExportComplete)
    {
        <Loading ShowModel="true" />
    }

</RadzenFieldset>

    @if (blnLoadData == true)
    {

        @if (selectedGraphFormat == eGraphFormat.Line)
        {
            <h1>@TitleChart</h1>
            <div class="row">

                @if (dictSubMain.Count > 0)
                {
                    @foreach (var ppMain in dictSubMain.Keys)
                    {
                        <div class="col-md-6 col-sm-12 p-4">
                            <h1>@ppMain</h1>
                            @if (dictSubMain[ppMain].Values.All(a => a.All(f => f.SIR == 0)))
                            {
                                <RadzenTextBox Style="vertical-align:middle; text-align:center" Value="No Data" />
                            }
                            else
                            {
                                <RadzenChart>
                                    @foreach (var series in dictSubMain[ppMain])
                                    {
                                        <RadzenLineSeries Data="@series.Value" CategoryProperty="Year" Title="@series.Key" LineType="Radzen.Blazor.LineType.Dashed" ValueProperty="SIR">
                                            <RadzenCategoryAxis Step="1" />
                                            <RadzenMarkers MarkerType="MarkerType.Square" />
                                        </RadzenLineSeries>
                                    }
                                    <RadzenValueAxis Min="0" Max="100" Step="20" />
                                    <RadzenCategoryAxis Padding="20" />
                                    <RadzenValueAxis Formatter="@FormatValue">
                                        <RadzenGridLines Visible="true" />
                                        <RadzenAxisTitle Text="@SIRText" />
                                    </RadzenValueAxis>
                                </RadzenChart>
                            }

                        </div>
                    }
                }
                else
                {
                    <div class="col-md-6 col-sm-12 p-4">
                        @if (@dictSeries.Values.All(a => a.All(f => f.SIR == 0)))
                        {
                            <RadzenTextBox Style="vertical-align:middle; text-align:center" Value="No Data" />
                        }
                        else
                        {
                            <RadzenChart>
                                @foreach (var pp in dictSeries)
                                {
                                    <RadzenLineSeries Data="@pp.Value" CategoryProperty="Year" Title="@pp.Key" LineType="Radzen.Blazor.LineType.Dashed" ValueProperty="SIR">
                                        <RadzenCategoryAxis Step="1" />
                                        <RadzenMarkers MarkerType="MarkerType.Square" />
                                    </RadzenLineSeries>
                                }
                                <RadzenValueAxis Min="0" Max="100" Step="20" />
                                <RadzenCategoryAxis Padding="20" />
                                <RadzenValueAxis Formatter="@FormatValue">
                                    <RadzenGridLines Visible="true" />
                                    <RadzenAxisTitle Text="@SIRText" />
                                </RadzenValueAxis>
                            </RadzenChart>
                        }
                    </div>
                }
            </div>
        }

        @if (selectedGraphFormat == eGraphFormat.Bar)
        {
            <h1>@TitleChart</h1>
            <div class="row">

                @if (dictSubMain.Count > 0)
                {
                    @foreach (var ppMain in dictSubMain.Keys)
                    {
                        <div class="col-md-6 col-sm-12 p-4">
                            <h1>@ppMain</h1>
                            @if (dictSubMain[ppMain].Values.All(a => a.All(f => f.SIR == 0)))
                            {
                                <RadzenTextBox Style="vertical-align:middle; text-align:center" Value="No Data" />
                            }
                            else
                            {
                                <RadzenChart>
                                    @foreach (var series in dictSubMain[ppMain])
                                    {
                                        <RadzenColumnSeries Data="@series.Value" CategoryProperty="Year" Title=@series.Key LineType="Radzen.Blazor.LineType.Dashed" ValueProperty="SIR">
                                            @*<RadzenCategoryAxis Step="1" />*@
                                        </RadzenColumnSeries>
                                    }
                                    <RadzenColumnOptions Radius="5" />
                                    <RadzenValueAxis Min="0" Max="100" Step="20" />
                                    <RadzenValueAxis Formatter="@FormatValue">
                                        <RadzenGridLines Visible="true" />
                                        <RadzenAxisTitle Text="@SIRText" />
                                    </RadzenValueAxis>
                                </RadzenChart>
                            }
                        </div>
                    }
                }

                else
                {
                    <div class="col-md-6 col-sm-12 p-4">
                        @if (@dictSeries.Values.All(a => a.All(f => f.SIR == 0)))
                        {
                            <RadzenTextBox Style="vertical-align:middle; text-align:center" Value="No Data" />
                        }
                        else
                        {
                            <RadzenChart>
                                @foreach (var series in dictSeries)
                                {
                                    <RadzenColumnSeries Data="@series.Value" CategoryProperty="Year" Title=@series.Key LineType="Radzen.Blazor.LineType.Dashed" ValueProperty="SIR">
                                        @*<RadzenCategoryAxis Step="1" />*@
                                    </RadzenColumnSeries>
                                }
                                <RadzenValueAxis Min="0" Max="100" Step="20" />
                                <RadzenColumnOptions Radius="5" />
                                <RadzenValueAxis Formatter="@FormatValue">
                                    <RadzenGridLines Visible="true" />
                                    <RadzenAxisTitle Text="@SIRText" />
                                </RadzenValueAxis>
                            </RadzenChart>
                        }
                    </div>
                }

            </div>
        }
    }
    }


    @code {

        [CascadingParameter] MainLayout mainLayout { get; set; }
        private const string MENU_CODE = "MNU_0709";
        private ConfigData configData = new ConfigData();
        private string classLabel = "col-md-4";
        private string classInput = "col-8";
        private List<ColumnConfigDTO> searchColumnConfigResultList;
        private List<HospitalLabDataDTO> lab_ddl_List;

        string _Message;
        private int iYearFrom = (DateTime.Today.Year - 5);
        private int iYearTo = DateTime.Today.Year;
        private eSIRValue selectedSIRValue = eSIRValue.S;
        private eSubGraph selectedSubGraph = eSubGraph.None;
        private eGraphFormat selectedGraphFormat = eGraphFormat.Line;
        private string SIRText;
        private Boolean blnLoadData = false;
        private Boolean blnLoadComplete = false;
        private Boolean blnExportComplete = true;
        private Boolean blnShowSubGraphList = false;

        private string TitleChart;
        private eSubGraph LoadAMRData = eSubGraph.NA;

        private List<SP_AntimicrobialResistanceDTO> AMRData;
        SP_AntimicrobialResistanceHospSearchDTO searchAMR = new SP_AntimicrobialResistanceHospSearchDTO();
        private AMRGraphSearchDTO modelExport = new AMRGraphSearchDTO();

        private string titleChart;
        private string chartName1;
        private string chartName2;
        IEnumerable<string> multipleSelectedOrg = new string[] { };
        IEnumerable<string> multipleSelectedAnti = new string[] { };
        IEnumerable<string> multipleSelectedSpecimen = new string[] { };
        IEnumerable<string> multipleSelectedWardType = new string[] { };
        private List<SpecimenDTO> SpecimenMaster = new List<SpecimenDTO>();
        //private List<OrganismDTO> OrganismMaster = new List<OrganismDTO>();
        private List<AntibioticNameDTO> AntibioticMaster = new List<AntibioticNameDTO>();

        private SpecimenDTO ActiveSpcimen = new SpecimenDTO();
        private OrganismDTO ActiveOrganism = new OrganismDTO();
        private AntibioticDTO ActiveAntibiotic = new AntibioticDTO();
        private MasterTemplateDTO ActiveMasterTemplate = new MasterTemplateDTO();

        List<string> WardTypeMaster = new List<string> { "opd", "ipd", "icu" };
        //List<string> SpecimenMasteruu = new List<string> { "bl", "ur", "st", "sp" };
        private List<OrganismGroupDTO> OrganismGroupMaster = new List<OrganismGroupDTO>();
        List<string> OrgLabelName = new List<string>();
        List<string> AntiLabelName = new List<string>();
        private bool blnUpdate = false;

        IEnumerable<DataReport> enumData = new DataReport[] { };

        private enum eGraphFormat
        {
            Line = 1,
            Bar = 2,
            Pie = 3
        }

        private enum eSubGraph
        {
            Specimen = 1,
            Ward = 2,
            None = 0,
            NA = -1

        }

        private enum eSIRValue
        {
            S = 1,
            I = 2,
            R = 3
        }

        class DataReport
        {
            public string Year { get; set; }
            public double SIR { get; set; }
        }

        private Dictionary<string, IEnumerable<DataReport>> dictSeries = new Dictionary<string, IEnumerable<DataReport>>();
        private Dictionary<string, Dictionary<string, IEnumerable<DataReport>>> dictSubMain = new Dictionary<string, Dictionary<string, IEnumerable<DataReport>>>();
        private Dictionary<string, Dictionary<string, Dictionary<string, IEnumerable<DataReport>>>> dictDrugMain = new Dictionary<string, Dictionary<string, Dictionary<string, IEnumerable<DataReport>>>>();

        class clsOrganism
        {
            public string org_code { get; set; }
            public string org_name { get; set; }
        }

        class clsAntibiotic
        {
            public string anti_code { get; set; }
            public string anti_name { get; set; }
        }

        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            if (firstRender)
            {
                await mainLayout.GetLoginUser();

                //if (mainLayout.loginUser.CheckPagePermission(MENU_CODE) == false) navigationManager.NavigateTo("/NoPermissionPage");

                configData.ConfigDTOList = await configDataService.Get_TBConfig_DataList_Async(new TBConfigDTO() { tbc_mnu_code = MENU_CODE });

                var searchData = new HospitalLabDataDTO()
                {
                    arh_code = searchAMR.arh_code = mainLayout.loginUser.arh_code,
                    hos_code = searchAMR.hos_code = mainLayout.loginUser.hos_code,
                    prv_code = searchAMR.prv_code = mainLayout.loginUser.prv_code,
                };
                lab_ddl_List = await ddlDataService.GetAllLabListByModelAsync(searchData);

                ActiveMasterTemplate = await masterTemplateService.GetListByModelActiveAsync(new MasterTemplateSearchDTO());
                ActiveSpcimen.spc_mst_code = ActiveOrganism.org_mst_code = ActiveAntibiotic.ant_mst_code = ActiveMasterTemplate.mst_code;

                SpecimenMaster = await specimenService.GetListByModelActiveAsync(ActiveSpcimen);
                AntibioticMaster = await ReportService.GetAntibioticNameAsync();
                AntiLabelName = AntibioticMaster.Select(s => s.ant_name).Distinct().ToList();

                OrganismGroupMaster = await antihosp.GetOrganismGroupAsync();
                OrgLabelName = OrganismGroupMaster.Select(s => s.org_organism_label).Distinct().ToList();

                searchAMR.start_year = iYearFrom;
                searchAMR.end_year = iYearTo;

                blnLoadComplete = true;

            }
        }

        private async Task ClearGraph()
        {
            dictSeries.Clear();
            dictSubMain.Clear();
            dictDrugMain.Clear();

            blnLoadData = false;
            StateHasChanged();
        }

        private async Task ClearData()
        {
            iYearFrom = (DateTime.Today.Year - 5);
            iYearTo = DateTime.Today.Year;

            searchAMR.start_year = iYearFrom;
            searchAMR.end_year = iYearTo;

            multipleSelectedOrg = new string[] { };
            multipleSelectedAnti = new string[] { };

            selectedSubGraph = eSubGraph.None;
            selectedGraphFormat = eGraphFormat.Line;
            selectedSIRValue = eSIRValue.S;

            await ClearGraph();
        }

        async void ExportFile()
        {
            blnExportComplete = false;
            modelExport.start_year = searchAMR.start_year;
            modelExport.end_year = searchAMR.end_year;
            if (selectedSIRValue == eSIRValue.S)
            {
                modelExport.sir = "S";
            }
            else if (selectedSIRValue == eSIRValue.I)
            {
                modelExport.sir = "I";
            }
            else
            {
                modelExport.sir = "R";
            }
            modelExport.graph_format = (int)selectedGraphFormat;
            modelExport.sub_graph = (int)selectedSubGraph;
            modelExport.organism = multipleSelectedOrg;
            modelExport.antibiotic = multipleSelectedAnti;

            modelExport.hos_code = searchAMR.hos_code;
            var hos_select = lab_ddl_List.FirstOrDefault(x => x.hos_code == searchAMR.hos_code);
            modelExport.hos_name = hos_select.hos_name;
            modelExport.wardlist = multipleSelectedWardType;
            modelExport.specimenlist = multipleSelectedSpecimen;

            string OutputFileName = string.Format("{0}-{1}_{2}_{3}"
                                                , modelExport.start_year
                                                , modelExport.end_year
                                                , modelExport.hos_name
                                                , "AMRGraph.pdf");

            string statuscode = await ReportService.ExportGraphFileDataAsync(modelExport,"H",OutputFileName);
            if (statuscode == "OK")
            {

                string ServerFileName = "ANTIBIOTREND" + "/" + DateTime.Today.ToString("yyyyMMdd") + "/" + OutputFileName;
                string contentType = "application/pdf";

                await OIFileSave.DownloadFile(ServerFileName, OutputFileName, contentType);

            }
            else if (statuscode == "ERR_PATH")
            {
                await JSRuntime.InvokeAsync<object>("ShowAlert", "ไม่พบ Config PATH กรุณาติดต่อผู้ดูแลระบบ");
            }
            else
            {
                await JSRuntime.InvokeAsync<object>("ShowAlert", "File not Found");
            }
            blnExportComplete = true;
        }

        private async Task GraphResult()
        {

            if (string.IsNullOrEmpty(searchAMR.hos_code))
            {
                await JSRuntime.InvokeAsync<object>("ShowAlert", "Please Select โรงพยาบาล");
            }
            else if((multipleSelectedOrg.Count() == 0) || (multipleSelectedAnti.Count() == 0)){
                 await JSRuntime.InvokeAsync<object>("ShowAlert", "Please select Organism and Antibiotic");
            }
            else
            {
                if (iYearFrom != 0 && iYearTo != 0)
                {

                    blnLoadComplete = false;
                    await ClearGraph();

                    searchAMR.start_year = iYearFrom;
                    searchAMR.end_year = iYearTo;

                    // y-axis
                    if (selectedSIRValue == eSIRValue.S)
                    {
                        SIRText = "%S";
                        TitleChart = "Susceptibility of ";
                    }
                    else if (selectedSIRValue == eSIRValue.I)
                    {
                        SIRText = "%I";
                        TitleChart = "Intermediate of ";
                    }
                    else
                    {
                        SIRText = "%R";
                        TitleChart = "Resistance of ";
                    }

                  
                    // 1 or หลาย เชื้อ : 1 ยา >> series เชื้อ
                    if (multipleSelectedOrg.Count() > 0 && multipleSelectedAnti.Count() == 1)
                    {
                        DataReport dtReport = new DataReport { };
                        List<DataReport> EnumList = new List<DataReport>();
                        List<SP_AntimicrobialResistanceDTO> objAMRSearchResult;

                        dictSeries.Clear();
                        dictSeries = new Dictionary<string, IEnumerable<DataReport>>();
                        var antiName = AntibioticMaster.Find(f => f.ant_code == multipleSelectedAnti.FirstOrDefault()).ant_name;

                        if (selectedSubGraph == eSubGraph.None)
                        {
                            if (!blnUpdate)
                            {
                                AMRData = await ReportService.GetAMROverallByHospModelAsync(searchAMR);
                                LoadAMRData = selectedSubGraph;
                                blnUpdate = true;
                            }

                            //searchAMR.org_codes = string.Join(",", multipleSelectedOrg);
                            //searchAMR.anti_codes = string.Join(",", multipleSelectedAnti);

                            objAMRSearchResult = AMRData.Where(w => (w.year >= searchAMR.start_year && w.year <= searchAMR.end_year)
                                                   && (multipleSelectedOrg.Contains(w.org_name))
                                                   && (multipleSelectedAnti.Contains(w.anti_code))
                                                   ).OrderBy(o => o.org_code).ToList();

                            foreach (var objOrg in multipleSelectedOrg)
                            {
                                if (!dictSeries.ContainsKey(objOrg))
                                {
                                    EnumList = new List<DataReport>();
                                    for (var i = iYearFrom; i <= iYearTo; i++)
                                    {
                                        var newdata = new DataReport { Year = i.ToString(), SIR = 0 };
                                        EnumList.Add(newdata);
                                    }
                                    dictSeries.Add(objOrg, EnumList);
                                }
                            }

                            foreach (var obj in objAMRSearchResult)
                            {

                                var obe = dictSeries[obj.org_name].Where(w => w.Year == obj.year.ToString()).FirstOrDefault();
                                if (obe != null)
                                {
                                    if (selectedSIRValue == eSIRValue.S) { obe.SIR = obj.percent_s; }
                                    else if (selectedSIRValue == eSIRValue.I) { obe.SIR = obj.percent_i; }
                                    else { obe.SIR = obj.percent_r; }
                                }
                            }

                            var title = string.Join(" and ", multipleSelectedOrg);
                            chartName1 = multipleSelectedOrg.FirstOrDefault();
                            TitleChart = TitleChart + antiName;//+ " to " + title
                        }

                        // have sub graph
                        else
                        {
                            if (selectedSubGraph == eSubGraph.Specimen)
                            {

                                if (multipleSelectedSpecimen.Count() == 0)
                                {
                                    await JSRuntime.InvokeAsync<object>("ShowAlert", "Please Select at least 1 Specimen");
                                    goto EndPoint;
                                }

                                dictSeries.Clear();
                                dictSubMain.Clear();
                                dictSeries = new Dictionary<string, IEnumerable<DataReport>>();
                                dictSubMain = new Dictionary<string, Dictionary<string, IEnumerable<DataReport>>>();
                                List<SP_AntimicrobialResistanceDTO> objSpc = new List<SP_AntimicrobialResistanceDTO>();

                                if (!blnUpdate)
                                {
                                    AMRData = await ReportService.GetAMRSpecimenByHospModelAsync(searchAMR);
                                    LoadAMRData = selectedSubGraph;
                                    blnUpdate = true;
                                }
                                objAMRSearchResult = AMRData.Where(w => (w.year >= searchAMR.start_year && w.year <= searchAMR.end_year)
                                                       && (multipleSelectedOrg.Contains(w.org_name))
                                                       && (multipleSelectedAnti.Contains(w.anti_code))
                                                       ).OrderBy(o => o.org_code).ToList();

                                foreach (var orgn in multipleSelectedOrg)
                                {
                                    dictSeries = new Dictionary<string, IEnumerable<DataReport>>();
                                    var orgName = orgn;
                                    if (!dictSubMain.ContainsKey(orgName)) { dictSubMain.Add(orgName, dictSeries); }

                                    foreach (var spcCode in multipleSelectedSpecimen)
                                    {
                                        objSpc = objAMRSearchResult.Where(w => w.org_name == orgn
                                                                            && w.spc_code == spcCode
                                                                            ).ToList();

                                        chartName1 = orgn;
                                        EnumList = new List<DataReport>();
                                        for (var i = iYearFrom; i <= iYearTo; i++)
                                        {
                                            var newdata = new DataReport { Year = i.ToString(), SIR = 0 };
                                            EnumList.Add(newdata);
                                        }
                                        var spcName = SpecimenMaster.Find(t => t.spc_code == spcCode).spc_name;
                                        dictSeries.Add(spcName, EnumList);

                                        foreach (var obj in objSpc)
                                        {
                                            var obe = EnumList.Where(w => w.Year == obj.year.ToString()).FirstOrDefault();
                                            if (obe != null)
                                            {
                                                if (selectedSIRValue == eSIRValue.S) { obe.SIR = obj.percent_s; }
                                                else if (selectedSIRValue == eSIRValue.I) { obe.SIR = obj.percent_i; }
                                                else { obe.SIR = obj.percent_r; }
                                            }

                                        } // end objSpc1
                                    }
                                }

                                var SelectdAntiDesc = new List<string>();
                                foreach (var SelectedAntiCode in multipleSelectedAnti)
                                {
                                    var desc = AntibioticMaster.Find(t => t.ant_code == SelectedAntiCode);
                                    if (desc != null) { SelectdAntiDesc.Add(desc.ant_name); }
                                    else { SelectdAntiDesc.Add(SelectedAntiCode); }
                                }

                                var title = string.Format("{0} to {1} by Specimen", SelectdAntiDesc.FirstOrDefault(), string.Join(",", multipleSelectedOrg));
                                TitleChart = TitleChart + title;
                            } // end sub graph : specimen

                            if (selectedSubGraph == eSubGraph.Ward)
                            {
                                if (multipleSelectedWardType.Count() == 0)
                                {
                                    await JSRuntime.InvokeAsync<object>("ShowAlert", "Please Select at least 1 Ward Type");
                                    goto EndPoint;
                                }

                                dictSeries.Clear();
                                dictSubMain.Clear();
                                dictSeries = new Dictionary<string, IEnumerable<DataReport>>();
                                dictSubMain = new Dictionary<string, Dictionary<string, IEnumerable<DataReport>>>();
                                List<SP_AntimicrobialResistanceDTO> objWard = new List<SP_AntimicrobialResistanceDTO>();

                                if (!blnUpdate)
                                {
                                    AMRData = await ReportService.GetAMRWardTypeByHospModelAsync(searchAMR);
                                    LoadAMRData = selectedSubGraph;
                                    blnUpdate = true;
                                }
                                objAMRSearchResult = AMRData.Where(w => (w.year >= searchAMR.start_year && w.year <= searchAMR.end_year)
                                                       && (multipleSelectedOrg.Contains(w.org_name))
                                                       && (multipleSelectedAnti.Contains(w.anti_code))
                                                       ).OrderBy(o => o.org_code).ToList();
                                foreach (var orgn in multipleSelectedOrg)
                                {
                                    dictSeries = new Dictionary<string, IEnumerable<DataReport>>();
                                    var orgName = orgn;
                                    if (!dictSubMain.ContainsKey(orgName))
                                    {
                                        dictSubMain.Add(orgName, dictSeries);
                                    }

                                    foreach (var wardCode in multipleSelectedWardType)
                                    {
                                        objWard = objAMRSearchResult.Where(w => w.org_name == orgn
                                                                            && w.ward_type == wardCode
                                                                            ).ToList();

                                        chartName1 = orgn;
                                        EnumList = new List<DataReport>();
                                        for (var i = iYearFrom; i <= iYearTo; i++)
                                        {
                                            var newdata = new DataReport { Year = i.ToString(), SIR = 0 };
                                            EnumList.Add(newdata);
                                        }

                                        dictSeries.Add(wardCode, EnumList);

                                        foreach (var obj in objWard)
                                        {
                                            var obe = EnumList.Where(w => w.Year == obj.year.ToString()).FirstOrDefault();
                                            if (obe != null)
                                            {
                                                if (selectedSIRValue == eSIRValue.S) { obe.SIR = obj.percent_s; }
                                                else if (selectedSIRValue == eSIRValue.I) { obe.SIR = obj.percent_i; }
                                                else { obe.SIR = obj.percent_r; }
                                            }

                                        } // end objSpc1

                                    }
                                }

                                var SelectdAntiDesc = new List<string>();
                                foreach (var SelectedAntiCode in multipleSelectedAnti)
                                {
                                    var desc = AntibioticMaster.Find(t => t.ant_code == SelectedAntiCode);
                                    if (desc != null) { SelectdAntiDesc.Add(desc.ant_name); }
                                    else { SelectdAntiDesc.Add(SelectedAntiCode); }
                                }

                                var title = string.Format("{0} to {1} by Ward Type", SelectdAntiDesc.FirstOrDefault(), string.Join(",", multipleSelectedOrg));
                                TitleChart = TitleChart + title;
                            } // end sub graph : Ward Type
                        }
                    }

                    // 1 เชื้อ : หลาย ยา >> series ยา
                    else if (multipleSelectedOrg.Count() == 1 && multipleSelectedAnti.Count() > 1)
                    {

                        var orgName = multipleSelectedOrg.FirstOrDefault(); //OrganismGroupMaster.Find(f => f.organisms == multipleSelectedOrg.FirstOrDefault()).grp_organism_label;

                        List<SP_AntimicrobialResistanceDTO> objAMRSearchResult;

                        DataReport dtReport = new DataReport { };
                        List<DataReport> EnumList = new List<DataReport>();
                        dictSeries.Clear();
                        dictSeries = new Dictionary<string, IEnumerable<DataReport>>();

                        if (selectedSubGraph == eSubGraph.None)
                        {
                            if (!blnUpdate)
                            {
                                AMRData = await ReportService.GetAMROverallByHospModelAsync(searchAMR);
                                LoadAMRData = selectedSubGraph;
                                blnUpdate = true;
                            }

                            //searchAMR.org_codes = string.Join(",", multipleSelectedOrg);
                            //searchAMR.anti_codes = string.Join(",", multipleSelectedAnti);
                            objAMRSearchResult = AMRData.Where(w => (w.year >= searchAMR.start_year && w.year <= searchAMR.end_year)
                                                   && (multipleSelectedOrg.Contains(w.org_name))
                                                   && (multipleSelectedAnti.Contains(w.anti_code))
                                                   ).OrderBy(o => o.anti_code).ToList();

                            foreach (var objAntCode in multipleSelectedAnti)
                            {
                                var drugName = AntibioticMaster.Find(f => f.ant_code == objAntCode).ant_name;
                                if (!dictSeries.ContainsKey(drugName))
                                {
                                    EnumList = new List<DataReport>();
                                    for (var i = iYearFrom; i <= iYearTo; i++)
                                    {
                                        var newdata = new DataReport { Year = i.ToString(), SIR = 0 };
                                        EnumList.Add(newdata);
                                    }
                                    dictSeries.Add(drugName, EnumList);
                                }
                            }


                            foreach (var objAMR in objAMRSearchResult)
                            {
                                var obe = dictSeries[objAMR.anti_name.ToUpper()].Where(w => w.Year == objAMR.year.ToString()).FirstOrDefault();
                                if (obe != null)
                                {
                                    if (selectedSIRValue == eSIRValue.S) { obe.SIR = objAMR.percent_s; }
                                    else if (selectedSIRValue == eSIRValue.I) { obe.SIR = objAMR.percent_i; }
                                    else { obe.SIR = objAMR.percent_r; }
                                }
                            }

                            var title = string.Join(" and ", multipleSelectedOrg);
                            chartName1 = multipleSelectedOrg.FirstOrDefault();
                            TitleChart = TitleChart + title;
                        }

                        else
                        {
                            if (selectedSubGraph == eSubGraph.Specimen)
                            {

                                if (multipleSelectedSpecimen.Count() == 0)
                                {
                                    await JSRuntime.InvokeAsync<object>("ShowAlert", "Please Select at least 1 specimen");
                                    goto EndPoint;
                                }

                                dictSeries.Clear();
                                dictSubMain.Clear();
                                dictSeries = new Dictionary<string, IEnumerable<DataReport>>();
                                dictSubMain = new Dictionary<string, Dictionary<string, IEnumerable<DataReport>>>();
                                List<SP_AntimicrobialResistanceDTO> objSpc = new List<SP_AntimicrobialResistanceDTO>();

                                if (!blnUpdate)
                                {
                                    AMRData = await ReportService.GetAMRSpecimenByHospModelAsync(searchAMR);
                                    LoadAMRData = selectedSubGraph;
                                    blnUpdate = true;
                                }
                                //searchAMR.org_codes = string.Join(",", multipleSelectedOrg);
                                //searchAMR.anti_codes = string.Join(",", multipleSelectedAnti);
                                objAMRSearchResult = AMRData.Where(w => (w.year >= searchAMR.start_year && w.year <= searchAMR.end_year)
                                                  && (multipleSelectedOrg.Contains(w.org_name))
                                                  && (multipleSelectedAnti.Contains(w.anti_code))
                                                  ).OrderBy(o => o.anti_code).ToList();

                                foreach (var drug in multipleSelectedAnti)
                                {
                                    var drugName = AntibioticMaster.Find(f => f.ant_code == drug).ant_name;
                                    dictSeries = new Dictionary<string, IEnumerable<DataReport>>();
                                    if (!dictSubMain.ContainsKey(drugName))
                                    {
                                        dictSubMain.Add(drugName, dictSeries);
                                    }

                                    foreach (var spcCode in multipleSelectedSpecimen)
                                    {
                                        objSpc = objAMRSearchResult.Where(w => w.anti_code.ToUpper() == drug.ToUpper()
                                                                            && w.spc_code == spcCode
                                                                            ).ToList();

                                        chartName1 = drug;
                                        EnumList = new List<DataReport>();
                                        for (var i = iYearFrom; i <= iYearTo; i++)
                                        {
                                            var newdata = new DataReport { Year = i.ToString(), SIR = 0 };
                                            EnumList.Add(newdata);
                                        }
                                        var spcName = SpecimenMaster.Find(t => t.spc_code == spcCode).spc_name;
                                        dictSeries.Add(spcName, EnumList);

                                        foreach (var obj in objSpc)
                                        {
                                            var obe = EnumList.Where(w => w.Year == obj.year.ToString()).FirstOrDefault();
                                            if (obe != null)
                                            {
                                                if (selectedSIRValue == eSIRValue.S) { obe.SIR = obj.percent_s; }
                                                else if (selectedSIRValue == eSIRValue.I) { obe.SIR = obj.percent_i; }
                                                else { obe.SIR = obj.percent_r; }
                                            }

                                        } // end objSpc1
                                    }
                                }

                                var SelectdAntiDesc = new List<string>();
                                foreach (var SelectedAntiCode in multipleSelectedAnti)
                                {
                                    var desc = AntibioticMaster.Find(t => t.ant_code == SelectedAntiCode);
                                    if (desc != null) { SelectdAntiDesc.Add(desc.ant_name); }
                                    else { SelectdAntiDesc.Add(SelectedAntiCode); }
                                }

                                var title = string.Format("{0} to {1} by Specimen", multipleSelectedOrg.FirstOrDefault(), string.Join(",", SelectdAntiDesc));
                                TitleChart = TitleChart + title;
                            } // end sub graph : specimen

                            if (selectedSubGraph == eSubGraph.Ward)
                            {

                                if (multipleSelectedWardType.Count() == 0)
                                {
                                    await JSRuntime.InvokeAsync<object>("ShowAlert", "Please Select at least 1 Ward");
                                    goto EndPoint;
                                }

                                dictSeries.Clear();
                                dictSubMain.Clear();
                                dictSeries = new Dictionary<string, IEnumerable<DataReport>>();
                                dictSubMain = new Dictionary<string, Dictionary<string, IEnumerable<DataReport>>>();
                                List<SP_AntimicrobialResistanceDTO> objWard = new List<SP_AntimicrobialResistanceDTO>();

                                if (!blnUpdate)
                                {
                                    AMRData = await ReportService.GetAMRWardTypeByHospModelAsync(searchAMR);
                                    LoadAMRData = selectedSubGraph;
                                    blnUpdate = true;
                                }
                                objAMRSearchResult = AMRData.Where(w => (w.year >= searchAMR.start_year && w.year <= searchAMR.end_year)
                                                    && (multipleSelectedOrg.Contains(w.org_name))
                                                    && (multipleSelectedAnti.Contains(w.anti_code))
                                                    ).OrderBy(o => o.anti_code).ToList();

                                foreach (var drug in multipleSelectedAnti)
                                {
                                    var drugName = AntibioticMaster.Find(f => f.ant_code == drug).ant_name;
                                    dictSeries = new Dictionary<string, IEnumerable<DataReport>>();
                                    if (!dictSubMain.ContainsKey(drugName))
                                    {
                                        dictSubMain.Add(drugName, dictSeries);
                                    }

                                    foreach (var wardCode in multipleSelectedWardType)
                                    {
                                        objWard = objAMRSearchResult.Where(w => w.anti_code.ToUpper() == drug.ToUpper()
                                                                            && w.ward_type == wardCode
                                                                            ).ToList();

                                        chartName1 = drug;
                                        EnumList = new List<DataReport>();
                                        for (var i = iYearFrom; i <= iYearTo; i++)
                                        {
                                            var newdata = new DataReport { Year = i.ToString(), SIR = 0 };
                                            EnumList.Add(newdata);
                                        }

                                        dictSeries.Add(wardCode, EnumList);

                                        foreach (var obj in objWard)
                                        {
                                            var obe = EnumList.Where(w => w.Year == obj.year.ToString()).FirstOrDefault();
                                            if (obe != null)
                                            {
                                                if (selectedSIRValue == eSIRValue.S) { obe.SIR = obj.percent_s; }
                                                else if (selectedSIRValue == eSIRValue.I) { obe.SIR = obj.percent_i; }
                                                else { obe.SIR = obj.percent_r; }
                                            }

                                        } // end objSpc1
                                    }
                                }

                                var SelectdAntiDesc = new List<string>();
                                foreach (var SelectedAntiCode in multipleSelectedAnti)
                                {
                                    var desc = AntibioticMaster.Find(t => t.ant_code == SelectedAntiCode);
                                    if (desc != null) { SelectdAntiDesc.Add(desc.ant_name); }
                                    else { SelectdAntiDesc.Add(SelectedAntiCode); }
                                }

                                var title = string.Format("{0} to {1} by Ward Type", multipleSelectedOrg.FirstOrDefault(), string.Join(",", SelectdAntiDesc));
                                TitleChart = TitleChart + title;
                            } // end sub graph : Ward Type
                        }
                    }

                    // หลาย เชื้อ : หลาย ยา >> show series เชื้อ
                    else if (multipleSelectedOrg.Count() > 1 && multipleSelectedAnti.Count() > 1)
                    {

                        List<SP_AntimicrobialResistanceDTO> objAMRSearchResult;

                        dictSeries.Clear();
                        dictSeries = new Dictionary<string, IEnumerable<DataReport>>();
                        List<DataReport> EnumList = new List<DataReport>();
                        List<SP_AntimicrobialResistanceDTO> objOrg = new List<SP_AntimicrobialResistanceDTO>();
                        List<SP_AntimicrobialResistanceDTO> objSpc = new List<SP_AntimicrobialResistanceDTO>();
                        List<SP_AntimicrobialResistanceDTO> objWard = new List<SP_AntimicrobialResistanceDTO>();
                        // จำนวนกราฟ = จำนวนยา
                        if (selectedSubGraph == eSubGraph.None)
                        {

                            if (!blnUpdate)
                            {
                                AMRData = await ReportService.GetAMROverallByHospModelAsync(searchAMR);
                                LoadAMRData = selectedSubGraph;
                                blnUpdate = true;
                            }
                            //searchAMR.org_codes = string.Join(",", multipleSelectedOrg);
                            //searchAMR.anti_codes = string.Join(",", multipleSelectedAnti);
                            objAMRSearchResult = AMRData.Where(w => (w.year >= searchAMR.start_year && w.year <= searchAMR.end_year)
                                                   && (multipleSelectedOrg.Contains(w.org_name))
                                                   && (multipleSelectedAnti.Contains(w.anti_code))
                                                   ).OrderBy(o => o.org_code).ToList();

                            foreach (var drug in multipleSelectedAnti)
                            {
                                var drugName = AntibioticMaster.Find(f => f.ant_code.ToUpper() == drug.ToUpper()).ant_name;

                                objOrg = objAMRSearchResult.Where(w => w.anti_code.ToUpper() == drug.ToUpper()).ToList();
                                dictSeries = new Dictionary<string, IEnumerable<DataReport>>();

                                if (!dictSubMain.ContainsKey(drugName)) { dictSubMain.Add(drugName, dictSeries); }

                                foreach (var orgn in multipleSelectedOrg)
                                {
                                    EnumList = new List<DataReport>();
                                    for (var i = iYearFrom; i <= iYearTo; i++)
                                    {
                                        var newdata = new DataReport { Year = i.ToString(), SIR = 0 };
                                        EnumList.Add(newdata);
                                    }

                                    var objOO = objOrg.Where(w => w.org_name == orgn).ToList();

                                    foreach (var obj in objOO)
                                    {
                                        if (!dictSeries.ContainsKey(obj.org_name)) { dictSeries.Add(obj.org_name, EnumList); };

                                        var obe = EnumList.Where(w => w.Year == obj.year.ToString()).FirstOrDefault();
                                        if (obe != null)
                                        {
                                            if (selectedSIRValue == eSIRValue.S) { obe.SIR = obj.percent_s; }
                                            else if (selectedSIRValue == eSIRValue.I) { obe.SIR = obj.percent_i; }
                                            else { obe.SIR = obj.percent_r; }
                                        }
                                    }
                                }
                            }
                        }

                        // จำนวนกราฟ = จำนวนยา x จำนวนเชื้อ
                        if (selectedSubGraph == eSubGraph.Specimen)
                        {
                            if (multipleSelectedSpecimen.Count() == 0)
                            {
                                await JSRuntime.InvokeAsync<object>("ShowAlert", "Please Select at least 1 specimen");
                                goto EndPoint;
                            }

                            if (!blnUpdate)
                            {
                                AMRData = await ReportService.GetAMRSpecimenByHospModelAsync(searchAMR);
                                LoadAMRData = selectedSubGraph;
                                blnUpdate = true;
                            }
                            objAMRSearchResult = AMRData.Where(w => (w.year >= searchAMR.start_year && w.year <= searchAMR.end_year)
                                                   && (multipleSelectedOrg.Contains(w.org_name))
                                                   && (multipleSelectedAnti.Contains(w.anti_code))
                                                   ).OrderBy(o => o.org_code).ToList();

                            foreach (var drug in multipleSelectedAnti)
                            {
                                objOrg = objAMRSearchResult.Where(w => w.anti_code.ToUpper() == drug.ToUpper()).ToList();
                                dictSubMain = new Dictionary<string, Dictionary<string, IEnumerable<DataReport>>>();

                                var drugName = AntibioticMaster.Find(f => f.ant_code == drug).ant_name;
                                if (!dictDrugMain.ContainsKey(drugName)) { dictDrugMain.Add(drugName, dictSubMain); }

                                foreach (var orgn in multipleSelectedOrg)
                                {
                                    dictSeries = new Dictionary<string, IEnumerable<DataReport>>();
                                    var orgName = orgn;//OrganismGroupMaster.Find(f => f.organisms == orgn).grp_organism_label;
                                    if (!dictSubMain.ContainsKey(orgName)) { dictSubMain.Add(orgName, dictSeries); }

                                    foreach (var spcCode in multipleSelectedSpecimen)
                                    {
                                        objSpc = objOrg.Where(w => w.spc_code == spcCode && w.org_name == orgn
                                                               ).ToList();

                                        EnumList = new List<DataReport>();
                                        for (var i = iYearFrom; i <= iYearTo; i++)
                                        {
                                            var newdata = new DataReport { Year = i.ToString(), SIR = 0 };
                                            EnumList.Add(newdata);
                                        }
                                        var spcName = SpecimenMaster.Find(t => t.spc_code == spcCode).spc_name;
                                        dictSeries.Add(spcName, EnumList);

                                        foreach (var obj in objSpc)
                                        {
                                            if (!dictSeries.ContainsKey(spcName))
                                            {
                                                var obe = EnumList.Where(w => w.Year == obj.year.ToString()).FirstOrDefault();
                                                if (obe != null)
                                                {
                                                    if (selectedSIRValue == eSIRValue.S) { obe.SIR = obj.percent_s; }
                                                    else if (selectedSIRValue == eSIRValue.I) { obe.SIR = obj.percent_i; }
                                                    else { obe.SIR = obj.percent_r; }
                                                }
                                            }

                                            else
                                            {
                                                var obe = EnumList.Where(w => w.Year == obj.year.ToString()).FirstOrDefault();
                                                if (obe != null)
                                                {
                                                    if (selectedSIRValue == eSIRValue.S) { obe.SIR = obj.percent_s; }
                                                    else if (selectedSIRValue == eSIRValue.I) { obe.SIR = obj.percent_i; }
                                                    else { obe.SIR = obj.percent_r; }
                                                }
                                            }

                                        }

                                    }
                                }
                            }
                        }
                        // จำนวนกราฟ = จำนวนยา x จำนวนเชื้อ
                        if (selectedSubGraph == eSubGraph.Ward)
                        {
                            if (multipleSelectedWardType.Count() == 0)
                            {
                                await JSRuntime.InvokeAsync<object>("ShowAlert", "Please Select at least 1 ward");
                                goto EndPoint;
                            }

                            if (!blnUpdate)
                            {
                                AMRData = await ReportService.GetAMRWardTypeByHospModelAsync(searchAMR);
                                LoadAMRData = selectedSubGraph;
                                blnUpdate = true;

                            }
                            objAMRSearchResult = AMRData.Where(w => (w.year >= searchAMR.start_year && w.year <= searchAMR.end_year)
                                                   && (multipleSelectedOrg.Contains(w.org_name))
                                                   && (multipleSelectedAnti.Contains(w.anti_code))
                                                   ).OrderBy(o => o.org_code).ToList();

                            foreach (var drug in multipleSelectedAnti)
                            {
                                objOrg = objAMRSearchResult.Where(w => w.anti_code.ToUpper() == drug.ToUpper()).ToList();
                                dictSubMain = new Dictionary<string, Dictionary<string, IEnumerable<DataReport>>>();

                                var drugName = AntibioticMaster.Find(f => f.ant_code == drug).ant_name;
                                if (!dictDrugMain.ContainsKey(drugName))
                                {
                                    dictDrugMain.Add(drugName, dictSubMain);
                                }

                                foreach (var orgn in multipleSelectedOrg)
                                {
                                    dictSeries = new Dictionary<string, IEnumerable<DataReport>>();
                                    var orgName = orgn;//OrganismGroupMaster.Find(f => f.organisms == orgn).grp_organism_label;
                                    if (!dictSubMain.ContainsKey(orgName)) { dictSubMain.Add(orgName, dictSeries); }

                                    foreach (var wardCode in multipleSelectedWardType)
                                    {
                                        objWard = objOrg.Where(w => w.ward_type == wardCode && w.org_name == orgn
                                                               ).ToList();

                                        EnumList = new List<DataReport>();
                                        for (var i = iYearFrom; i <= iYearTo; i++)
                                        {
                                            var newdata = new DataReport { Year = i.ToString(), SIR = 0 };
                                            EnumList.Add(newdata);
                                        }

                                        dictSeries.Add(wardCode, EnumList);

                                        foreach (var obj in objWard)
                                        {
                                            if (!dictSeries.ContainsKey(wardCode))
                                            {
                                                var obe = EnumList.Where(w => w.Year == obj.year.ToString()).FirstOrDefault();
                                                if (obe != null)
                                                {
                                                    if (selectedSIRValue == eSIRValue.S) { obe.SIR = obj.percent_s; }
                                                    else if (selectedSIRValue == eSIRValue.I) { obe.SIR = obj.percent_i; }
                                                    else { obe.SIR = obj.percent_r; }
                                                }
                                            }

                                            else
                                            {
                                                var obe = EnumList.Where(w => w.Year == obj.year.ToString()).FirstOrDefault();
                                                if (obe != null)
                                                {
                                                    if (selectedSIRValue == eSIRValue.S) { obe.SIR = obj.percent_s; }
                                                    else if (selectedSIRValue == eSIRValue.I) { obe.SIR = obj.percent_i; }
                                                    else { obe.SIR = obj.percent_r; }
                                                }
                                            }

                                        }

                                    }
                                }
                            }
                        }

                        var SelectdAntiDesc = new List<string>();
                        foreach (var SelectedAntiCode in multipleSelectedAnti)
                        {
                            var desc = AntibioticMaster.Find(t => t.ant_code == SelectedAntiCode);
                            if (desc != null) { SelectdAntiDesc.Add(desc.ant_name); }
                            else { SelectdAntiDesc.Add(SelectedAntiCode); }
                        }

                        var title = string.Format("{0} to {1}", string.Join(",", multipleSelectedOrg), string.Join(",", SelectdAntiDesc));
                        TitleChart = TitleChart + title;
                    }

                    EndPoint:
                    blnLoadData = true;
                    blnLoadComplete = true;

                }
            }

        } // end GraphResult

        string FormatValue(object value)
        {
            return String.Format("{0:0.00}%", (double)value);
        }

        private async Task ChangeSubGraph()
        {
            if (selectedSubGraph == eSubGraph.Specimen)
            {
                multipleSelectedWardType = Enumerable.Empty<string>();
            }
            else if (selectedSubGraph == eSubGraph.Ward)
            {
                multipleSelectedSpecimen = Enumerable.Empty<string>();
            }
            else if (selectedSubGraph == eSubGraph.None || selectedSubGraph == eSubGraph.NA)
            {
                multipleSelectedSpecimen = Enumerable.Empty<string>();
                multipleSelectedWardType = Enumerable.Empty<string>();
            }
            blnUpdate = false;
            StateHasChanged();
        }

        private void DDL_Change(string ddl_name, object value)
        {
            if (ddl_name == "Arh" && value == null)
            {
                searchAMR.prv_code = null;
                searchAMR.hos_code = null;
            }
            else if (ddl_name == "Prv" && value == null)
            {
                searchAMR.hos_code = null;
            }
            else if (ddl_name == "Prv" && value != null)
            {
                var prv_select = lab_ddl_List.FirstOrDefault(x => x.prv_code == value.ToString());

                searchAMR.arh_code = prv_select.arh_code;
            }
            else if (ddl_name == "Hos" && value == null)
            {
                //searchModel.mps_lab = null;
            }
            else if (ddl_name == "Hos" && value != null)
            {
                var hos_select = lab_ddl_List.FirstOrDefault(x => x.hos_code == value.ToString());

                searchAMR.prv_code = hos_select.prv_code;
                searchAMR.arh_code = hos_select.arh_code;
            }

            StateHasChanged();
        }
    }
