@page "/MasterManagement/MasterTemplate/DataUpload"
@page "/MasterManagement/MasterTemplate/DataUpload/{mst_code}"

@using System.IO;

@inject IJSRuntime jsRuntime
@inject NavigationManager navigationManager
@inject DialogService dialogService

@inject ConfigDataService configDataService
@inject MasterTemplateService masterTemplateService
@*@inject WHONETColumnService whonetColumnService*@
@*@inject ProcessExcelService processExcelService*@
@*@inject OrganismService organismService*@
@inject AntibioticService antibioticService

<div>
    <div class="divHead">
        Master Template - @masterTemplateData.mst_version (@masterTemplateData.mst_code)
    </div>
</div>

@if (pageLoading)
{
    <p><em>Loading...</em></p>

    <Loading ShowModel="true" />
}
else
{
    <br />
    <EditForm Model="masterTemplateData" OnInvalidSubmit="HandleInvalidSubmit" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />

        <div class="container inputArea">
            <div class="row">
                <InputBox ConfigData="@(configData.Get_ConfigRow("mst_code"))">
                    <RadzenTextBox @bind-Value="@masterTemplateData.mst_code" ReadOnly="true" />
                </InputBox>
                <InputBox ConfigData="@(configData.Get_ConfigRow("mst_version"))">
                    <RadzenTextBox @bind-Value="@masterTemplateData.mst_version" Placeholder="@(configData.Get_PlaceHolder("mst_version"))" />
                    <ValidationMessage For="@(() => masterTemplateData.mst_version)" />
                </InputBox>
                <InputBox ConfigData="@(configData.Get_ConfigRow("mst_active"))">
                    <RadzenRadioButtonList @bind-Value="masterTemplateData.mst_active" TValue="bool" Disabled="true">
                        <Items>
                            <RadzenRadioButtonListItem Text="Active" Value="true" />
                            <RadzenRadioButtonListItem Text="Inactive" Value="false" />
                        </Items>
                    </RadzenRadioButtonList>
                </InputBox>
            </div>
            <div class="row justify-content-between">
                <InputBox ConfigData="@(configData.Get_ConfigRow("mst_date_from"))">
                    <RadzenDatePicker @bind-Value="@masterTemplateData.mst_date_from" DateFormat="dd/MM/yyyy" Style="width:100%;" /> @*ReadOnly="true"*@
                    <ValidationMessage For="@(() => masterTemplateData.mst_date_from)" />
                </InputBox>


            </div>

            <br />

            <div class="row justify-content-between buttonArea">
                <div class="col-4">
                    <div class="row justify-content-start divGroup buttonArea">
                        <RadzenButton class="btnCancel" Text="Cancel" Click="RedirectToInbox" />
                    </div>
                </div>

                <div class="col-8">
                    <div class="row justify-content-end divGroup buttonArea">
                        <div class="col-auto">
                            <RadzenButton class="btnSave" Text="Save Header" Click="@(() => SaveMasterTemplateHeader())"></RadzenButton>
                        </div>
                        <div class="col-auto">
                            <RadzenButton Icon="file_upload" class="@(masterTemplateData.mst_status == "N"?"btnSaveDisable":"btnAdd")" Text="Whonet Upload" Click="@(() => ShowPopupDialogUpload("main"))"
                                          Disabled="@(masterTemplateData.mst_status == "N")" />
                        </div>
                        <div class="col-auto">
                            <RadzenButton Icon="file_upload" class="@(masterTemplateData.mst_status == "N"?"btnSaveDisable":"btnAdd")" Text="Upload Glass config (.G20)" Click="@(() => ShowPopupDialogUpload("glass"))"
                                          Disabled="@(masterTemplateData.mst_status == "N")" />
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </EditForm>

    <hr />
    @if (masterTemplateData.mst_status != "N")
    {
        <div>
            <RadzenTabs>
                <Tabs>
                    @*Antibiotics*@
                    <RadzenTabsItem Text="Antibiotics">
                        <div style="width:90%;margin:0px auto;">
                            <div class="container">
                                <div class="row justify-content-end">
                                    <div class="col-auto">
                                        <label>Rows : </label>
                                    </div>
                                    <div class="col-auto">
                                        <RadzenDropDown @bind-Value="whonetAntibiotcsGrid.PageSize" TValue="int" AllowFiltering="true" Data="whonetAntibiotcsGrid.PageSizeOption" Change="SearchInboxDataAntibiotcs" Style="width:50px" />
                                    </div>
                                </div>
                            </div>
                            <RadzenGrid TItem="TCWHONET_AntibioticsDTO" @ref="whonetAntibiotcsGrid.radzenGrid" Data="whonetAntibioticsDatas" PageSize="whonetAntibiotcsGrid.PageSize" ColumnWidth="200px" AllowPaging="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowSorting="true" AllowColumnResize="true">
                                <Columns>
                                    <RadzenGridColumn TItem="TCWHONET_AntibioticsDTO" Property="who_ant_code" Title="@configData.Get_Label("who_ant_code")">
                                        <FooterTemplate>
                                            <label title="@whonetAntibiotcsGrid.FooterLabelString">@whonetAntibiotcsGrid.FooterLabelString</label>
                                        </FooterTemplate>
                                    </RadzenGridColumn>
                                    <RadzenGridColumn TItem="TCWHONET_AntibioticsDTO" Property="who_ant_name" Title="@configData.Get_Label("who_ant_name")" />
                                    <RadzenGridColumn TItem="TCWHONET_AntibioticsDTO" Property="who_ant_type" Title="@configData.Get_Label("who_ant_type")" />
                                    <RadzenGridColumn TItem="TCWHONET_AntibioticsDTO" Property="who_ant_lab" Title="@configData.Get_Label("who_ant_lab")" />
                                    <RadzenGridColumn TItem="TCWHONET_AntibioticsDTO" Property="who_ant_size" Title="@configData.Get_Label("who_ant_size")" />
                                    <RadzenGridColumn TItem="TCWHONET_AntibioticsDTO" Property="who_ant_S" Title="@configData.Get_Label("who_ant_S")" Width="100px" />
                                    <RadzenGridColumn TItem="TCWHONET_AntibioticsDTO" Property="who_ant_I" Title="@configData.Get_Label("who_ant_I")" Width="100px" />
                                    <RadzenGridColumn TItem="TCWHONET_AntibioticsDTO" Property="who_ant_R" Title="@configData.Get_Label("who_ant_R")" Width="100px" />
                                </Columns>
                            </RadzenGrid>
                        </div>
                        <br />
                    </RadzenTabsItem>
                    @*Antibiotic Species*@
                    <RadzenTabsItem Text="Antibiotic Species">
                        <div style="width:90%;margin:0px auto;">
                            <div class="container">
                                <div class="row justify-content-end">
                                    <div class="col-auto">
                                        <label>Rows : </label>
                                    </div>
                                    <div class="col-auto">
                                        <RadzenDropDown @bind-Value="antibioticSpeciesGrid.PageSize" TValue="int" AllowFiltering="true" Data="antibioticSpeciesGrid.PageSizeOption" Change="SearchInboxDataAntibioticSpecies" Style="width:50px" />
                                    </div>
                                </div>
                            </div>
                            <RadzenGrid TItem="TCWHONET_AntibioticSpeciesDTO" @ref="antibioticSpeciesGrid.radzenGrid" Data="antibioticSpeciesDatas" PageSize="antibioticSpeciesGrid.PageSize" ColumnWidth="200px" AllowPaging="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowSorting="true" AllowColumnResize="true">
                                <Columns>
                                    <RadzenGridColumn TItem="TCWHONET_AntibioticSpeciesDTO" Property="who_ant_spe_ant_code" Title="@configData.Get_Label("who_ant_spe_ant_code")">
                                        <FooterTemplate>
                                            <label title="@antibioticSpeciesGrid.FooterLabelString">@whonetAntibiotcsGrid.FooterLabelString</label>
                                        </FooterTemplate>
                                    </RadzenGridColumn>
                                    <RadzenGridColumn TItem="TCWHONET_AntibioticSpeciesDTO" Property="who_ant_spe_org_code" Title="@configData.Get_Label("who_ant_spe_org_code")" />
                                    <RadzenGridColumn TItem="TCWHONET_AntibioticSpeciesDTO" Property="who_ant_spe_I_low" Title="@configData.Get_Label("who_ant_spe_I_low")" Width="150px" />
                                    <RadzenGridColumn TItem="TCWHONET_AntibioticSpeciesDTO" Property="who_ant_spe_I_up" Title="@configData.Get_Label("who_ant_spe_I_up")" Width="150px" />
                                    <RadzenGridColumn TItem="TCWHONET_AntibioticSpeciesDTO" Property="who_ant_spe_spc" Title="@configData.Get_Label("who_ant_spe_spc")" />
                                    <RadzenGridColumn TItem="TCWHONET_AntibioticSpeciesDTO" Property="who_ant_spe_1" Title="@configData.Get_Label("who_ant_spe_1")" />
                                    <RadzenGridColumn TItem="TCWHONET_AntibioticSpeciesDTO" Property="who_ant_spe_2" Title="@configData.Get_Label("who_ant_spe_2")" />
                                </Columns>
                            </RadzenGrid>
                        </div>
                        <br />
                    </RadzenTabsItem>
                    @*WHONET Departments*@
                    <RadzenTabsItem Text="WHONET Departments">
                        <div style="width:90%;margin:0px auto;">
                            <div class="container">
                                <div class="row justify-content-end">
                                    <div class="col-auto">
                                        <label>Rows : </label>
                                    </div>
                                    <div class="col-auto">
                                        <RadzenDropDown @bind-Value="departmentsGrid.PageSize" TValue="int" AllowFiltering="true" Data="departmentsGrid.PageSizeOption" Change="SearchInboxDataDepartments" Style="width:50px" />
                                    </div>
                                </div>
                            </div>
                            <RadzenGrid TItem="TCWHONET_DepartmentsDTO" @ref="departmentsGrid.radzenGrid" Data="departmentsDatas" PageSize="departmentsGrid.PageSize" ColumnWidth="200px" AllowPaging="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowSorting="true" AllowColumnResize="true">
                                <Columns>
                                    <RadzenGridColumn TItem="TCWHONET_DepartmentsDTO" Property="who_dep_code" Title="@configData.Get_Label("who_dep_code")">
                                        <FooterTemplate>
                                            <label title="@departmentsGrid.FooterLabelString">@departmentsGrid.FooterLabelString</label>
                                        </FooterTemplate>
                                    </RadzenGridColumn>
                                    <RadzenGridColumn TItem="TCWHONET_DepartmentsDTO" Property="who_dep_name" Title="@configData.Get_Label("who_dep_name")" />
                                    <RadzenGridColumn TItem="TCWHONET_DepartmentsDTO" Property="who_dep_desc" Title="@configData.Get_Label("who_dep_desc")" />
                                </Columns>
                            </RadzenGrid>
                        </div>
                        <br />
                    </RadzenTabsItem>
                    @*WHONET Column*@
                    <RadzenTabsItem Text="WHONET Column">
                        <div style="width:90%;margin:0px auto;">
                            <div class="container">
                                <div class="row justify-content-end">
                                    <div class="col-auto">
                                        <label>Rows : </label>
                                    </div>
                                    <div class="col-auto">
                                        <RadzenDropDown @bind-Value="whonetColumnGrid.PageSize" TValue="int" AllowFiltering="true" Data="whonetColumnGrid.PageSizeOption" Change="SearchInboxDataSpecimen" Style="width:50px" />
                                    </div>
                                </div>
                            </div>
                            <RadzenGrid TItem="TCWHONETColumnDTO" @ref="whonetColumnGrid.radzenGrid" Data="whonetColumnDatas" PageSize="whonetColumnGrid.PageSize" ColumnWidth="200px" AllowPaging="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowSorting="true" AllowColumnResize="true">
                                <Columns>
                                    <RadzenGridColumn TItem="TCWHONETColumnDTO" Property="wnc_code" Title="@configData.Get_Label("wnc_code")">
                                        <FooterTemplate>
                                            <label title="@whonetColumnGrid.FooterLabelString">@whonetColumnGrid.FooterLabelString</label>
                                        </FooterTemplate>
                                    </RadzenGridColumn>
                                    <RadzenGridColumn TItem="TCWHONETColumnDTO" Property="wnc_name" Title="@configData.Get_Label("wnc_name")" />
                                    <RadzenGridColumn TItem="TCWHONETColumnDTO" Property="wnc_data_type" Title="@configData.Get_Label("wnc_data_type")" />
                                    <RadzenGridColumn TItem="TCWHONETColumnDTO" Property="wnc_date_format" Title="@configData.Get_Label("wnc_date_format")" />
                                    <RadzenGridColumn TItem="TCWHONETColumnDTO" Property="wnc_mendatory" Title="@configData.Get_Label("wnc_mendatory")" Width="100px" />
                                    <RadzenGridColumn TItem="TCWHONETColumnDTO" Property="wnc_encrypt" Title="@configData.Get_Label("wnc_encrypt")" Width="100px" />
                                    @*<RadzenGridColumn TItem="TCWHONETColumnDTO" Property="wnc_mendatory_lab" Title="@configData.Get_Label("wnc_mendatory_lab")" Width="100px" />
                                        <RadzenGridColumn TItem="TCWHONETColumnDTO" Property="wnc_mendatory_his" Title="@configData.Get_Label("wnc_mendatory_his")" Width="100px" />*@
                                </Columns>
                            </RadzenGrid>
                        </div>
                        <br />
                    </RadzenTabsItem>
                    @*Whonet Antibiotics*@
                    <RadzenTabsItem Text="WHONET Antibiotics">
                        <div class="container">
                            <div class="row justify-content-end">
                                <div class="col-auto buttonArea">
                                    <RadzenButton Icon="add" class="btnAdd" Text="Upload Antibiotics (.txt)" Click="@(() => ShowPopupDialogUpload("antibiotic"))" />
                                </div>
                            </div>
                        </div>

                        <br />
                        <div style="width:90%;margin:0px auto;">
                            <div class="container">
                                <div class="row justify-content-end">
                                    <div class="col-auto">
                                        <label>Rows : </label>
                                    </div>
                                    <div class="col-auto">
                                        <RadzenDropDown @bind-Value="antibiotcsGrid.PageSize" TValue="int" AllowFiltering="true" Data="antibiotcsGrid.PageSizeOption" Change="SearchInboxDataWHONETColumn" Style="width:50px" />
                                    </div>
                                </div>
                            </div>
                            <RadzenGrid TItem="AntibioticDTO" @ref="antibiotcsGrid.radzenGrid" Data="antibioticsDatas" PageSize="antibiotcsGrid.PageSize" ColumnWidth="200px" AllowPaging="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowSorting="true" AllowColumnResize="true">
                                <Columns>
                                    <RadzenGridColumn TItem="AntibioticDTO" Property="ant_code" Title="@configData.Get_Label("ant_code")">
                                        <FooterTemplate>
                                            <label title="@specimenGrid.FooterLabelString">@specimenGrid.FooterLabelString</label>
                                        </FooterTemplate>
                                    </RadzenGridColumn>
                                    <RadzenGridColumn TItem="AntibioticDTO" Property="ant_name" Title="@configData.Get_Label("ant_name")" />
                                    @*<RadzenGridColumn TItem="TCWHONET_SpecimenDTO" Property="who_spc_numeric" Title="@configData.Get_Label("who_spc_numeric")" />*@
                                    <RadzenGridColumn TItem="AntibioticDTO" Property="ant_mst_GUIDELINES" Title="@configData.Get_Label("ant_mst_GUIDELINES")" />
                                    <RadzenGridColumn TItem="AntibioticDTO" Property="ant_mst_ABX_NUMBER" Title="@configData.Get_Label("ant_mst_ABX_NUMBER")" />
                                    <RadzenGridColumn TItem="AntibioticDTO" Property="ant_mst_POTENCY" Title="@configData.Get_Label("ant_mst_POTENCY")" />
                                </Columns>
                            </RadzenGrid>
                        </div>
                        <br />
                    </RadzenTabsItem>
                    @*Whonet Specimen*@
                    <RadzenTabsItem Text="WHONET Specimen">
                        <div class="container">
                            <div class="row justify-content-end">
                                <div class="col-auto buttonArea">
                                    <RadzenButton Icon="add" class="btnAdd" Text="Upload Specimen (.txt)" Click="@(() => ShowPopupDialogUpload("specimen"))" />
                                </div>
                            </div>
                        </div>

                        <br />
                        <div style="width:90%;margin:0px auto;">
                            <div class="container">
                                <div class="row justify-content-end">
                                    <div class="col-auto">
                                        <label>Rows : </label>
                                    </div>
                                    <div class="col-auto">
                                        <RadzenDropDown @bind-Value="specimenGrid.PageSize" TValue="int" AllowFiltering="true" Data="specimenGrid.PageSizeOption" Change="SearchInboxDataWHONETColumn" Style="width:50px" />
                                    </div>
                                </div>
                            </div>
                            <RadzenGrid TItem="TCWHONET_SpecimenDTO" @ref="specimenGrid.radzenGrid" Data="specimenDatas" PageSize="specimenGrid.PageSize" ColumnWidth="200px" AllowPaging="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowSorting="true" AllowColumnResize="true">
                                <Columns>
                                    <RadzenGridColumn TItem="TCWHONET_SpecimenDTO" Property="who_spc_code" Title="@configData.Get_Label("who_spc_code")">
                                        <FooterTemplate>
                                            <label title="@specimenGrid.FooterLabelString">@specimenGrid.FooterLabelString</label>
                                        </FooterTemplate>
                                    </RadzenGridColumn>
                                    <RadzenGridColumn TItem="TCWHONET_SpecimenDTO" Property="who_spc_name" Title="@configData.Get_Label("who_spc_name")" />
                                    @*<RadzenGridColumn TItem="TCWHONET_SpecimenDTO" Property="who_spc_numeric" Title="@configData.Get_Label("who_spc_numeric")" />*@
                                    <RadzenGridColumn TItem="TCWHONET_SpecimenDTO" Property="who_spc_desc" Title="@configData.Get_Label("who_spc_desc")" />
                                </Columns>
                            </RadzenGrid>
                        </div>
                        <br />
                    </RadzenTabsItem>
                    @*Whonet Organism*@
                    <RadzenTabsItem Text="WHONET Organism">
                        <div class="container">
                            <div class="row justify-content-end">
                                <div class="col-auto buttonArea">
                                    <RadzenButton Icon="add" class="btnAdd" Text="Upload Organism (.txt)" Click="@(() => ShowPopupDialogUpload("organism"))" />
                                </div>
                            </div>
                        </div>

                        <br />
                        <div style="width:90%;margin:0px auto;">
                            <div class="container">
                                <div class="row justify-content-end">
                                    <div class="col-auto">
                                        <label>Rows : </label>
                                    </div>
                                    <div class="col-auto">
                                        <RadzenDropDown @bind-Value="organismGrid.PageSize" TValue="int" AllowFiltering="true" Data="organismGrid.PageSizeOption" Change="SearchInboxDataOrganism" Style="width:50px" />
                                    </div>
                                </div>
                            </div>
                            <RadzenGrid TItem="TCWHONET_OrganismDTO" @ref="organismGrid.radzenGrid" Data="organismDatas" PageSize="organismGrid.PageSize" ColumnWidth="200px" AllowPaging="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowSorting="true" AllowColumnResize="true">
                                <Columns>
                                    <RadzenGridColumn TItem="TCWHONET_OrganismDTO" Property="who_org" Title="Organism Code">
                                        <FooterTemplate>
                                            <label title="@organismGrid.FooterLabelString">@organismGrid.FooterLabelString</label>
                                        </FooterTemplate>
                                    </RadzenGridColumn>
                                    <RadzenGridColumn TItem="TCWHONET_OrganismDTO" Property="who_organism" Title="Name" />
                                    <RadzenGridColumn TItem="TCWHONET_OrganismDTO" Property="who_gram" Title="Gram" />
                                </Columns>
                            </RadzenGrid>
                        </div>
                        <br />
                    </RadzenTabsItem>
                    @*Macro*@
                    <RadzenTabsItem Text="Macro">
                        <div class="container">
                            <div class="row justify-content-end">
                                <div class="col-auto buttonArea">
                                    <RadzenButton Icon="add" class="btnAdd" Text="Upload Macro (.zip)" Click="@(() => ShowPopupDialogUpload("macro"))" />
                                </div>
                            </div>
                        </div>
                        <br />
                        <div style="width:90%;margin:0px auto;">
                            <div class="container">
                                <div class="row justify-content-end">
                                    <div class="col-auto">
                                        <label>Rows : </label>
                                    </div>
                                    <div class="col-auto">
                                        <RadzenDropDown @bind-Value="macroGrid.PageSize" TValue="int" AllowFiltering="true" Data="macroGrid.PageSizeOption" Change="SearchInboxDataMacro" Style="width:50px" />
                                    </div>
                                </div>
                            </div>
                            <RadzenGrid TItem="TCWHONET_MacroDTO" @ref="macroGrid.radzenGrid" Data="macroDatas" PageSize="macroGrid.PageSize" ColumnWidth="200px" AllowPaging="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowSorting="true" AllowColumnResize="true">
                                <Columns>
                                    <RadzenGridColumn TItem="TCWHONET_MacroDTO" Property="who_mac_name" Title="Macro Name">
                                        <FooterTemplate>
                                            <label title="@macroGrid.FooterLabelString">@macroGrid.FooterLabelString</label>
                                        </FooterTemplate>
                                    </RadzenGridColumn>
                                </Columns>
                            </RadzenGrid>
                        </div>
                        <br />
                    </RadzenTabsItem>
                </Tabs>
            </RadzenTabs>

        </div>
    }
    <hr />


    @if (showPopupDialogUpload)
    {
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">

                    </div>
                    <div class="modal-body">
                        <div class="row justify-content-center">

                            <div class="col-12">
                                <div class="row justify-content-center divGroup">
                                    <div class="col">
                                        <LabelBox inputLabel="Upload File" />
                                    </div>
                                    <div class="col">
                                        @*<InputFile OnChange="HandleFileSelection"></InputFile>*@
                                        <InputFile OnChange="OnInputFileChange"></InputFile>
                                    </div>
                                </div>
                            </div>

                            <div class="col-12">
                                <div class="row justify-content-center divGroup">
                                    <div class="col">
                                        @*<LabelBox inputLabel="Upload Lab File" />*@
                                    </div>
                                    <div class="col" style="font-size:small">
                                        <label>(ไฟล์ต้องมีขนาดไม่เกิน 500MB)</label>
                                    </div>
                                </div>
                            </div>

                            @if (selectedFiles != null)
                            {
                                <div class="col-12">
                                    <div class="row justify-content-center divGroup">
                                        <div class="col">
                                            <LabelBox inputLabel="@configData.Get_Label("Filename")" />
                                        </div>
                                        <div class="col">
                                            <label>@selectedFiles.Name</label>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-12">
                                    <div class="row justify-content-center divGroup">
                                        <div class="col">
                                            <div>@LargeUploadMessage</div>
                                            <progress style="height:50px;width:100%;" value="@UploadedBytes" max="@TotalBytes"></progress>
                                        </div>
                                    </div>
                                </div>

                            }
                            <div class="col-xl-12">
                                <div class="row justify-content-center divGroup buttonArea">
                                    <div class="col-auto">
                                        <RadzenButton class="btnCancel" Text="Cancel" Click="ClosePopupDialogUpload" />
                                    </div>
                                    <div class="col-auto">
                                        <RadzenButton Icon="save" ButtonType="ButtonType.Submit" class="btnSave" Text="Upload" Click="@(() => UploadData())"
                                                      disabled="@((selectedFiles == null) || (Uploading) ? true : false)" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <HistoryLog HistoryList="historyResultList" />

    <Loading ShowModel="showLoading" />
}

@code {
    [CascadingParameter] MainLayout mainLayout { get; set; }
    [Parameter] public string mst_code { get; set; }

    private ConfigData configData = new ConfigData();
    private string classLabel = "col-4";
    private string classInput = "col-8";
    private bool showLoading;
    private bool showPopupDialogUpload = false;
    private bool ShowPopupDialogMacroUpload = false;
    private bool showModal = false;
    private string uploadType = string.Empty;

    private IBrowserFile selectedFiles;

    string LargeUploadMessage = "";
    long UploadedBytes;
    long TotalBytes;
    bool Uploading = false;
    string G20FileName = "";

    RadzenGridCustom<TCWHONET_AntibioticsDTO> whonetAntibiotcsGrid = new RadzenGridCustom<TCWHONET_AntibioticsDTO>();
    RadzenGridCustom<TCWHONET_AntibioticSpeciesDTO> antibioticSpeciesGrid = new RadzenGridCustom<TCWHONET_AntibioticSpeciesDTO>();
    RadzenGridCustom<TCWHONET_DepartmentsDTO> departmentsGrid = new RadzenGridCustom<TCWHONET_DepartmentsDTO>();
    RadzenGridCustom<TCWHONET_SpecimenDTO> specimenGrid = new RadzenGridCustom<TCWHONET_SpecimenDTO>();
    RadzenGridCustom<TCWHONETColumnDTO> whonetColumnGrid = new RadzenGridCustom<TCWHONETColumnDTO>();
    RadzenGridCustom<TCWHONET_OrganismDTO> organismGrid = new RadzenGridCustom<TCWHONET_OrganismDTO>();
    RadzenGridCustom<TCWHONET_MacroDTO> macroGrid = new RadzenGridCustom<TCWHONET_MacroDTO>();
    RadzenGridCustom<AntibioticDTO> antibiotcsGrid = new RadzenGridCustom<AntibioticDTO>();

    private MasterTemplateDTO masterTemplateData = new MasterTemplateDTO();
    private List<TCWHONET_AntibioticsDTO> whonetAntibioticsDatas;
    private List<TCWHONET_AntibioticSpeciesDTO> antibioticSpeciesDatas;
    private List<TCWHONET_DepartmentsDTO> departmentsDatas;
    private List<TCWHONET_SpecimenDTO> specimenDatas;
    private List<TCWHONETColumnDTO> whonetColumnDatas;
    private List<TCWHONET_OrganismDTO> organismDatas;
    private List<TCWHONET_MacroDTO> macroDatas;
    private List<AntibioticDTO> antibioticsDatas;

    private List<LogProcessDTO> historyResultList;

    private bool pageLoading { get { return (whonetAntibioticsDatas == null || specimenDatas == null || antibioticSpeciesDatas == null || departmentsDatas == null || specimenDatas == null || whonetColumnDatas == null || historyResultList == null); } }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await mainLayout.GetLoginUser();

            if (mainLayout.loginUser.CheckPagePermission("MNU_0202") == false) navigationManager.NavigateTo("/NoPermissionPage");

            configData.ConfigDTOList = await configDataService.Get_TBConfig_DataList_Async(new TBConfigDTO() { tbc_mnu_code = "MNU_0202" });
            if (mainLayout.loginUser.rol_code == "ROL_00")
            {
                configData.ConfigDTOList.ForEach(x =>
                {
                    x.tbc_edit = true;
                });
            }

            if (string.IsNullOrEmpty(mst_code))
            {
                masterTemplateData = new MasterTemplateDTO()
                {
                    mst_code = "New",
                    mst_status = "N",
                    mst_active = false,
                    mst_createuser = mainLayout.loginUser.Username
                };

                whonetAntibioticsDatas = new List<TCWHONET_AntibioticsDTO>();
                antibioticSpeciesDatas = new List<TCWHONET_AntibioticSpeciesDTO>();
                departmentsDatas = new List<TCWHONET_DepartmentsDTO>();
                specimenDatas = new List<TCWHONET_SpecimenDTO>();
                whonetColumnDatas = new List<TCWHONETColumnDTO>();
                organismDatas = new List<TCWHONET_OrganismDTO>();
                macroDatas = new List<TCWHONET_MacroDTO>();
                antibioticsDatas = new List<AntibioticDTO>();

                historyResultList = new List<LogProcessDTO>();
            }
            else
            {
                masterTemplateData = await masterTemplateService.GetDataAsync(mst_code);

                masterTemplateData.mst_status = "E";
                masterTemplateData.mst_updateuser = mainLayout.loginUser.Username;

                whonetAntibioticsDatas = await masterTemplateService.Get_TCWHONET_Antibiotics_List(new TCWHONET_AntibioticsDTO() { who_ant_mst_code = masterTemplateData.mst_code });
                antibioticSpeciesDatas = await masterTemplateService.Get_TCWHONET_AntibioticSpecies_List(new TCWHONET_AntibioticSpeciesDTO() { who_mst_code = masterTemplateData.mst_code });
                departmentsDatas = await masterTemplateService.Get_TCWHONET_Departments_List(new TCWHONET_DepartmentsDTO() { who_mst_code = masterTemplateData.mst_code });
                specimenDatas = await masterTemplateService.Get_TCWHONET_Specimen_List(new TCWHONET_SpecimenDTO() { who_spc_mst_code = masterTemplateData.mst_code });
                whonetColumnDatas = await masterTemplateService.Get_TCWHONET_Column_List(new TCWHONETColumnDTO() { wnc_mst_code = masterTemplateData.mst_code });
                organismDatas = await masterTemplateService.Get_TCWHONET_Organism_List(new TCWHONET_OrganismDTO() { who_org_mst_code = masterTemplateData.mst_code });
                macroDatas = await masterTemplateService.Get_TCWHONET_Macro_List(new TCWHONET_MacroDTO() { who_mac_mst_code = masterTemplateData.mst_code });
                antibioticsDatas = await antibioticService.GetListByModelAsync(new AntibioticDTO() { ant_mst_code = masterTemplateData.mst_code });

                historyResultList = await masterTemplateService.GetHistoryAsync(masterTemplateData.mst_code);
            }

            StateHasChanged();
        }
    }

    private void RedirectToInbox()
    {
        navigationManager.NavigateTo("MasterManagement/MasterTemplate/");
    }

    private void HandleInvalidSubmit()
    {

    }

    private async void HandleValidSubmit()
    {

    }

    private async Task ClosePopupDialogUpload()
    {
        showPopupDialogUpload = false;

        if (!string.IsNullOrEmpty(masterTemplateData.mst_code))
        {
            if (string.IsNullOrEmpty(uploadType) || uploadType == "main")
            {
                whonetAntibioticsDatas = await masterTemplateService.Get_TCWHONET_Antibiotics_List(new TCWHONET_AntibioticsDTO() { who_ant_mst_code = masterTemplateData.mst_code });
                antibioticSpeciesDatas = await masterTemplateService.Get_TCWHONET_AntibioticSpecies_List(new TCWHONET_AntibioticSpeciesDTO() { who_mst_code = masterTemplateData.mst_code });
                departmentsDatas = await masterTemplateService.Get_TCWHONET_Departments_List(new TCWHONET_DepartmentsDTO() { who_mst_code = masterTemplateData.mst_code });
                whonetColumnDatas = await masterTemplateService.Get_TCWHONET_Column_List(new TCWHONETColumnDTO() { wnc_mst_code = masterTemplateData.mst_code });
            }
            if (string.IsNullOrEmpty(uploadType) || uploadType == "antibiotic")
                antibioticsDatas = await antibioticService.GetListByModelAsync(new AntibioticDTO() { ant_mst_code = masterTemplateData.mst_code });
            if (string.IsNullOrEmpty(uploadType) || uploadType == "specimen")
                specimenDatas = await masterTemplateService.Get_TCWHONET_Specimen_List(new TCWHONET_SpecimenDTO() { who_spc_mst_code = masterTemplateData.mst_code });
            if (string.IsNullOrEmpty(uploadType) || uploadType == "organism")
                organismDatas = await masterTemplateService.Get_TCWHONET_Organism_List(new TCWHONET_OrganismDTO() { who_org_mst_code = masterTemplateData.mst_code });
            if (string.IsNullOrEmpty(uploadType) || uploadType == "macro")
                macroDatas = await masterTemplateService.Get_TCWHONET_Macro_List(new TCWHONET_MacroDTO() { who_mac_mst_code = masterTemplateData.mst_code });
        }
        uploadType = string.Empty;
        selectedFiles = null;
        LargeUploadMessage = string.Empty;

        historyResultList = await masterTemplateService.GetHistoryAsync(masterTemplateData.mst_code);

        showLoading = false;
        StateHasChanged();
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.File;

        var type = Path.GetExtension(selectedFiles.Name);

        long maxFileSize = 1024L; // 1KB
        maxFileSize *= 1024L; // 1MB
        maxFileSize *= 512L; // 0.5GB

        if (selectedFiles.Size > maxFileSize)
        {
            await jsRuntime.InvokeAsync<object>("ShowAlert", "ไม่สามารถ Upload ไฟล์ ขนาดมากกว่า 500MB ได้");
            selectedFiles = null;
            return;
        }
    }

    private async void UploadData()
    {
        string confirmMessage = "";
        string ErrMessage = "";
        bool bReplace = false;
        Uploading = true;

        if (uploadType == "main")
        {

            if ((whonetAntibioticsDatas.Count() > 0) || (antibioticSpeciesDatas.Count() > 0) || (whonetColumnDatas.Count() > 0) || (departmentsDatas.Count() > 0))
            {
                confirmMessage = "ไฟล์ที่อัพโหลดใหม่ จะแทนที่ข้อมูลไฟล์เดิม ต้องการยืนยันอัพโหลดไฟล์ใหม่ ใช่หรือไม่? " + "\n";
                bReplace = true;
            }
            else
            {
                confirmMessage = "Confirm upload data." + "\n" + " File Name: " + selectedFiles.Name + "\n";
            }
        }
        else if (uploadType == "antibiotic")
        {
            if (Path.GetExtension(selectedFiles.Name).ToLower() != ".txt")
            {
                ErrMessage = "ไฟล์อัพโหดลต้องนามสกุล .txt";
                return;
            }

            if (antibioticsDatas.Count() > 0)
            {
                confirmMessage = "ไฟล์ที่อัพโหลดใหม่ จะแทนที่ข้อมูลไฟล์เดิม ต้องการยืนยันอัพโหลดไฟล์ใหม่ ใช่หรือไม่? " + "\n";
                bReplace = true;
            }

            else
            {
                confirmMessage = "Confirm upload data." + "\n" + " File Name: " + selectedFiles.Name + "\n";
            }
        }
        else if (uploadType == "specimen")
        {
            if (Path.GetExtension(selectedFiles.Name).ToLower() != ".txt")
            {
                ErrMessage = "ไฟล์อัพโหดลต้องนามสกุล .txt";
                return;
            }

            if (specimenDatas.Count() > 0)
            {
                confirmMessage = "ไฟล์ที่อัพโหลดใหม่ จะแทนที่ข้อมูลไฟล์เดิม ต้องการยืนยันอัพโหลดไฟล์ใหม่ ใช่หรือไม่? " + "\n";
                bReplace = true;
            }

            else
            {
                confirmMessage = "Confirm upload data." + "\n" + " File Name: " + selectedFiles.Name + "\n";
            }
        }
        else if (uploadType == "organism")
        {
            if (Path.GetExtension(selectedFiles.Name).ToLower() != ".txt")
            {
                ErrMessage = "ไฟล์อัพโหดลต้องนามสกุล .txt";
            }

            if (organismDatas.Count() > 0)
            {
                confirmMessage = "ไฟล์ที่อัพโหลดใหม่ จะแทนที่ข้อมูลไฟล์เดิม ต้องการยืนยันอัพโหลดไฟล์ใหม่ ใช่หรือไม่? " + "\n";
                bReplace = true;
            }

            else
            {
                confirmMessage = "Confirm upload data." + "\n" + " File Name: " + selectedFiles.Name + "\n";
            }
        }
        else if (uploadType == "macro")
        {
            if (Path.GetExtension(selectedFiles.Name).ToLower() != ".zip")
            {
                ErrMessage = "ไฟล์อัพโหดลต้องนามสกุล .zip";
            }

            if (macroDatas.Count() > 0)
            {
                confirmMessage = "ไฟล์ที่อัพโหลดใหม่ จะแทนที่ข้อมูลไฟล์เดิม ต้องการยืนยันอัพโหลดไฟล์ใหม่ ใช่หรือไม่? " + "\n";
                bReplace = true;
            }
            else
            {
                confirmMessage = "Confirm upload data." + "\n" + " File Name: " + selectedFiles.Name + "\n";
            }
        }
        else if (uploadType == "glass")
        {
            G20FileName = selectedFiles.Name;
            confirmMessage = "Confirm upload data." + "\n" + " File Name: " + selectedFiles.Name + "\n";
        }

        if (ErrMessage != "")
        {
            await jsRuntime.InvokeAsync<object>("ShowAlert", ErrMessage);
            return;
        }

        var result = await jsRuntime.InvokeAsync<bool>("ShowConfirm", confirmMessage);
        if (result == false)
        {
            return;
        }

        showModal = true;

        LargeUploadMessage = "กำลังอัปโหลดไฟล์ ...";
        string strMasterTemplatePath = "MasterTemplate";

        string filepath = await masterTemplateService.GetPath();

        filepath = Path.Combine(filepath, strMasterTemplatePath, masterTemplateData.mst_code);

        switch (uploadType)
        {
            case "main":
                filepath = Path.Combine(filepath, "WhonetMain");
                break;
            case "antibiotic":
                filepath = Path.Combine(filepath, "Antibiotic");
                break;
            case "specimen":
                filepath = Path.Combine(filepath, "Specimen");
                break;
            case "organism":
                filepath = Path.Combine(filepath, "Organism");
                break;
            case "macro":
                filepath = Path.Combine(filepath, "Macro");
                break;
            case "glass":
                filepath = Path.Combine(filepath, "Glass");
                break;
        }

        bool exists = System.IO.Directory.Exists(filepath);
        if (!exists)
            System.IO.Directory.CreateDirectory(filepath);


        var filename = Path.Combine(filepath, selectedFiles.Name);

        UploadedBytes = 0;

        TotalBytes = selectedFiles.Size;

        long percent = 0;
        long chunckSize = 400000;
        long numChunks = TotalBytes / chunckSize;
        long remainder = TotalBytes % chunckSize;

        if (File.Exists(filename)) File.Delete(filename);


        using (var inStream = selectedFiles.OpenReadStream(long.MaxValue))
        {
            using (var outStream = File.OpenWrite(filename))
            {
                for (int i = 0; i < numChunks; i++)
                {
                    var buffer = new byte[chunckSize];
                    await inStream.ReadAsync(buffer, 0, buffer.Length);

                    await outStream.WriteAsync(buffer, 0, buffer.Length);

                    UploadedBytes += chunckSize;

                    percent = UploadedBytes * 100 / TotalBytes;

                    LargeUploadMessage = $"กำลังอัปโหลดไฟล์ {percent}%";

                    await InvokeAsync(StateHasChanged);
                }

                if (remainder > 0)
                {
                    var buffer = new byte[remainder];
                    await inStream.ReadAsync(buffer, 0, buffer.Length);

                    await outStream.WriteAsync(buffer, 0, buffer.Length);

                    UploadedBytes += remainder;

                    percent = UploadedBytes * 100 / TotalBytes;

                    LargeUploadMessage = $"กำลังอัปโหลดไฟล์ {percent}%";

                    await InvokeAsync(StateHasChanged);
                }
            }
        }

        LargeUploadMessage = "กำลังตรวจสอบไฟล์ ...";
        await InvokeAsync(StateHasChanged);

        var chkValidate = new List<TCProcessExcelErrorDTO>();
        switch (uploadType)
        {
            case "main": chkValidate = await masterTemplateService.ValidateAndImportFile(filename, masterTemplateData, masterTemplateData.mst_code, mainLayout.loginUser.Username, bReplace); break;
            case "antibiotic": chkValidate = await masterTemplateService.ValidateAndImportAntibioticFile(filename, masterTemplateData, masterTemplateData.mst_code, mainLayout.loginUser.Username, bReplace); break;
            case "specimen": chkValidate = await masterTemplateService.ValidateAndImportSpecimenFile(filename, masterTemplateData, masterTemplateData.mst_code, mainLayout.loginUser.Username, bReplace); break;
            case "organism": chkValidate = await masterTemplateService.ValidateAndImportOrganismFile(filename, masterTemplateData, masterTemplateData.mst_code, mainLayout.loginUser.Username, bReplace); break;
            case "macro": chkValidate = await masterTemplateService.ValidateAndImportMacroFile(filename, masterTemplateData, masterTemplateData.mst_code, mainLayout.loginUser.Username, bReplace); break;
        }

        await InvokeAsync(StateHasChanged);

        //showPopupDialogUpload = false; //Close Dialog

        //int totalRec = 0;
        if (chkValidate != null)
        {
            string ErrorMessage = "";
            foreach (TCProcessExcelErrorDTO item in chkValidate)
            {
                if (item.tcp_status == 'E')
                    ErrorMessage += "- " + item.tcp_Err_Message + "\n";
            }
            if (!string.IsNullOrEmpty(ErrorMessage))
            {
                await jsRuntime.InvokeAsync<object>("ShowAlert", ErrorMessage);
                LargeUploadMessage = "พบข้อผิดพลาด";
            }
            else
            {
                LargeUploadMessage = "อัปโหลดเรียบร้อยแล้ว";
                await ClosePopupDialogUpload();
                await jsRuntime.InvokeAsync<object>("ShowAlert", "Upload completed.");
            }
        }
        else
        {
            LargeUploadMessage = "อัปโหลดเรียบร้อยแล้ว";
            await ClosePopupDialogUpload();
            await jsRuntime.InvokeAsync<object>("ShowAlert", "Upload completed.");
        }

        UploadedBytes = 0;
        TotalBytes = 0;
        LargeUploadMessage = "";
        Uploading = false;
    }

    private async void SaveMasterTemplateHeader()
    {
        var result = await jsRuntime.InvokeAsync<bool>("ShowConfirm", "Confirm save data.");
        if (result)
        {
            showLoading = true;
            StateHasChanged();

            if (masterTemplateData.mst_status == "N")
            {
                if (string.IsNullOrEmpty(masterTemplateData.mst_version))
                {
                    await jsRuntime.InvokeAsync<object>("ShowAlert", "กรุณากรอกข้อมูล Whonet Ver.");

                    showLoading = false;
                    StateHasChanged();

                    return;
                }

                if (masterTemplateData.mst_date_from is null)
                {
                    await jsRuntime.InvokeAsync<object>("ShowAlert", "กรุณากรอกข้อมูล วันที่มีผล");

                    showLoading = false;
                    StateHasChanged();

                    return;
                }

            }

            //Check Active
            //var checkActive = await masterTemplateService.GetListAsync();
            //foreach (var x in checkActive)
            //{
            //    if((x.mst_active = true) && (x.mst_code != masterTemplateData.mst_code))
            //    {
            //        var msg = "Master Template [" + x.mst_code + "] ที่ active อยู่เดิมจะถูก Inactive. คุณต้องการใช่หรือไม่" ;
            //        var results = await jsRuntime.InvokeAsync<bool>("ShowConfirm", msg);

            //        if (result)
            //        {

            //        }
            //        showLoading = false;
            //        StateHasChanged();

            //        return;
            //    }
            //}


            var saveResult = await masterTemplateService.SaveDataAsync(masterTemplateData);

            if (masterTemplateData.mst_status == "N" && string.IsNullOrEmpty(mst_code))
            {
                mst_code = saveResult.mst_code;
            }

            if (!string.IsNullOrEmpty(mst_code))
            {

                masterTemplateData = await masterTemplateService.GetDataAsync(mst_code);
                masterTemplateData.mst_status = "E";

                historyResultList = await masterTemplateService.GetHistoryAsync(masterTemplateData.mst_code);

                await jsRuntime.InvokeAsync<object>("ShowAlert", "Save data complete.");

                showLoading = false;
                StateHasChanged();
            }
            else
            {
                await jsRuntime.InvokeAsync<object>("ShowAlert", "Action unsuccessful.");
                showLoading = false;
            }
        }
    }

    private void ShowPopupDialogUpload(string pUploadType)
    {
        uploadType = pUploadType;
        showPopupDialogUpload = true;
    }

    private void SearchInboxDataAntibiotcs()
    {
        if (antibiotcsGrid.radzenGrid != null) antibiotcsGrid.radzenGrid.GoToPage(0);
        StateHasChanged();
    }

    private void SearchInboxDataAntibioticSpecies()
    {
        if (antibioticSpeciesGrid.radzenGrid != null) antibioticSpeciesGrid.radzenGrid.GoToPage(0);
        StateHasChanged();
    }

    private void SearchInboxDataDepartments()
    {
        if (departmentsGrid.radzenGrid != null) departmentsGrid.radzenGrid.GoToPage(0);
        StateHasChanged();
    }

    private void SearchInboxDataSpecimen()
    {
        if (specimenGrid.radzenGrid != null) specimenGrid.radzenGrid.GoToPage(0);
        StateHasChanged();
    }

    private void SearchInboxDataWHONETColumn()
    {
        if (whonetColumnGrid.radzenGrid != null) whonetColumnGrid.radzenGrid.GoToPage(0);
        StateHasChanged();
    }

    private void SearchInboxDataOrganism()
    {
        if (organismGrid.radzenGrid != null) organismGrid.radzenGrid.GoToPage(0);
        StateHasChanged();
    }

    private void SearchInboxDataMacro()
    {
        if (macroGrid.radzenGrid != null) macroGrid.radzenGrid.GoToPage(0);
        StateHasChanged();
    }
}
