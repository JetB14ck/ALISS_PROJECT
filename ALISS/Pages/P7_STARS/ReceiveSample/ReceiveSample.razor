@page "/ReceiveSample"

@using ALISS.Data.D7_StarsMapping
@using ALISS.Data
@using ALISS.STARS.DTO

@using Radzen
@using Radzen.Blazor
@using System.IO;

@inject IJSRuntime jsRuntime
@inject StarsMappingService mappingservice
@inject DialogService dialogService
@inject NavigationManager navigationManager
@inject DropDownListDataService ddlDataService
@inject UserLoginService userLoginService
@inject MasterTemplateService masterTemplateService
@inject ConfigDataService configDataService

<div style="width: 1200px;">
    <div class="divHead">
        STARS Automate Template
    </div>
</div>




@if (gridDatas == null)
{
    <p><em>Loading...</em></p>
    <Loading ShowModel="true" />
}
else
{
    <div class="container inputArea">
        <div class="row justify-content-between">
            <div class="col-12 col-xl-4">
                <div class="row justify-content-center divGroup">
                    <div class="@classLabel">
                        <LabelBox inputLabel="@configData.Get_Label("smp_machinetype")" />
                    </div>
                    <div class="@classInput">
                        <RadzenTextBox @bind-Value="searchModel.smp_machinetype" Style="width: 100%;" />
                    </div>
                </div>
            </div>


            <div class="col-12 col-xl-4">
                <div class="row justify-content-center divGroup buttonArea">
                    <div class="col-auto">
                        <RadzenButton class="btnSearch" Text="@configData.Get_Label("smp_index_search_btn")" Click="SearchData" />
                    </div>
                    <div class="col-auto">
                        <RadzenButton class="btnClear" Text="@configData.Get_Label("smp_index_clear_btn")" Click="ClearInboxData" />
                    </div>
                </div>
            </div>


        </div>
    </div>

    <hr />
    <div>

        @if (mainLayout.loginUser.PagePermission.rop_create == true)
        {
            <div class="container">
                <div class="row justify-content-end">
                    <div class="col-auto buttonArea">                      
                        <RadzenButton Text="@configData.Get_Label("smp_index_copy_btn")" class="btnAdd"
                                      Disabled="@(_MappingSelected != Guid.Empty ? false : true)"
                                      Click="@(() => ShowCopyMappingPopup())" />
                        <RadzenButton Icon="add" Text="@configData.Get_Label("smp_index_new_btn")" class="btnAdd" Click="@(() => OpenMappingDetail(""))" />

                    </div>
                </div>
            </div>
            <br />
        }
        <div style="width:90%;margin:0px auto;">
            <div class="container">
                <div class="row justify-content-end">
                    <div class="col-auto">
                        <label>Rows : </label>
                    </div>
                    <div class="col-auto">
                        <RadzenDropDown @bind-Value="inboxGrid.PageSize" TValue="int" AllowFiltering="true" Data="inboxGrid.PageSizeOption" Change="SearchData" Style="width:50px" />
                    </div>
                </div>
            </div>
            <RadzenGrid RowDoubleClick="@((args) => OpenMappingDetail(args.smp_id.ToString()))" AllowFiltering="true" AllowSorting="true" AllowPaging="true"
                        PageSize="inboxGrid.PageSize" @ref="inboxGrid.radzenGrid" Data="@gridDatas" TItem="STARSMappingListsDTO" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        RowSelect="@((args) => OnMappingSeleted(args.smp_id,args.smp_machinetype))" ColumnWidth="120px" AllowColumnResize="true">
                <Columns>
                    <RadzenGridColumn TItem="STARSMappingListsDTO" Property="smp_machinetype" Title="Machine" Width="200px">
                        <FooterTemplate>
                            <label title="@inboxGrid.FooterLabelString">@inboxGrid.FooterLabelString</label>
                        </FooterTemplate>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="STARSMappingListsDTO" Property="smp_startdate" Title="วันที่เริ่มใช้งาน" Width="95px">
                        <Template Context="data">
                            @String.Format("{0:dd/MM/yyyy}", data.smp_startdate)
                        </Template>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="STARSMappingListsDTO" Property="smp_enddate" Title="วันที่เลิกใช้งาน" Width="95px">
                        <Template Context="data">
                            @String.Format("{0:dd/MM/yyyy}", data.smp_enddate)
                        </Template>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="STARSMappingListsDTO" Property="smp_version" Title="Version" Width="90px" />
                    <RadzenGridColumn TItem="STARSMappingListsDTO" Property="smp_status_str" Title="Status" />
                    <RadzenGridColumn Context="order" TItem="STARSMappingListsDTO" Property="mp_updatedate" Title="วันที่ทำรายการล่าสุด" Width="120px">
                        <Template Context="data">
                            @String.Format("{0:dd/MM/yyyy HH:mm:ss}", data.smp_updatedate)
                        </Template>
                    </RadzenGridColumn>

                </Columns>

            </RadzenGrid>
        </div>
    </div>
}
@if (ShowPopup)
{
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">

                </div>

                <div class="modal-body">
                    <EditForm Model="@objCopyMapping" OnValidSubmit="()=> SaveMappingCopy()">
                        <DataAnnotationsValidator />
                        @*<ValidationSummary/>*@
                        <div class="container inputArea">
                            <div class="row">

                                <div class="col-xl-12">
                                    <div class="row justify-content-center divGroup">
                                        <div class="@classLabel">
                                            <LabelBox inputLabel="@configData.Get_Label("smp_machinetype")" requireField="true" />
                                        </div>
                                        <div class="@classInput">
                                            <RadzenTextBox @bind-Value="objCopyMapping.smp_machinetype" Style="width: 250px;" />
                                        </div>
                                    </div>
                                </div>
                                <div class="col-xl-12">
                                    <div class="row justify-content-center divGroup">
                                        <div class="@classLabel">
                                            <LabelBox inputLabel="@configData.Get_Label("smp_startdate")" requireField="true" />
                                        </div>
                                        <div class="@classInput">
                                            <RadzenDatePicker @bind-Value="objCopyMapping.smp_startdate" DateFormat="dd/MM/yyyy" />
                                            <ValidationMessage For="@(() => objCopyMapping.smp_startdate)" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row justify-content-center">
                                <div class="col-xl-12">
                                    <div class="row justify-content-center divGroup buttonArea">
                                        <div class="col-auto">
                                            <RadzenButton class="btnCancel" Text="@configData.Get_Label("smp_index_cancel_btn")" Click="CloseCopyMappingPopup" />
                                        </div>
                                        <div class="col-auto">
                                            <RadzenButton Icon="save" ButtonType="ButtonType.Submit" class="btnSave" Text="@configData.Get_Label("smp_index_save_btn")" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>

        </div>
    </div>
}

@if (showHospList)
{
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header"></div>
                <div class="modal-body">
                    <EditForm Model="@objCopyMapping" OnValidSubmit="()=> SaveMappingCopy()">
                        <DataAnnotationsValidator />
                        <div class="container inputArea">
                            <div class="row">
                                <div class="col-xl-12">
                                    <div class="row justify-content-center divGroup">
                                        <div class="@classLabel">
                                            <LabelBox inputLabel="@configData.Get_Label("spm_whonetcode")" requireField="true" />
                                        </div>
                                        <div class="@classInput">
                                            <RadzenDropDownDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowClear="true" TValue="string" AllowFiltering="true" Placeholder="Select..." Data="specimenDatas" TextProperty="spc_code" ValueProperty="spc_code" AllowFilteringByAllStringColumns="true">
                                                <Columns>
                                                    <RadzenDropDownDataGridColumn Property="spc_code" Title="Code" Width="100px" />
                                                    <RadzenDropDownDataGridColumn Property="spc_name" Title="Name" Width="200px" />
                                                </Columns>
                                            </RadzenDropDownDataGrid>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-xl-12">
                                    <div class="row justify-content-center divGroup">
                                        <div class="@classLabel">
                                            <LabelBox inputLabel="@configData.Get_Label("smp_startdate")" requireField="true" />
                                        </div>
                                        <div class="@classInput">
                                            <RadzenDatePicker @bind-Value="objCopyMapping.smp_startdate" DateFormat="dd/MM/yyyy" />
                                            <ValidationMessage For="@(() => objCopyMapping.smp_startdate)" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row justify-content-center">
                                <div class="col-xl-12">
                                    <div class="row justify-content-center divGroup buttonArea">
                                        <div class="col-auto">
                                            <RadzenButton class="btnCancel" Text="@configData.Get_Label("smp_index_cancel_btn")" Click="CloseCopyMappingHospListPopup" />
                                        </div>
                                        <div class="col-auto">
                                            <RadzenButton Icon="save" ButtonType="ButtonType.Submit" class="btnSave" Text="@configData.Get_Label("smp_index_save_btn")" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<Loading ShowModel="showModal" />


@code {
    [CascadingParameter] MainLayout mainLayout { get; set; }

    private ConfigData configData = new ConfigData();
    private string classLabel = "col-4";
    private string classInput = "col-8";

    private RadzenGridCustom<STARSMappingListsDTO> inboxGrid = new RadzenGridCustom<STARSMappingListsDTO>();
    //private RadzenGridCustom<> hospListGrid = new RadzenGridCustom<>();
    //-- test
    RadzenGridCustom<STARSSpecimenMappingListsDTO> specimenGrid = new RadzenGridCustom<STARSSpecimenMappingListsDTO>();
    private List<STARSSpecimenMappingListsDTO> gridSpecimenDatas;
    private List<SpecimenDTO> specimenDatas;
    //-- test

    private List<HospitalDataDTO> arh_List;
    private List<HospitalDataDTO> prv_List;
    private List<HospitalDataDTO> hos_List;

    private List<DropDownListDTO> rol_List;
    private List<DropDownListDTO> lab_List = new List<DropDownListDTO>();

    private List<HospitalLabDataDTO> lab_ddl_List;

    private bool showModal = false;
    private bool ShowPopup = false;
    private bool showHospList = false;


    private List<STARSMappingListsDTO> gridDatas;
    private Guid _MappingSelected = Guid.Empty;
    STARSMappingSearchDTO searchModel = new STARSMappingSearchDTO();
    STARSMappingSearchDTO hoslabModel = new STARSMappingSearchDTO();
    STARSMappingDataDTO objCopyMapping = new STARSMappingDataDTO();

    private IBrowserFile selectedFiles;

    string LargeUploadMessage = "";
    long UploadedBytes;
    long TotalBytes;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await mainLayout.GetLoginUser();
            if (mainLayout.loginUser.CheckPagePermission("MNU_0702") == false) navigationManager.NavigateTo("/NoPermissionPage");

            configData.ConfigDTOList = await configDataService.Get_TBConfig_DataList_Async(new TBConfigDTO() { tbc_mnu_code = "MNU_0702" });

            _MappingSelected = Guid.Empty;
            rol_List = await ddlDataService.GetRoleListByModelAsync();

            gridDatas = await mappingservice.GetMappingListByParamAsync(searchModel);
        }
    }

    private async void SearchData()
    {
        showModal = true;

        gridDatas = await mappingservice.GetMappingListByParamAsync(searchModel);
        if (inboxGrid.radzenGrid != null) inboxGrid.radzenGrid.GoToPage(0);
        showModal = false;



        StateHasChanged();
    }

    void OnMappingSeleted(Guid mp_id, string mp_program)
    {
        _MappingSelected = mp_id;
        objCopyMapping.smp_AntibioticIsolateOneRec = true;
        objCopyMapping.smp_firstlineisheader = true;
        objCopyMapping.smp_dateformat = "dd/mm/yyyy";

    }

    private async Task SaveMappingCopy()
    {
        var now = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
        if (objCopyMapping.smp_startdate < now)
        {
            showModal = false;
            await jsRuntime.InvokeAsync<object>("ShowAlert", "วันที่เริ่มใช้งานไม่สามารถมีค่าก่อนวันที่ปัจจุบัน");
            return;
        }
        showModal = true;
        var searchMasterTemplate = new MasterTemplateSearchDTO();
        var ActiveMasterTemplate = await masterTemplateService.GetListByModelActiveAsync(searchMasterTemplate);

        var getSelectedMappingData = await mappingservice.GetMappingDataAsync(_MappingSelected.ToString());
        if (getSelectedMappingData.smp_id != Guid.Empty)
        {
            getSelectedMappingData.smp_machinetype = objCopyMapping.smp_machinetype;
            var chkOldMappingData = await mappingservice.GetMappingDataByModelAsync(getSelectedMappingData);


            if (chkOldMappingData.smp_id != Guid.Empty)
            {

                //Dialog Confirm
                var result = await jsRuntime.InvokeAsync<bool>("ShowConfirm", "Found old version(" + @chkOldMappingData.smp_version.ToString() + ").Do you want to create new version?");

                if (result)
                {
                    if (objCopyMapping.smp_startdate <= chkOldMappingData.smp_startdate)
                    {
                        showModal = false;
                        await jsRuntime.InvokeAsync<object>("ShowAlert", "วันที่เริ่มใช้งานไม่สามารถมีค่าก่อนหรือวันเดียวกันกับวันที่เริ่มใช้งานของ Version ก่อนหน้า (" + @chkOldMappingData.smp_version.ToString() + ")(" + @chkOldMappingData.smp_startdate_str + ")");
                        return;
                    }
                    objCopyMapping.smp_version = chkOldMappingData.smp_version + 1;
                }
                else
                {
                    showModal = false;
                    return;
                }

            }
            else
            {
                objCopyMapping.smp_version = 1;
            }


            objCopyMapping.smp_mst_code = ActiveMasterTemplate.mst_code;
            objCopyMapping.smp_id = _MappingSelected;
            objCopyMapping.smp_createuser = mainLayout.loginUser.Username;

            var x = await mappingservice.CopyMappingDataAsync(objCopyMapping);

            navigationManager.NavigateTo("StarsMappingDetail/" + x.smp_id.ToString());

        }
    }

    async Task ShowCopyMappingPopup()
    {
        ShowPopup = true;
    }

    async Task ShowCopyMappingHospListPopup()
    {
        showHospList = true;
    }

    void CloseCopyMappingHospListPopup()
    {
        showHospList = false;
    }

    void CloseCopyMappingPopup()
    {
        hoslabModel = new STARSMappingSearchDTO();
        objCopyMapping.smp_machinetype = string.Empty;
        objCopyMapping.smp_startdate = null;
        ShowPopup = false;
    }

    async Task OpenMappingDetail(string id)
    {
        if (string.IsNullOrEmpty(id))
        {
            navigationManager.NavigateTo("StarsMappingDetail");
        }
        else
        {
            navigationManager.NavigateTo("StarsMappingDetail/" + id);
        }
    }

    private async void ClearInboxData()
    {
        searchModel.smp_machinetype = string.Empty;
        SearchData();
    }
}
