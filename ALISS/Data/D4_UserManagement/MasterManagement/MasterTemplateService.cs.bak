using ALISS.Data.Client;
using ALISS.DropDownList.DTO;
using ALISS.Master.DTO;
using ALISS.MasterManagement.DTO;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Text.Json;
using System.Threading.Tasks;

namespace ALISS.Data.D4_UserManagement.MasterManagement
{
    public class MasterTemplateService
    {
        private IConfiguration Configuration { get; }

        private ApiHelper _apiHelper;

        public MasterTemplateService(IConfiguration configuration)
        {
            _apiHelper = new ApiHelper(configuration["ApiClient:ApiUrl"]);
        }

        public async Task<List<MasterTemplateDTO>> GetListAsync()
        {
            List<MasterTemplateDTO> objList = new List<MasterTemplateDTO>();

            objList = await _apiHelper.GetDataListAsync<MasterTemplateDTO>("mastertemplate_api/Get_List");

            return objList;
        }

        public async Task<List<MasterTemplateDTO>> GetListByParamAsync(MasterTemplateSearchDTO searchData)
        {
            List<MasterTemplateDTO> objList = new List<MasterTemplateDTO>();

            var searchJson = JsonSerializer.Serialize(searchData);

            objList = await _apiHelper.GetDataListByParamsAsync<MasterTemplateDTO>("mastertemplate_api/Get_List", searchJson);

            return objList;
        }

        public async Task<List<MasterTemplateDTO>> GetListByModelAsync(MasterTemplateSearchDTO searchData)
        {
            List<MasterTemplateDTO> objList = new List<MasterTemplateDTO>();

            objList = await _apiHelper.GetDataListByModelAsync<MasterTemplateDTO, MasterTemplateSearchDTO>("mastertemplate_api/Get_ListByModel", searchData);

            return objList;
        }

        public async Task<MasterTemplateDTO> GetListByModelActiveAsync(MasterTemplateSearchDTO searchData)
        {
            MasterTemplateDTO objList = new MasterTemplateDTO();

            objList = await _apiHelper.GetDataByModelAsync<MasterTemplateDTO, MasterTemplateSearchDTO>("mastertemplate_api/Get_List_Active_ByModel", searchData);

            return objList;
        }

        public async Task<MasterTemplateDTO> GetDataAsync(string mst_code)
        {
            MasterTemplateDTO menu = new MasterTemplateDTO();

            menu = await _apiHelper.GetDataByIdAsync<MasterTemplateDTO>("mastertemplate_api/Get_Data", mst_code);

            return menu;
        }

        public async Task<MasterTemplateDTO> SaveDataAsync(MasterTemplateDTO model)
        {
            //MenuDTO menu = new MenuDTO()
            //{
            //    mnu_id = "2",
            //    mnu_name = "TEST_name",
            //    mnu_area = "TEST_area",
            //    mnu_controller = "TEST_controller"
            //};

            var menua = await _apiHelper.PostDataAsync<MasterTemplateDTO>("mastertemplate_api/Post_SaveData", model);

            return menua;
        }

        public async Task<MasterTemplateDTO> SaveCopyDataAsync(MasterTemplateDTO model)
        {
            //MenuDTO menu = new MenuDTO()
            //{
            //    mnu_id = "2",
            //    mnu_name = "TEST_name",
            //    mnu_area = "TEST_area",
            //    mnu_controller = "TEST_controller"
            //};

            var menua = await _apiHelper.PostDataAsync<MasterTemplateDTO>("mastertemplate_api/Post_SaveCopyData", model);

            return menua;
        }

        public async Task<List<LogProcessDTO>> GetHistoryAsync(string tran_id)
        {
            List<LogProcessDTO> objList = new List<LogProcessDTO>();

            LogProcessSearchDTO searchData = new LogProcessSearchDTO() { log_mnu_name = "MasterTemplate", log_tran_id = tran_id };

            objList = await _apiHelper.GetDataListByModelAsync<LogProcessDTO, LogProcessSearchDTO>("logprocess_api/Get_List", searchData);

            return objList;
        }

        public Task<GridData[]> GetHistoryAsync()
        {
            var rng = new Random();
            var objReturn = new List<GridData>(){
                new GridData { Column_01 = "(A0000)Super admin", Column_02 = "Active role", Column_03 = "Lorem", Column_04 = "00/00/00 00:00", Column_05 = "" },
                new GridData { Column_01 = "(A0000)Super admin", Column_02 = "Inactive role", Column_03 = "Lorem", Column_04 = "00/00/00 00:00", Column_05 = "" },
            };
            return Task.FromResult(objReturn.ToArray());
        }

        #region WHONet

        public async Task<List<TCWHONET_AntibioticsDTO>> Get_TCWHONET_Antibiotics_List(TCWHONET_AntibioticsDTO searchModel)
        {
            List<TCWHONET_AntibioticsDTO> objList = new List<TCWHONET_AntibioticsDTO>();

            objList = await _apiHelper.GetDataListByModelAsync<TCWHONET_AntibioticsDTO, TCWHONET_AntibioticsDTO>("whonetdata_api/WHONET_Antibiotics_List", searchModel);

            return objList.OrderBy(x => x.who_ant_code).ToList();
        }

        public async Task<List<TCWHONET_AntibioticSpeciesDTO>> Get_TCWHONET_AntibioticSpecies_List(TCWHONET_AntibioticSpeciesDTO searchModel)
        {
            List<TCWHONET_AntibioticSpeciesDTO> objList = new List<TCWHONET_AntibioticSpeciesDTO>();

            objList = await _apiHelper.GetDataListByModelAsync<TCWHONET_AntibioticSpeciesDTO, TCWHONET_AntibioticSpeciesDTO>("whonetdata_api/WHONET_AntibioticSpecies_List", searchModel);

            return objList.OrderBy(x => x.who_ant_spe_ant_code).ToList();
        }

        public async Task<List<TCWHONET_DepartmentsDTO>> Get_TCWHONET_Departments_List(TCWHONET_DepartmentsDTO searchModel)
        {
            List<TCWHONET_DepartmentsDTO> objList = new List<TCWHONET_DepartmentsDTO>();

            objList = await _apiHelper.GetDataListByModelAsync<TCWHONET_DepartmentsDTO, TCWHONET_DepartmentsDTO>("whonetdata_api/WHONET_Departments_List", searchModel);

            return objList.OrderBy(x => x.who_dep_code).ToList();
        }

        public async Task<List<TCWHONET_SpecimenDTO>> Get_TCWHONET_Specimen_List(TCWHONET_SpecimenDTO searchModel)
        {
            List<TCWHONET_SpecimenDTO> objList = new List<TCWHONET_SpecimenDTO>();

            objList = await _apiHelper.GetDataListByModelAsync<TCWHONET_SpecimenDTO, TCWHONET_SpecimenDTO>("whonetdata_api/WHONET_Specimen_List", searchModel);

            return objList.OrderBy(x => x.who_spc_code).ToList();
        }

        public async Task<List<TCWHONETColumnDTO>> Get_TCWHONET_Column_List(TCWHONETColumnDTO searchModel)
        {
            List<TCWHONETColumnDTO> objList = new List<TCWHONETColumnDTO>();

            objList = await _apiHelper.GetDataListByModelAsync<TCWHONETColumnDTO, TCWHONETColumnDTO>("whonetdata_api/WHONET_Column_List", searchModel);

            return objList.OrderBy(x => x.wnc_code).ToList();
        }

        public async Task<List<TCWHONET_OrganismDTO>> Get_TCWHONET_Organism_List(TCWHONET_OrganismDTO searchModel)
        {
            List<TCWHONET_OrganismDTO> objList = new List<TCWHONET_OrganismDTO>();

            objList = await _apiHelper.GetDataListByModelAsync<TCWHONET_OrganismDTO, TCWHONET_OrganismDTO>("whonetdata_api/WHONET_Organism_List", searchModel);

            return objList.OrderBy(x => x.who_org).ToList();
        }

        public async Task<List<TCWHONET_MacroDTO>> Get_TCWHONET_Macro_List(TCWHONET_MacroDTO searchModel)
        {
            List<TCWHONET_MacroDTO> objList = new List<TCWHONET_MacroDTO>();

            objList = await _apiHelper.GetDataListByModelAsync<TCWHONET_MacroDTO, TCWHONET_MacroDTO>("whonetdata_api/WHONET_Macro_List", searchModel);

            return objList.OrderBy(x => x.who_mac_name).ToList();
        }

        public async Task<TCWHONET_AntibioticsDTO> SaveAntibioticsListDataAsync(List<TCWHONET_AntibioticsDTO> models)
        {
            var _object = await _apiHelper.PostListofDataAsync<TCWHONET_AntibioticsDTO>("whonetdata_api/Post_Antibiotics_SaveListData", models);

            return _object;
        }

        public async Task<TCWHONET_AntibioticsDTO> DeleteAntibioticsListDataAsyn(List<TCWHONET_AntibioticsDTO> models)
        {
            var _object = await _apiHelper.PostListofDataAsync<TCWHONET_AntibioticsDTO>("whonetdata_api/Post_Antibiotics_DeleteListData", models);

            return _object;
        }

        public async Task<TCWHONET_AntibioticSpeciesDTO> SaveAntibioticSpeciesListDataAsync(List<TCWHONET_AntibioticSpeciesDTO> models)
        {
            var _object = await _apiHelper.PostListofDataAsync<TCWHONET_AntibioticSpeciesDTO>("whonetdata_api/Post_AntibioticSpecies_SaveListData", models);

            return _object;
        }

        public async Task<TCWHONET_AntibioticSpeciesDTO> DeleteAntibioticSpeciesListDataAsyn(List<TCWHONET_AntibioticSpeciesDTO> models)
        {
            var _object = await _apiHelper.PostListofDataAsync<TCWHONET_AntibioticSpeciesDTO>("whonetdata_api/Post_AntibioticSpecies_DeleteListData", models);

            return _object;
        }

        public async Task<TCWHONET_DepartmentsDTO> SaveDepartmentsListDataAsync(List<TCWHONET_DepartmentsDTO> models)
        {
            var _object = await _apiHelper.PostListofDataAsync<TCWHONET_DepartmentsDTO>("whonetdata_api/Post_Departments_SaveListData", models);

            return _object;
        }

        public async Task<TCWHONET_DepartmentsDTO> DeleteDepartmentsListDataAsyn(List<TCWHONET_DepartmentsDTO> models)
        {
            var _object = await _apiHelper.PostListofDataAsync<TCWHONET_DepartmentsDTO>("whonetdata_api/Post_Departments_DeleteListData", models);

            return _object;
        }

        public async Task<TCWHONET_SpecimenDTO> SaveSpecimenListDataAsync(List<TCWHONET_SpecimenDTO> models)
        {
            var _object = await _apiHelper.PostListofDataAsync<TCWHONET_SpecimenDTO>("whonetdata_api/Post_Specimen_SaveListData", models);

            return _object;
        }
        public async Task<TCWHONET_SpecimenDTO> DeleteSpecimenListDataAsyn(List<TCWHONET_SpecimenDTO> models)
        {
            var _object = await _apiHelper.PostListofDataAsync<TCWHONET_SpecimenDTO>("whonetdata_api/Post_Specimen_DeleteListData", models);

            return _object;
        }

        public async Task<TCWHONETColumnDTO> SaveColumnListDataAsync(List<TCWHONETColumnDTO> models)
        {
            var _object = await _apiHelper.PostListofDataAsync<TCWHONETColumnDTO>("whonetdata_api/Post_Column_SaveListData", models);

            return _object;
        }

        public async Task<TCWHONETColumnDTO> DeleteColumnListDataAsyn(List<TCWHONETColumnDTO> models)
        {
            var _object = await _apiHelper.PostListofDataAsync<TCWHONETColumnDTO>("whonetdata_api/Post_Column_DeleteListData", models);

            return _object;
        }

        public async Task<TCWHONET_OrganismDTO> SaveOrganismListDataAsync(List<TCWHONET_OrganismDTO> models)
        {
            var _object = await _apiHelper.PostListofDataAsync<TCWHONET_OrganismDTO>("whonetdata_api/Post_Organism_SaveListData", models);

            return _object;
        }

        public async Task<TCWHONET_OrganismDTO> DeleteOrganismListDataAsyn(List<TCWHONET_OrganismDTO> models)
        {
            var _object = await _apiHelper.PostListofDataAsync<TCWHONET_OrganismDTO>("whonetdata_api/Post_Organism_DeleteListData", models);

            return _object;
        }

        public async Task<TCWHONET_MacroDTO> SaveMacroListDataAsync(List<TCWHONET_MacroDTO> models)
        {
            var _object = await _apiHelper.PostListofDataAsync<TCWHONET_MacroDTO>("whonetdata_api/Post_Macro_SaveListData", models);

            return _object;
        }
        public async Task<TCWHONET_MacroDTO> DeleteMacroListDataAsyn(List<TCWHONET_MacroDTO> models)
        {
            var _object = await _apiHelper.PostListofDataAsync<TCWHONET_MacroDTO>("whonetdata_api/Post_Macro_DeleteListData", models);

            return _object;
        }
        #endregion


        public async Task<string> GetPath()
        {
            var ErrorMessage = new List<TCProcessExcelErrorDTO>();

            string path = "";
            List<ParameterDTO> objParamList = new List<ParameterDTO>();
            var searchModel = new ParameterDTO() { prm_code_major = "MASTER_TEMPLATE_PATH" };

            objParamList = await _apiHelper.GetDataListByModelAsync<ParameterDTO, ParameterDTO>("dropdownlist_api/GetParameterList", searchModel);

            if (objParamList.FirstOrDefault(x => x.prm_code_minor == "PATH") != null)
            {
                path = objParamList.FirstOrDefault(x => x.prm_code_minor == "PATH").prm_value;
            }
            else
            {
            }

            return path;
        }
        public async Task<List<TCProcessExcelErrorDTO>> ValidateAndImportFile(string path, MasterTemplateDTO masterTemplate, string mst_code, string createUser,bool bReplace)
        {
            DateTime createDate = DateTime.Now;
            var ErrorMessage = new List<TCProcessExcelErrorDTO>();
            string tableMapping = string.Empty;
            int tabLineIndex = 0;

            List<TCWHONET_AntibioticsDTO> tCWHONET_Antibiotics = new List<TCWHONET_AntibioticsDTO>();
            List<TCWHONET_AntibioticSpeciesDTO> tCWHONET_AntibioticSpecies = new List<TCWHONET_AntibioticSpeciesDTO>();
            List<TCWHONET_DepartmentsDTO> tCWHONET_Departments = new List<TCWHONET_DepartmentsDTO>();
            List<TCWHONETColumnDTO> tCWHONETColumns = new List<TCWHONETColumnDTO>();

            try
            {
                //path = Path.Combine(path);
                #region Read File Data
                //if (Path.GetExtension(fileName) == ".xlsm")
                var dataRows = File.ReadAllLines(path);
                foreach(var (line, index) in dataRows.Select((v, i) => (v, i)))
                {
                    if (!string.IsNullOrEmpty(line))
                    {
                        if (line.IndexOf("[") != -1 && line.IndexOf("]") != -1)
                        {
                            switch (line)
                            {
                                case "[Antibiotics]": tableMapping = "TCWHONET_Antibiotics"; tabLineIndex = index; continue;
                                case "[Antibiotic Species-Specific Breakpoints]": tableMapping = "TCWHONET_AntibioticSpecies"; continue;
                                case "[Data fields]": tableMapping = "TCWHONETColumn"; continue;
                                case "[Departments]": tableMapping = "TCWHONET_Departments"; continue;
                                default: tableMapping = string.Empty; continue;
                            }
                        }

                        #region TCWHONET_Antibiotics
                        if (tableMapping == "TCWHONET_Antibiotics")
                        {
                            var datas = line.Replace("\"", "").Split(",");
                            if (datas.Length > 1)
                            {
                                var subDatas = datas[1].Split("_");
                                tCWHONET_Antibiotics.Add(new TCWHONET_AntibioticsDTO
                                {
                                    who_ant_mst_code = mst_code,
                                    who_ant_source = line,
                                    who_ant_code = datas[0],
                                    who_ant_name = subDatas.Length >= 1 ? subDatas[0] : string.Empty,
                                    who_ant_type = subDatas.Length >= 2 ? subDatas[1] : string.Empty,
                                    who_ant_lab = subDatas.Length >= 3 ? subDatas[2] : string.Empty,
                                    who_ant_size = subDatas.Length >= 4 ? subDatas[3] : string.Empty,
                                    who_ant_S = datas.Length > 2 ? datas[2] : string.Empty,
                                    who_ant_I = datas.Length == 5 ? datas[3] : string.Empty,
                                    who_ant_R = datas.Length == 5 ? datas[4] : datas[3],
                                    who_ant_active = true,
                                    who_ant_createdate = createDate,
                                    who_ant_createuser = createUser
                                });
                            }
                        }
                        #endregion

                        #region TCWHONET_AntibioticSpecies
                        if (tableMapping == "TCWHONET_AntibioticSpecies")
                        {
                            var datas = line.Replace("\"", "").Split(",");
                            if (datas.Length > 1)
                            {
                                tCWHONET_AntibioticSpecies.Add(new TCWHONET_AntibioticSpeciesDTO
                                {
                                    who_mst_code = mst_code,
                                    who_ant_spe_source = line,
                                    who_ant_spe_org_code = datas.Length > 0 ?datas[0]:string.Empty,
                                    who_ant_spe_ant_code = datas.Length > 1 ? datas[1] : string.Empty,
                                    who_ant_spe_I_low = datas.Length > 2 ? datas[2] : string.Empty,
                                    who_ant_spe_I_up = datas.Length > 3 ? datas[3] : string.Empty,
                                    who_ant_spe_spc = datas.Length > 4 ? datas[4] : string.Empty,
                                    who_ant_spe_1 = datas.Length > 5 ? datas[5] : string.Empty,
                                    who_ant_spe_2 = datas.Length > 6 ? datas[6] : string.Empty,
                                    who_ant_spe_active = true,
                                    who_ant_spe_createdate = createDate,
                                    who_ant_spe_createuser = createUser
                                });
                            }
                        }
                        #endregion

                        #region TCWHONETColumn
                        if (tableMapping == "TCWHONETColumn")
                        {
                            var datas = line.Replace("\"", "").Split(",");
                            if (datas.Length > 1)
                            {
                                tCWHONETColumns.Add(new TCWHONETColumnDTO
                                {
                                    wnc_mst_code = mst_code,
                                    wnc_code = datas.Length > 0 ? datas[0] : string.Empty,
                                    wnc_name = datas.Length > 1 ? datas[1] : string.Empty,
                                    wnc_data_type = datas.Length > 3 ? datas[3] : string.Empty,
                                    wnc_active = true,
                                    wnc_mendatory_his = true,
                                    wnc_mendatory_lab = true,
                                    wnc_createdate = createDate,
                                    wnc_createuser = createUser
                                });
                            }
                        }
                        #endregion

                        #region TCWHONET_Departments
                        if (tableMapping == "TCWHONET_Departments")
                        {
                            var datas = line.Replace("\"", "").Split(",");
                            if (datas.Length > 1)
                            {
                                tCWHONET_Departments.Add(new TCWHONET_DepartmentsDTO
                                {
                                    who_mst_code = mst_code,
                                    who_dep_code = datas.Length > 0 ? datas[0] : string.Empty,
                                    who_dep_name = datas.Length > 1 ? datas[1] : string.Empty,
                                    who_dep_active = true,
                                    who_dep_createdate = createDate,
                                    who_dep_createuser = createUser
                                });
                            }
                        }
                        #endregion
                    }
                }

                #endregion

                #region Save Data

                // Delete Old Data
                if (bReplace)
                {
                    var delAntibiotics = await DeleteAntibioticsListDataAsyn(tCWHONET_Antibiotics);
                    var delAntibioticSpicies = await DeleteAntibioticSpeciesListDataAsyn(tCWHONET_AntibioticSpecies);
                    var delDepartments = await DeleteDepartmentsListDataAsyn(tCWHONET_Departments);
                    var delColumn = await DeleteColumnListDataAsyn(tCWHONETColumns);
                }
                var resultAntibiotics = await SaveAntibioticsListDataAsync(tCWHONET_Antibiotics);
                var resultAntibioticSpicies = await SaveAntibioticSpeciesListDataAsync(tCWHONET_AntibioticSpecies);
                var resultDepartments = await SaveDepartmentsListDataAsync(tCWHONET_Departments);
                var resultColumn = await SaveColumnListDataAsync(tCWHONETColumns);
                #endregion
            }
            catch (Exception ex)
            {
                ErrorMessage.Add(new TCProcessExcelErrorDTO
                {
                    tcp_status = 'E',
                    tcp_Err_type = 'E',
                    tcp_Err_No = "",
                    tcp_Err_SheetName = "Total",
                    tcp_Err_Message = ex.Message
                });
            }

            return ErrorMessage;
        }
        public async Task<List<TCProcessExcelErrorDTO>> ValidateAndImportSpecimenFile(string path, MasterTemplateDTO masterTemplate, string mst_code, string createUser, bool bReplace)
        {
            DateTime createDate = DateTime.Now;
            var ErrorMessage = new List<TCProcessExcelErrorDTO>();
            string tableMapping = string.Empty;

            List<TCWHONET_SpecimenDTO> tCWHONET_Specimen = new List<TCWHONET_SpecimenDTO>();

            try
            {
                //path = Path.Combine(path);
                #region Read File Data            
                var dataRows = File.ReadAllLines(path);
                int numericColumnIndex = 0, codeColumnIndex = 0, nameColumnIndex = 0;
                foreach (var (line, index) in dataRows.Select((v, i) => (v, i)))
                {
                    if (!string.IsNullOrEmpty(line))
                    {
                        var datas = line.Split("\t");
                        //Header
                        if (index == 0)
                        {
                            numericColumnIndex = Array.IndexOf(datas, "NUMERIC");
                            codeColumnIndex = Array.IndexOf(datas, "C_ENGLISH");
                            nameColumnIndex = Array.IndexOf(datas, "ENGLISH");
                            continue;
                        }

                        //Data
                        if (numericColumnIndex == -1 || codeColumnIndex == -1 || nameColumnIndex == -1)
                            continue;
                        if (datas.Length > 1)
                        {
                            tCWHONET_Specimen.Add(new TCWHONET_SpecimenDTO
                            {
                                who_spc_mst_code = mst_code,
                                who_spc_numeric = datas[numericColumnIndex],
                                who_spc_code = datas[codeColumnIndex],
                                who_spc_name = datas[nameColumnIndex],
                                who_spc_active = true,
                                who_spc_createdate = createDate,
                                who_spc_createuser = createUser
                            });
                        }
                    }
                }

                #endregion

                if (tCWHONET_Specimen.Count > 0)
                {
                    #region Save Data
                    if (bReplace)
                    {
                        var delSpecimen = await DeleteSpecimenListDataAsyn(tCWHONET_Specimen);
                    }
                    var resultSpecimen = await SaveSpecimenListDataAsync(tCWHONET_Specimen);
                    #endregion
                }
                else
                {
                    ErrorMessage.Add(new TCProcessExcelErrorDTO
                    {
                        tcp_status = 'E',
                        tcp_Err_type = 'E',
                        tcp_Err_No = "",
                        tcp_Err_SheetName = "Total",
                        tcp_Err_Message = "Not found."
                    });
                }
            }
            catch (Exception ex)
            {
                ErrorMessage.Add(new TCProcessExcelErrorDTO
                {
                    tcp_status = 'E',
                    tcp_Err_type = 'E',
                    tcp_Err_No = "",
                    tcp_Err_SheetName = "Total",
                    tcp_Err_Message = ex.Message
                });
            }
            return ErrorMessage;
        }

        public async Task<List<TCProcessExcelErrorDTO>> ValidateAndImportOrganismFile(string path, MasterTemplateDTO masterTemplate, string mst_code, string createUser, bool bReplace)
        {
            DateTime createDate = DateTime.Now;
            var ErrorMessage = new List<TCProcessExcelErrorDTO>();
            string tableMapping = string.Empty;

            List<TCWHONET_OrganismDTO> tCWHONET_Organism = new List<TCWHONET_OrganismDTO>();

            try
            {
                //path = Path.Combine(path);
                #region Read File Data              
                var dataRows = File.ReadAllLines(path);
                foreach (var (line, index) in dataRows.Select((v, i) => (v, i)))
                {
                    if (!string.IsNullOrEmpty(line))
                    {
                        var datas = line.Split("\t");
                        //Header
                        if (index == 0)
                            continue;

                        //Data
                        if (datas.Length > 1)
                        {
                            tCWHONET_Organism.Add(new TCWHONET_OrganismDTO
                            {
                                who_org_mst_code = mst_code,
                                who_org_code = datas[0],
                                who_org = datas[1],
                                who_gram = datas[2],
                                who_organism = datas[3],
                                who_org_clean = datas[4],
                                who_org_status = datas[5],
                                who_common = datas[6],
                                who_org_group = datas[7],
                                who_sub_group = datas[8],
                                who_genus = datas[9],
                                who_genus_code = datas[10],
                                who_sct_code = datas[11],
                                who_sct_text = datas[12],
                                who_org_active = true,
                                who_org_createdate = createDate,
                                who_org_createuser = createUser
                            });
                        }
                    }
                }

                #endregion
                if (tCWHONET_Organism.Count > 0)
                {
                    #region Save Data
                    if (bReplace)
                    {
                        var delOrganism = await DeleteOrganismListDataAsyn(tCWHONET_Organism);
                    }
                    var resultOrganism = await SaveOrganismListDataAsync(tCWHONET_Organism);
                    #endregion
                }
                else {
                    ErrorMessage.Add(new TCProcessExcelErrorDTO
                    {
                        tcp_status = 'E',
                        tcp_Err_type = 'E',
                        tcp_Err_No = "",
                        tcp_Err_SheetName = "Total",
                        tcp_Err_Message = "Not found."
                    });
                }
            }
            catch (Exception ex)
            {
                ErrorMessage.Add(new TCProcessExcelErrorDTO
                {
                    tcp_status = 'E',
                    tcp_Err_type = 'E',
                    tcp_Err_No = "",
                    tcp_Err_SheetName = "Total",
                    tcp_Err_Message = ex.Message
                });
            }
            return ErrorMessage;
        }

        public async Task<List<TCProcessExcelErrorDTO>> ValidateAndImportMacroFile(string path, MasterTemplateDTO masterTemplate, string mst_code, string createUser, bool bReplace)
        {
            DateTime createDate = DateTime.Now;
            var ErrorMessage = new List<TCProcessExcelErrorDTO>();
            string tableMapping = string.Empty;

            List<TCWHONET_MacroDTO> tCWHONET_Macro = new List<TCWHONET_MacroDTO>();

            try
            {
                //path = Path.Combine(path);
                #region Read File Data
               
                using (ZipArchive archive = ZipFile.OpenRead(path))
                {
                    foreach (ZipArchiveEntry entry in archive.Entries)
                    {
                        tCWHONET_Macro.Add(new TCWHONET_MacroDTO
                        {
                            who_mac_mst_code = mst_code,
                            who_mac_name = entry.Name.Split(".")[0],
                            who_mac_active = true,
                            who_mac_createdate = createDate,
                            who_mac_createuser = createUser
                        });
                    }
                }
                #endregion

                #region Save Data
                if (bReplace)
                {
                    var delMacro = await DeleteMacroListDataAsyn(tCWHONET_Macro);
                }
                var resultMacro = await SaveMacroListDataAsync(tCWHONET_Macro);
                #endregion
            }
            catch (Exception ex)
            {
                ErrorMessage.Add(new TCProcessExcelErrorDTO
                {
                    tcp_status = 'E',
                    tcp_Err_type = 'E',
                    tcp_Err_No = "",
                    tcp_Err_SheetName = "Total",
                    tcp_Err_Message = ex.Message
                });
            }
            return ErrorMessage;
        }
    
        public async Task<List<TCProcessExcelErrorDTO>> ValidateAndImportGlassFile(string path, MasterTemplateDTO masterTemplate, string mst_code, string createUser, bool bReplace)
        {
            var ErrorMessage = new List<TCProcessExcelErrorDTO>();
            return ErrorMessage;
        }
    }
}
